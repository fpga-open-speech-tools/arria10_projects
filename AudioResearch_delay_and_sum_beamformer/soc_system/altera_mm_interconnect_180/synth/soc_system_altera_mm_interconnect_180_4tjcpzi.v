// soc_system_altera_mm_interconnect_180_4tjcpzi.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.0 614

`timescale 1 ps / 1 ps
module soc_system_altera_mm_interconnect_180_4tjcpzi (
		input  wire [3:0]  hps_h2f_lw_axi_master_awid,                        //                       hps_h2f_lw_axi_master.awid
		input  wire [20:0] hps_h2f_lw_axi_master_awaddr,                      //                                            .awaddr
		input  wire [3:0]  hps_h2f_lw_axi_master_awlen,                       //                                            .awlen
		input  wire [2:0]  hps_h2f_lw_axi_master_awsize,                      //                                            .awsize
		input  wire [1:0]  hps_h2f_lw_axi_master_awburst,                     //                                            .awburst
		input  wire [1:0]  hps_h2f_lw_axi_master_awlock,                      //                                            .awlock
		input  wire [3:0]  hps_h2f_lw_axi_master_awcache,                     //                                            .awcache
		input  wire [2:0]  hps_h2f_lw_axi_master_awprot,                      //                                            .awprot
		input  wire [4:0]  hps_h2f_lw_axi_master_awuser,                      //                                            .awuser
		input  wire        hps_h2f_lw_axi_master_awvalid,                     //                                            .awvalid
		output wire        hps_h2f_lw_axi_master_awready,                     //                                            .awready
		input  wire [3:0]  hps_h2f_lw_axi_master_wid,                         //                                            .wid
		input  wire [31:0] hps_h2f_lw_axi_master_wdata,                       //                                            .wdata
		input  wire [3:0]  hps_h2f_lw_axi_master_wstrb,                       //                                            .wstrb
		input  wire        hps_h2f_lw_axi_master_wlast,                       //                                            .wlast
		input  wire        hps_h2f_lw_axi_master_wvalid,                      //                                            .wvalid
		output wire        hps_h2f_lw_axi_master_wready,                      //                                            .wready
		output wire [3:0]  hps_h2f_lw_axi_master_bid,                         //                                            .bid
		output wire [1:0]  hps_h2f_lw_axi_master_bresp,                       //                                            .bresp
		output wire        hps_h2f_lw_axi_master_bvalid,                      //                                            .bvalid
		input  wire        hps_h2f_lw_axi_master_bready,                      //                                            .bready
		input  wire [3:0]  hps_h2f_lw_axi_master_arid,                        //                                            .arid
		input  wire [20:0] hps_h2f_lw_axi_master_araddr,                      //                                            .araddr
		input  wire [3:0]  hps_h2f_lw_axi_master_arlen,                       //                                            .arlen
		input  wire [2:0]  hps_h2f_lw_axi_master_arsize,                      //                                            .arsize
		input  wire [1:0]  hps_h2f_lw_axi_master_arburst,                     //                                            .arburst
		input  wire [1:0]  hps_h2f_lw_axi_master_arlock,                      //                                            .arlock
		input  wire [3:0]  hps_h2f_lw_axi_master_arcache,                     //                                            .arcache
		input  wire [2:0]  hps_h2f_lw_axi_master_arprot,                      //                                            .arprot
		input  wire [4:0]  hps_h2f_lw_axi_master_aruser,                      //                                            .aruser
		input  wire        hps_h2f_lw_axi_master_arvalid,                     //                                            .arvalid
		output wire        hps_h2f_lw_axi_master_arready,                     //                                            .arready
		output wire [3:0]  hps_h2f_lw_axi_master_rid,                         //                                            .rid
		output wire [31:0] hps_h2f_lw_axi_master_rdata,                       //                                            .rdata
		output wire [1:0]  hps_h2f_lw_axi_master_rresp,                       //                                            .rresp
		output wire        hps_h2f_lw_axi_master_rlast,                       //                                            .rlast
		output wire        hps_h2f_lw_axi_master_rvalid,                      //                                            .rvalid
		input  wire        hps_h2f_lw_axi_master_rready,                      //                                            .rready
		input  wire        codec_clocks_sys_clk_clk,                          //                        codec_clocks_sys_clk.clk
		input  wire        mic_array_clocks_sck_master_clk,                   //                 mic_array_clocks_sck_master.clk
		input  wire        hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset,  //  hps_h2f_lw_axi_reset_reset_bridge_in_reset.reset
		input  wire        jtag_master_clk_reset_reset_bridge_in_reset_reset, // jtag_master_clk_reset_reset_bridge_in_reset.reset
		input  wire        mic_array_0_reset_reset_bridge_in_reset_reset,     //     mic_array_0_reset_reset_bridge_in_reset.reset
		input  wire [31:0] jtag_master_master_address,                        //                          jtag_master_master.address
		output wire        jtag_master_master_waitrequest,                    //                                            .waitrequest
		input  wire [3:0]  jtag_master_master_byteenable,                     //                                            .byteenable
		input  wire        jtag_master_master_read,                           //                                            .read
		output wire [31:0] jtag_master_master_readdata,                       //                                            .readdata
		output wire        jtag_master_master_readdatavalid,                  //                                            .readdatavalid
		input  wire        jtag_master_master_write,                          //                                            .write
		input  wire [31:0] jtag_master_master_writedata,                      //                                            .writedata
		output wire [0:0]  delay_and_sum_beamformer_0_avalon_slave_address,   //     delay_and_sum_beamformer_0_avalon_slave.address
		output wire        delay_and_sum_beamformer_0_avalon_slave_write,     //                                            .write
		output wire        delay_and_sum_beamformer_0_avalon_slave_read,      //                                            .read
		input  wire [31:0] delay_and_sum_beamformer_0_avalon_slave_readdata,  //                                            .readdata
		output wire [31:0] delay_and_sum_beamformer_0_avalon_slave_writedata, //                                            .writedata
		output wire [1:0]  mic_array_0_s1_address,                            //                              mic_array_0_s1.address
		output wire        mic_array_0_s1_write,                              //                                            .write
		output wire        mic_array_0_s1_read,                               //                                            .read
		input  wire [31:0] mic_array_0_s1_readdata,                           //                                            .readdata
		output wire [31:0] mic_array_0_s1_writedata,                          //                                            .writedata
		output wire [0:0]  sysid_qsys_0_control_slave_address,                //                  sysid_qsys_0_control_slave.address
		input  wire [31:0] sysid_qsys_0_control_slave_readdata                //                                            .readdata
	);

	wire          jtag_master_master_translator_avalon_universal_master_0_waitrequest;         // jtag_master_master_agent:av_waitrequest -> jtag_master_master_translator:uav_waitrequest
	wire   [31:0] jtag_master_master_translator_avalon_universal_master_0_readdata;            // jtag_master_master_agent:av_readdata -> jtag_master_master_translator:uav_readdata
	wire          jtag_master_master_translator_avalon_universal_master_0_debugaccess;         // jtag_master_master_translator:uav_debugaccess -> jtag_master_master_agent:av_debugaccess
	wire   [31:0] jtag_master_master_translator_avalon_universal_master_0_address;             // jtag_master_master_translator:uav_address -> jtag_master_master_agent:av_address
	wire          jtag_master_master_translator_avalon_universal_master_0_read;                // jtag_master_master_translator:uav_read -> jtag_master_master_agent:av_read
	wire    [3:0] jtag_master_master_translator_avalon_universal_master_0_byteenable;          // jtag_master_master_translator:uav_byteenable -> jtag_master_master_agent:av_byteenable
	wire          jtag_master_master_translator_avalon_universal_master_0_readdatavalid;       // jtag_master_master_agent:av_readdatavalid -> jtag_master_master_translator:uav_readdatavalid
	wire          jtag_master_master_translator_avalon_universal_master_0_lock;                // jtag_master_master_translator:uav_lock -> jtag_master_master_agent:av_lock
	wire          jtag_master_master_translator_avalon_universal_master_0_write;               // jtag_master_master_translator:uav_write -> jtag_master_master_agent:av_write
	wire   [31:0] jtag_master_master_translator_avalon_universal_master_0_writedata;           // jtag_master_master_translator:uav_writedata -> jtag_master_master_agent:av_writedata
	wire    [2:0] jtag_master_master_translator_avalon_universal_master_0_burstcount;          // jtag_master_master_translator:uav_burstcount -> jtag_master_master_agent:av_burstcount
	wire   [31:0] delay_and_sum_beamformer_0_avalon_slave_agent_m0_readdata;                   // delay_and_sum_beamformer_0_avalon_slave_translator:uav_readdata -> delay_and_sum_beamformer_0_avalon_slave_agent:m0_readdata
	wire          delay_and_sum_beamformer_0_avalon_slave_agent_m0_waitrequest;                // delay_and_sum_beamformer_0_avalon_slave_translator:uav_waitrequest -> delay_and_sum_beamformer_0_avalon_slave_agent:m0_waitrequest
	wire          delay_and_sum_beamformer_0_avalon_slave_agent_m0_debugaccess;                // delay_and_sum_beamformer_0_avalon_slave_agent:m0_debugaccess -> delay_and_sum_beamformer_0_avalon_slave_translator:uav_debugaccess
	wire   [31:0] delay_and_sum_beamformer_0_avalon_slave_agent_m0_address;                    // delay_and_sum_beamformer_0_avalon_slave_agent:m0_address -> delay_and_sum_beamformer_0_avalon_slave_translator:uav_address
	wire    [3:0] delay_and_sum_beamformer_0_avalon_slave_agent_m0_byteenable;                 // delay_and_sum_beamformer_0_avalon_slave_agent:m0_byteenable -> delay_and_sum_beamformer_0_avalon_slave_translator:uav_byteenable
	wire          delay_and_sum_beamformer_0_avalon_slave_agent_m0_read;                       // delay_and_sum_beamformer_0_avalon_slave_agent:m0_read -> delay_and_sum_beamformer_0_avalon_slave_translator:uav_read
	wire          delay_and_sum_beamformer_0_avalon_slave_agent_m0_readdatavalid;              // delay_and_sum_beamformer_0_avalon_slave_translator:uav_readdatavalid -> delay_and_sum_beamformer_0_avalon_slave_agent:m0_readdatavalid
	wire          delay_and_sum_beamformer_0_avalon_slave_agent_m0_lock;                       // delay_and_sum_beamformer_0_avalon_slave_agent:m0_lock -> delay_and_sum_beamformer_0_avalon_slave_translator:uav_lock
	wire   [31:0] delay_and_sum_beamformer_0_avalon_slave_agent_m0_writedata;                  // delay_and_sum_beamformer_0_avalon_slave_agent:m0_writedata -> delay_and_sum_beamformer_0_avalon_slave_translator:uav_writedata
	wire          delay_and_sum_beamformer_0_avalon_slave_agent_m0_write;                      // delay_and_sum_beamformer_0_avalon_slave_agent:m0_write -> delay_and_sum_beamformer_0_avalon_slave_translator:uav_write
	wire    [2:0] delay_and_sum_beamformer_0_avalon_slave_agent_m0_burstcount;                 // delay_and_sum_beamformer_0_avalon_slave_agent:m0_burstcount -> delay_and_sum_beamformer_0_avalon_slave_translator:uav_burstcount
	wire          delay_and_sum_beamformer_0_avalon_slave_agent_rf_source_valid;               // delay_and_sum_beamformer_0_avalon_slave_agent:rf_source_valid -> delay_and_sum_beamformer_0_avalon_slave_agent_rsp_fifo:in_valid
	wire  [121:0] delay_and_sum_beamformer_0_avalon_slave_agent_rf_source_data;                // delay_and_sum_beamformer_0_avalon_slave_agent:rf_source_data -> delay_and_sum_beamformer_0_avalon_slave_agent_rsp_fifo:in_data
	wire          delay_and_sum_beamformer_0_avalon_slave_agent_rf_source_ready;               // delay_and_sum_beamformer_0_avalon_slave_agent_rsp_fifo:in_ready -> delay_and_sum_beamformer_0_avalon_slave_agent:rf_source_ready
	wire          delay_and_sum_beamformer_0_avalon_slave_agent_rf_source_startofpacket;       // delay_and_sum_beamformer_0_avalon_slave_agent:rf_source_startofpacket -> delay_and_sum_beamformer_0_avalon_slave_agent_rsp_fifo:in_startofpacket
	wire          delay_and_sum_beamformer_0_avalon_slave_agent_rf_source_endofpacket;         // delay_and_sum_beamformer_0_avalon_slave_agent:rf_source_endofpacket -> delay_and_sum_beamformer_0_avalon_slave_agent_rsp_fifo:in_endofpacket
	wire          delay_and_sum_beamformer_0_avalon_slave_agent_rsp_fifo_out_valid;            // delay_and_sum_beamformer_0_avalon_slave_agent_rsp_fifo:out_valid -> delay_and_sum_beamformer_0_avalon_slave_agent:rf_sink_valid
	wire  [121:0] delay_and_sum_beamformer_0_avalon_slave_agent_rsp_fifo_out_data;             // delay_and_sum_beamformer_0_avalon_slave_agent_rsp_fifo:out_data -> delay_and_sum_beamformer_0_avalon_slave_agent:rf_sink_data
	wire          delay_and_sum_beamformer_0_avalon_slave_agent_rsp_fifo_out_ready;            // delay_and_sum_beamformer_0_avalon_slave_agent:rf_sink_ready -> delay_and_sum_beamformer_0_avalon_slave_agent_rsp_fifo:out_ready
	wire          delay_and_sum_beamformer_0_avalon_slave_agent_rsp_fifo_out_startofpacket;    // delay_and_sum_beamformer_0_avalon_slave_agent_rsp_fifo:out_startofpacket -> delay_and_sum_beamformer_0_avalon_slave_agent:rf_sink_startofpacket
	wire          delay_and_sum_beamformer_0_avalon_slave_agent_rsp_fifo_out_endofpacket;      // delay_and_sum_beamformer_0_avalon_slave_agent_rsp_fifo:out_endofpacket -> delay_and_sum_beamformer_0_avalon_slave_agent:rf_sink_endofpacket
	wire          delay_and_sum_beamformer_0_avalon_slave_agent_rdata_fifo_src_valid;          // delay_and_sum_beamformer_0_avalon_slave_agent:rdata_fifo_src_valid -> delay_and_sum_beamformer_0_avalon_slave_agent_rdata_fifo:in_valid
	wire   [33:0] delay_and_sum_beamformer_0_avalon_slave_agent_rdata_fifo_src_data;           // delay_and_sum_beamformer_0_avalon_slave_agent:rdata_fifo_src_data -> delay_and_sum_beamformer_0_avalon_slave_agent_rdata_fifo:in_data
	wire          delay_and_sum_beamformer_0_avalon_slave_agent_rdata_fifo_src_ready;          // delay_and_sum_beamformer_0_avalon_slave_agent_rdata_fifo:in_ready -> delay_and_sum_beamformer_0_avalon_slave_agent:rdata_fifo_src_ready
	wire   [31:0] sysid_qsys_0_control_slave_agent_m0_readdata;                                // sysid_qsys_0_control_slave_translator:uav_readdata -> sysid_qsys_0_control_slave_agent:m0_readdata
	wire          sysid_qsys_0_control_slave_agent_m0_waitrequest;                             // sysid_qsys_0_control_slave_translator:uav_waitrequest -> sysid_qsys_0_control_slave_agent:m0_waitrequest
	wire          sysid_qsys_0_control_slave_agent_m0_debugaccess;                             // sysid_qsys_0_control_slave_agent:m0_debugaccess -> sysid_qsys_0_control_slave_translator:uav_debugaccess
	wire   [31:0] sysid_qsys_0_control_slave_agent_m0_address;                                 // sysid_qsys_0_control_slave_agent:m0_address -> sysid_qsys_0_control_slave_translator:uav_address
	wire    [3:0] sysid_qsys_0_control_slave_agent_m0_byteenable;                              // sysid_qsys_0_control_slave_agent:m0_byteenable -> sysid_qsys_0_control_slave_translator:uav_byteenable
	wire          sysid_qsys_0_control_slave_agent_m0_read;                                    // sysid_qsys_0_control_slave_agent:m0_read -> sysid_qsys_0_control_slave_translator:uav_read
	wire          sysid_qsys_0_control_slave_agent_m0_readdatavalid;                           // sysid_qsys_0_control_slave_translator:uav_readdatavalid -> sysid_qsys_0_control_slave_agent:m0_readdatavalid
	wire          sysid_qsys_0_control_slave_agent_m0_lock;                                    // sysid_qsys_0_control_slave_agent:m0_lock -> sysid_qsys_0_control_slave_translator:uav_lock
	wire   [31:0] sysid_qsys_0_control_slave_agent_m0_writedata;                               // sysid_qsys_0_control_slave_agent:m0_writedata -> sysid_qsys_0_control_slave_translator:uav_writedata
	wire          sysid_qsys_0_control_slave_agent_m0_write;                                   // sysid_qsys_0_control_slave_agent:m0_write -> sysid_qsys_0_control_slave_translator:uav_write
	wire    [2:0] sysid_qsys_0_control_slave_agent_m0_burstcount;                              // sysid_qsys_0_control_slave_agent:m0_burstcount -> sysid_qsys_0_control_slave_translator:uav_burstcount
	wire          sysid_qsys_0_control_slave_agent_rf_source_valid;                            // sysid_qsys_0_control_slave_agent:rf_source_valid -> sysid_qsys_0_control_slave_agent_rsp_fifo:in_valid
	wire  [121:0] sysid_qsys_0_control_slave_agent_rf_source_data;                             // sysid_qsys_0_control_slave_agent:rf_source_data -> sysid_qsys_0_control_slave_agent_rsp_fifo:in_data
	wire          sysid_qsys_0_control_slave_agent_rf_source_ready;                            // sysid_qsys_0_control_slave_agent_rsp_fifo:in_ready -> sysid_qsys_0_control_slave_agent:rf_source_ready
	wire          sysid_qsys_0_control_slave_agent_rf_source_startofpacket;                    // sysid_qsys_0_control_slave_agent:rf_source_startofpacket -> sysid_qsys_0_control_slave_agent_rsp_fifo:in_startofpacket
	wire          sysid_qsys_0_control_slave_agent_rf_source_endofpacket;                      // sysid_qsys_0_control_slave_agent:rf_source_endofpacket -> sysid_qsys_0_control_slave_agent_rsp_fifo:in_endofpacket
	wire          sysid_qsys_0_control_slave_agent_rsp_fifo_out_valid;                         // sysid_qsys_0_control_slave_agent_rsp_fifo:out_valid -> sysid_qsys_0_control_slave_agent:rf_sink_valid
	wire  [121:0] sysid_qsys_0_control_slave_agent_rsp_fifo_out_data;                          // sysid_qsys_0_control_slave_agent_rsp_fifo:out_data -> sysid_qsys_0_control_slave_agent:rf_sink_data
	wire          sysid_qsys_0_control_slave_agent_rsp_fifo_out_ready;                         // sysid_qsys_0_control_slave_agent:rf_sink_ready -> sysid_qsys_0_control_slave_agent_rsp_fifo:out_ready
	wire          sysid_qsys_0_control_slave_agent_rsp_fifo_out_startofpacket;                 // sysid_qsys_0_control_slave_agent_rsp_fifo:out_startofpacket -> sysid_qsys_0_control_slave_agent:rf_sink_startofpacket
	wire          sysid_qsys_0_control_slave_agent_rsp_fifo_out_endofpacket;                   // sysid_qsys_0_control_slave_agent_rsp_fifo:out_endofpacket -> sysid_qsys_0_control_slave_agent:rf_sink_endofpacket
	wire          sysid_qsys_0_control_slave_agent_rdata_fifo_src_valid;                       // sysid_qsys_0_control_slave_agent:rdata_fifo_src_valid -> sysid_qsys_0_control_slave_agent_rdata_fifo:in_valid
	wire   [33:0] sysid_qsys_0_control_slave_agent_rdata_fifo_src_data;                        // sysid_qsys_0_control_slave_agent:rdata_fifo_src_data -> sysid_qsys_0_control_slave_agent_rdata_fifo:in_data
	wire          sysid_qsys_0_control_slave_agent_rdata_fifo_src_ready;                       // sysid_qsys_0_control_slave_agent_rdata_fifo:in_ready -> sysid_qsys_0_control_slave_agent:rdata_fifo_src_ready
	wire   [31:0] mic_array_0_s1_agent_m0_readdata;                                            // mic_array_0_s1_translator:uav_readdata -> mic_array_0_s1_agent:m0_readdata
	wire          mic_array_0_s1_agent_m0_waitrequest;                                         // mic_array_0_s1_translator:uav_waitrequest -> mic_array_0_s1_agent:m0_waitrequest
	wire          mic_array_0_s1_agent_m0_debugaccess;                                         // mic_array_0_s1_agent:m0_debugaccess -> mic_array_0_s1_translator:uav_debugaccess
	wire   [31:0] mic_array_0_s1_agent_m0_address;                                             // mic_array_0_s1_agent:m0_address -> mic_array_0_s1_translator:uav_address
	wire    [3:0] mic_array_0_s1_agent_m0_byteenable;                                          // mic_array_0_s1_agent:m0_byteenable -> mic_array_0_s1_translator:uav_byteenable
	wire          mic_array_0_s1_agent_m0_read;                                                // mic_array_0_s1_agent:m0_read -> mic_array_0_s1_translator:uav_read
	wire          mic_array_0_s1_agent_m0_readdatavalid;                                       // mic_array_0_s1_translator:uav_readdatavalid -> mic_array_0_s1_agent:m0_readdatavalid
	wire          mic_array_0_s1_agent_m0_lock;                                                // mic_array_0_s1_agent:m0_lock -> mic_array_0_s1_translator:uav_lock
	wire   [31:0] mic_array_0_s1_agent_m0_writedata;                                           // mic_array_0_s1_agent:m0_writedata -> mic_array_0_s1_translator:uav_writedata
	wire          mic_array_0_s1_agent_m0_write;                                               // mic_array_0_s1_agent:m0_write -> mic_array_0_s1_translator:uav_write
	wire    [2:0] mic_array_0_s1_agent_m0_burstcount;                                          // mic_array_0_s1_agent:m0_burstcount -> mic_array_0_s1_translator:uav_burstcount
	wire          mic_array_0_s1_agent_rf_source_valid;                                        // mic_array_0_s1_agent:rf_source_valid -> mic_array_0_s1_agent_rsp_fifo:in_valid
	wire  [121:0] mic_array_0_s1_agent_rf_source_data;                                         // mic_array_0_s1_agent:rf_source_data -> mic_array_0_s1_agent_rsp_fifo:in_data
	wire          mic_array_0_s1_agent_rf_source_ready;                                        // mic_array_0_s1_agent_rsp_fifo:in_ready -> mic_array_0_s1_agent:rf_source_ready
	wire          mic_array_0_s1_agent_rf_source_startofpacket;                                // mic_array_0_s1_agent:rf_source_startofpacket -> mic_array_0_s1_agent_rsp_fifo:in_startofpacket
	wire          mic_array_0_s1_agent_rf_source_endofpacket;                                  // mic_array_0_s1_agent:rf_source_endofpacket -> mic_array_0_s1_agent_rsp_fifo:in_endofpacket
	wire          mic_array_0_s1_agent_rsp_fifo_out_valid;                                     // mic_array_0_s1_agent_rsp_fifo:out_valid -> mic_array_0_s1_agent:rf_sink_valid
	wire  [121:0] mic_array_0_s1_agent_rsp_fifo_out_data;                                      // mic_array_0_s1_agent_rsp_fifo:out_data -> mic_array_0_s1_agent:rf_sink_data
	wire          mic_array_0_s1_agent_rsp_fifo_out_ready;                                     // mic_array_0_s1_agent:rf_sink_ready -> mic_array_0_s1_agent_rsp_fifo:out_ready
	wire          mic_array_0_s1_agent_rsp_fifo_out_startofpacket;                             // mic_array_0_s1_agent_rsp_fifo:out_startofpacket -> mic_array_0_s1_agent:rf_sink_startofpacket
	wire          mic_array_0_s1_agent_rsp_fifo_out_endofpacket;                               // mic_array_0_s1_agent_rsp_fifo:out_endofpacket -> mic_array_0_s1_agent:rf_sink_endofpacket
	wire          mic_array_0_s1_agent_rdata_fifo_src_valid;                                   // mic_array_0_s1_agent:rdata_fifo_src_valid -> mic_array_0_s1_agent_rdata_fifo:in_valid
	wire   [33:0] mic_array_0_s1_agent_rdata_fifo_src_data;                                    // mic_array_0_s1_agent:rdata_fifo_src_data -> mic_array_0_s1_agent_rdata_fifo:in_data
	wire          mic_array_0_s1_agent_rdata_fifo_src_ready;                                   // mic_array_0_s1_agent_rdata_fifo:in_ready -> mic_array_0_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_002_src_valid;                                                       // cmd_mux_002:src_valid -> mic_array_0_s1_agent:cp_valid
	wire  [120:0] cmd_mux_002_src_data;                                                        // cmd_mux_002:src_data -> mic_array_0_s1_agent:cp_data
	wire          cmd_mux_002_src_ready;                                                       // mic_array_0_s1_agent:cp_ready -> cmd_mux_002:src_ready
	wire    [2:0] cmd_mux_002_src_channel;                                                     // cmd_mux_002:src_channel -> mic_array_0_s1_agent:cp_channel
	wire          cmd_mux_002_src_startofpacket;                                               // cmd_mux_002:src_startofpacket -> mic_array_0_s1_agent:cp_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                 // cmd_mux_002:src_endofpacket -> mic_array_0_s1_agent:cp_endofpacket
	wire          hps_h2f_lw_axi_master_agent_write_cp_valid;                                  // hps_h2f_lw_axi_master_agent:write_cp_valid -> router:sink_valid
	wire  [120:0] hps_h2f_lw_axi_master_agent_write_cp_data;                                   // hps_h2f_lw_axi_master_agent:write_cp_data -> router:sink_data
	wire          hps_h2f_lw_axi_master_agent_write_cp_ready;                                  // router:sink_ready -> hps_h2f_lw_axi_master_agent:write_cp_ready
	wire          hps_h2f_lw_axi_master_agent_write_cp_startofpacket;                          // hps_h2f_lw_axi_master_agent:write_cp_startofpacket -> router:sink_startofpacket
	wire          hps_h2f_lw_axi_master_agent_write_cp_endofpacket;                            // hps_h2f_lw_axi_master_agent:write_cp_endofpacket -> router:sink_endofpacket
	wire          hps_h2f_lw_axi_master_agent_read_cp_valid;                                   // hps_h2f_lw_axi_master_agent:read_cp_valid -> router_001:sink_valid
	wire  [120:0] hps_h2f_lw_axi_master_agent_read_cp_data;                                    // hps_h2f_lw_axi_master_agent:read_cp_data -> router_001:sink_data
	wire          hps_h2f_lw_axi_master_agent_read_cp_ready;                                   // router_001:sink_ready -> hps_h2f_lw_axi_master_agent:read_cp_ready
	wire          hps_h2f_lw_axi_master_agent_read_cp_startofpacket;                           // hps_h2f_lw_axi_master_agent:read_cp_startofpacket -> router_001:sink_startofpacket
	wire          hps_h2f_lw_axi_master_agent_read_cp_endofpacket;                             // hps_h2f_lw_axi_master_agent:read_cp_endofpacket -> router_001:sink_endofpacket
	wire          jtag_master_master_agent_cp_valid;                                           // jtag_master_master_agent:cp_valid -> router_002:sink_valid
	wire  [120:0] jtag_master_master_agent_cp_data;                                            // jtag_master_master_agent:cp_data -> router_002:sink_data
	wire          jtag_master_master_agent_cp_ready;                                           // router_002:sink_ready -> jtag_master_master_agent:cp_ready
	wire          jtag_master_master_agent_cp_startofpacket;                                   // jtag_master_master_agent:cp_startofpacket -> router_002:sink_startofpacket
	wire          jtag_master_master_agent_cp_endofpacket;                                     // jtag_master_master_agent:cp_endofpacket -> router_002:sink_endofpacket
	wire          delay_and_sum_beamformer_0_avalon_slave_agent_rp_valid;                      // delay_and_sum_beamformer_0_avalon_slave_agent:rp_valid -> router_003:sink_valid
	wire  [120:0] delay_and_sum_beamformer_0_avalon_slave_agent_rp_data;                       // delay_and_sum_beamformer_0_avalon_slave_agent:rp_data -> router_003:sink_data
	wire          delay_and_sum_beamformer_0_avalon_slave_agent_rp_ready;                      // router_003:sink_ready -> delay_and_sum_beamformer_0_avalon_slave_agent:rp_ready
	wire          delay_and_sum_beamformer_0_avalon_slave_agent_rp_startofpacket;              // delay_and_sum_beamformer_0_avalon_slave_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire          delay_and_sum_beamformer_0_avalon_slave_agent_rp_endofpacket;                // delay_and_sum_beamformer_0_avalon_slave_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                                        // router_003:src_valid -> rsp_demux:sink_valid
	wire  [120:0] router_003_src_data;                                                         // router_003:src_data -> rsp_demux:sink_data
	wire          router_003_src_ready;                                                        // rsp_demux:sink_ready -> router_003:src_ready
	wire    [2:0] router_003_src_channel;                                                      // router_003:src_channel -> rsp_demux:sink_channel
	wire          router_003_src_startofpacket;                                                // router_003:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_003_src_endofpacket;                                                  // router_003:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          sysid_qsys_0_control_slave_agent_rp_valid;                                   // sysid_qsys_0_control_slave_agent:rp_valid -> router_004:sink_valid
	wire  [120:0] sysid_qsys_0_control_slave_agent_rp_data;                                    // sysid_qsys_0_control_slave_agent:rp_data -> router_004:sink_data
	wire          sysid_qsys_0_control_slave_agent_rp_ready;                                   // router_004:sink_ready -> sysid_qsys_0_control_slave_agent:rp_ready
	wire          sysid_qsys_0_control_slave_agent_rp_startofpacket;                           // sysid_qsys_0_control_slave_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          sysid_qsys_0_control_slave_agent_rp_endofpacket;                             // sysid_qsys_0_control_slave_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                        // router_004:src_valid -> rsp_demux_001:sink_valid
	wire  [120:0] router_004_src_data;                                                         // router_004:src_data -> rsp_demux_001:sink_data
	wire          router_004_src_ready;                                                        // rsp_demux_001:sink_ready -> router_004:src_ready
	wire    [2:0] router_004_src_channel;                                                      // router_004:src_channel -> rsp_demux_001:sink_channel
	wire          router_004_src_startofpacket;                                                // router_004:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_004_src_endofpacket;                                                  // router_004:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          mic_array_0_s1_agent_rp_valid;                                               // mic_array_0_s1_agent:rp_valid -> router_005:sink_valid
	wire  [120:0] mic_array_0_s1_agent_rp_data;                                                // mic_array_0_s1_agent:rp_data -> router_005:sink_data
	wire          mic_array_0_s1_agent_rp_ready;                                               // router_005:sink_ready -> mic_array_0_s1_agent:rp_ready
	wire          mic_array_0_s1_agent_rp_startofpacket;                                       // mic_array_0_s1_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          mic_array_0_s1_agent_rp_endofpacket;                                         // mic_array_0_s1_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                                        // router_005:src_valid -> rsp_demux_002:sink_valid
	wire  [120:0] router_005_src_data;                                                         // router_005:src_data -> rsp_demux_002:sink_data
	wire          router_005_src_ready;                                                        // rsp_demux_002:sink_ready -> router_005:src_ready
	wire    [2:0] router_005_src_channel;                                                      // router_005:src_channel -> rsp_demux_002:sink_channel
	wire          router_005_src_startofpacket;                                                // router_005:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_005_src_endofpacket;                                                  // router_005:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          router_src_valid;                                                            // router:src_valid -> hps_h2f_lw_axi_master_wr_limiter:cmd_sink_valid
	wire  [120:0] router_src_data;                                                             // router:src_data -> hps_h2f_lw_axi_master_wr_limiter:cmd_sink_data
	wire          router_src_ready;                                                            // hps_h2f_lw_axi_master_wr_limiter:cmd_sink_ready -> router:src_ready
	wire    [2:0] router_src_channel;                                                          // router:src_channel -> hps_h2f_lw_axi_master_wr_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                                    // router:src_startofpacket -> hps_h2f_lw_axi_master_wr_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                                      // router:src_endofpacket -> hps_h2f_lw_axi_master_wr_limiter:cmd_sink_endofpacket
	wire  [120:0] hps_h2f_lw_axi_master_wr_limiter_cmd_src_data;                               // hps_h2f_lw_axi_master_wr_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          hps_h2f_lw_axi_master_wr_limiter_cmd_src_ready;                              // cmd_demux:sink_ready -> hps_h2f_lw_axi_master_wr_limiter:cmd_src_ready
	wire    [2:0] hps_h2f_lw_axi_master_wr_limiter_cmd_src_channel;                            // hps_h2f_lw_axi_master_wr_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          hps_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket;                      // hps_h2f_lw_axi_master_wr_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          hps_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket;                        // hps_h2f_lw_axi_master_wr_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                           // rsp_mux:src_valid -> hps_h2f_lw_axi_master_wr_limiter:rsp_sink_valid
	wire  [120:0] rsp_mux_src_data;                                                            // rsp_mux:src_data -> hps_h2f_lw_axi_master_wr_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                                           // hps_h2f_lw_axi_master_wr_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire    [2:0] rsp_mux_src_channel;                                                         // rsp_mux:src_channel -> hps_h2f_lw_axi_master_wr_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                                                   // rsp_mux:src_startofpacket -> hps_h2f_lw_axi_master_wr_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                                     // rsp_mux:src_endofpacket -> hps_h2f_lw_axi_master_wr_limiter:rsp_sink_endofpacket
	wire          hps_h2f_lw_axi_master_wr_limiter_rsp_src_valid;                              // hps_h2f_lw_axi_master_wr_limiter:rsp_src_valid -> hps_h2f_lw_axi_master_agent:write_rp_valid
	wire  [120:0] hps_h2f_lw_axi_master_wr_limiter_rsp_src_data;                               // hps_h2f_lw_axi_master_wr_limiter:rsp_src_data -> hps_h2f_lw_axi_master_agent:write_rp_data
	wire          hps_h2f_lw_axi_master_wr_limiter_rsp_src_ready;                              // hps_h2f_lw_axi_master_agent:write_rp_ready -> hps_h2f_lw_axi_master_wr_limiter:rsp_src_ready
	wire    [2:0] hps_h2f_lw_axi_master_wr_limiter_rsp_src_channel;                            // hps_h2f_lw_axi_master_wr_limiter:rsp_src_channel -> hps_h2f_lw_axi_master_agent:write_rp_channel
	wire          hps_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket;                      // hps_h2f_lw_axi_master_wr_limiter:rsp_src_startofpacket -> hps_h2f_lw_axi_master_agent:write_rp_startofpacket
	wire          hps_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket;                        // hps_h2f_lw_axi_master_wr_limiter:rsp_src_endofpacket -> hps_h2f_lw_axi_master_agent:write_rp_endofpacket
	wire          router_001_src_valid;                                                        // router_001:src_valid -> hps_h2f_lw_axi_master_rd_limiter:cmd_sink_valid
	wire  [120:0] router_001_src_data;                                                         // router_001:src_data -> hps_h2f_lw_axi_master_rd_limiter:cmd_sink_data
	wire          router_001_src_ready;                                                        // hps_h2f_lw_axi_master_rd_limiter:cmd_sink_ready -> router_001:src_ready
	wire    [2:0] router_001_src_channel;                                                      // router_001:src_channel -> hps_h2f_lw_axi_master_rd_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                                                // router_001:src_startofpacket -> hps_h2f_lw_axi_master_rd_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                                                  // router_001:src_endofpacket -> hps_h2f_lw_axi_master_rd_limiter:cmd_sink_endofpacket
	wire  [120:0] hps_h2f_lw_axi_master_rd_limiter_cmd_src_data;                               // hps_h2f_lw_axi_master_rd_limiter:cmd_src_data -> cmd_demux_001:sink_data
	wire          hps_h2f_lw_axi_master_rd_limiter_cmd_src_ready;                              // cmd_demux_001:sink_ready -> hps_h2f_lw_axi_master_rd_limiter:cmd_src_ready
	wire    [2:0] hps_h2f_lw_axi_master_rd_limiter_cmd_src_channel;                            // hps_h2f_lw_axi_master_rd_limiter:cmd_src_channel -> cmd_demux_001:sink_channel
	wire          hps_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket;                      // hps_h2f_lw_axi_master_rd_limiter:cmd_src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          hps_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket;                        // hps_h2f_lw_axi_master_rd_limiter:cmd_src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                                       // rsp_mux_001:src_valid -> hps_h2f_lw_axi_master_rd_limiter:rsp_sink_valid
	wire  [120:0] rsp_mux_001_src_data;                                                        // rsp_mux_001:src_data -> hps_h2f_lw_axi_master_rd_limiter:rsp_sink_data
	wire          rsp_mux_001_src_ready;                                                       // hps_h2f_lw_axi_master_rd_limiter:rsp_sink_ready -> rsp_mux_001:src_ready
	wire    [2:0] rsp_mux_001_src_channel;                                                     // rsp_mux_001:src_channel -> hps_h2f_lw_axi_master_rd_limiter:rsp_sink_channel
	wire          rsp_mux_001_src_startofpacket;                                               // rsp_mux_001:src_startofpacket -> hps_h2f_lw_axi_master_rd_limiter:rsp_sink_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                 // rsp_mux_001:src_endofpacket -> hps_h2f_lw_axi_master_rd_limiter:rsp_sink_endofpacket
	wire          hps_h2f_lw_axi_master_rd_limiter_rsp_src_valid;                              // hps_h2f_lw_axi_master_rd_limiter:rsp_src_valid -> hps_h2f_lw_axi_master_agent:read_rp_valid
	wire  [120:0] hps_h2f_lw_axi_master_rd_limiter_rsp_src_data;                               // hps_h2f_lw_axi_master_rd_limiter:rsp_src_data -> hps_h2f_lw_axi_master_agent:read_rp_data
	wire          hps_h2f_lw_axi_master_rd_limiter_rsp_src_ready;                              // hps_h2f_lw_axi_master_agent:read_rp_ready -> hps_h2f_lw_axi_master_rd_limiter:rsp_src_ready
	wire    [2:0] hps_h2f_lw_axi_master_rd_limiter_rsp_src_channel;                            // hps_h2f_lw_axi_master_rd_limiter:rsp_src_channel -> hps_h2f_lw_axi_master_agent:read_rp_channel
	wire          hps_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket;                      // hps_h2f_lw_axi_master_rd_limiter:rsp_src_startofpacket -> hps_h2f_lw_axi_master_agent:read_rp_startofpacket
	wire          hps_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket;                        // hps_h2f_lw_axi_master_rd_limiter:rsp_src_endofpacket -> hps_h2f_lw_axi_master_agent:read_rp_endofpacket
	wire          router_002_src_valid;                                                        // router_002:src_valid -> jtag_master_master_limiter:cmd_sink_valid
	wire  [120:0] router_002_src_data;                                                         // router_002:src_data -> jtag_master_master_limiter:cmd_sink_data
	wire          router_002_src_ready;                                                        // jtag_master_master_limiter:cmd_sink_ready -> router_002:src_ready
	wire    [2:0] router_002_src_channel;                                                      // router_002:src_channel -> jtag_master_master_limiter:cmd_sink_channel
	wire          router_002_src_startofpacket;                                                // router_002:src_startofpacket -> jtag_master_master_limiter:cmd_sink_startofpacket
	wire          router_002_src_endofpacket;                                                  // router_002:src_endofpacket -> jtag_master_master_limiter:cmd_sink_endofpacket
	wire  [120:0] jtag_master_master_limiter_cmd_src_data;                                     // jtag_master_master_limiter:cmd_src_data -> cmd_demux_002:sink_data
	wire          jtag_master_master_limiter_cmd_src_ready;                                    // cmd_demux_002:sink_ready -> jtag_master_master_limiter:cmd_src_ready
	wire    [2:0] jtag_master_master_limiter_cmd_src_channel;                                  // jtag_master_master_limiter:cmd_src_channel -> cmd_demux_002:sink_channel
	wire          jtag_master_master_limiter_cmd_src_startofpacket;                            // jtag_master_master_limiter:cmd_src_startofpacket -> cmd_demux_002:sink_startofpacket
	wire          jtag_master_master_limiter_cmd_src_endofpacket;                              // jtag_master_master_limiter:cmd_src_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          rsp_mux_002_src_valid;                                                       // rsp_mux_002:src_valid -> jtag_master_master_limiter:rsp_sink_valid
	wire  [120:0] rsp_mux_002_src_data;                                                        // rsp_mux_002:src_data -> jtag_master_master_limiter:rsp_sink_data
	wire          rsp_mux_002_src_ready;                                                       // jtag_master_master_limiter:rsp_sink_ready -> rsp_mux_002:src_ready
	wire    [2:0] rsp_mux_002_src_channel;                                                     // rsp_mux_002:src_channel -> jtag_master_master_limiter:rsp_sink_channel
	wire          rsp_mux_002_src_startofpacket;                                               // rsp_mux_002:src_startofpacket -> jtag_master_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_002_src_endofpacket;                                                 // rsp_mux_002:src_endofpacket -> jtag_master_master_limiter:rsp_sink_endofpacket
	wire          jtag_master_master_limiter_rsp_src_valid;                                    // jtag_master_master_limiter:rsp_src_valid -> jtag_master_master_agent:rp_valid
	wire  [120:0] jtag_master_master_limiter_rsp_src_data;                                     // jtag_master_master_limiter:rsp_src_data -> jtag_master_master_agent:rp_data
	wire          jtag_master_master_limiter_rsp_src_ready;                                    // jtag_master_master_agent:rp_ready -> jtag_master_master_limiter:rsp_src_ready
	wire    [2:0] jtag_master_master_limiter_rsp_src_channel;                                  // jtag_master_master_limiter:rsp_src_channel -> jtag_master_master_agent:rp_channel
	wire          jtag_master_master_limiter_rsp_src_startofpacket;                            // jtag_master_master_limiter:rsp_src_startofpacket -> jtag_master_master_agent:rp_startofpacket
	wire          jtag_master_master_limiter_rsp_src_endofpacket;                              // jtag_master_master_limiter:rsp_src_endofpacket -> jtag_master_master_agent:rp_endofpacket
	wire          cmd_mux_src_valid;                                                           // cmd_mux:src_valid -> delay_and_sum_beamformer_0_avalon_slave_burst_adapter:sink0_valid
	wire  [120:0] cmd_mux_src_data;                                                            // cmd_mux:src_data -> delay_and_sum_beamformer_0_avalon_slave_burst_adapter:sink0_data
	wire          cmd_mux_src_ready;                                                           // delay_and_sum_beamformer_0_avalon_slave_burst_adapter:sink0_ready -> cmd_mux:src_ready
	wire    [2:0] cmd_mux_src_channel;                                                         // cmd_mux:src_channel -> delay_and_sum_beamformer_0_avalon_slave_burst_adapter:sink0_channel
	wire          cmd_mux_src_startofpacket;                                                   // cmd_mux:src_startofpacket -> delay_and_sum_beamformer_0_avalon_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_src_endofpacket;                                                     // cmd_mux:src_endofpacket -> delay_and_sum_beamformer_0_avalon_slave_burst_adapter:sink0_endofpacket
	wire          delay_and_sum_beamformer_0_avalon_slave_burst_adapter_source0_valid;         // delay_and_sum_beamformer_0_avalon_slave_burst_adapter:source0_valid -> delay_and_sum_beamformer_0_avalon_slave_agent:cp_valid
	wire  [120:0] delay_and_sum_beamformer_0_avalon_slave_burst_adapter_source0_data;          // delay_and_sum_beamformer_0_avalon_slave_burst_adapter:source0_data -> delay_and_sum_beamformer_0_avalon_slave_agent:cp_data
	wire          delay_and_sum_beamformer_0_avalon_slave_burst_adapter_source0_ready;         // delay_and_sum_beamformer_0_avalon_slave_agent:cp_ready -> delay_and_sum_beamformer_0_avalon_slave_burst_adapter:source0_ready
	wire    [2:0] delay_and_sum_beamformer_0_avalon_slave_burst_adapter_source0_channel;       // delay_and_sum_beamformer_0_avalon_slave_burst_adapter:source0_channel -> delay_and_sum_beamformer_0_avalon_slave_agent:cp_channel
	wire          delay_and_sum_beamformer_0_avalon_slave_burst_adapter_source0_startofpacket; // delay_and_sum_beamformer_0_avalon_slave_burst_adapter:source0_startofpacket -> delay_and_sum_beamformer_0_avalon_slave_agent:cp_startofpacket
	wire          delay_and_sum_beamformer_0_avalon_slave_burst_adapter_source0_endofpacket;   // delay_and_sum_beamformer_0_avalon_slave_burst_adapter:source0_endofpacket -> delay_and_sum_beamformer_0_avalon_slave_agent:cp_endofpacket
	wire          cmd_mux_001_src_valid;                                                       // cmd_mux_001:src_valid -> sysid_qsys_0_control_slave_burst_adapter:sink0_valid
	wire  [120:0] cmd_mux_001_src_data;                                                        // cmd_mux_001:src_data -> sysid_qsys_0_control_slave_burst_adapter:sink0_data
	wire          cmd_mux_001_src_ready;                                                       // sysid_qsys_0_control_slave_burst_adapter:sink0_ready -> cmd_mux_001:src_ready
	wire    [2:0] cmd_mux_001_src_channel;                                                     // cmd_mux_001:src_channel -> sysid_qsys_0_control_slave_burst_adapter:sink0_channel
	wire          cmd_mux_001_src_startofpacket;                                               // cmd_mux_001:src_startofpacket -> sysid_qsys_0_control_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                 // cmd_mux_001:src_endofpacket -> sysid_qsys_0_control_slave_burst_adapter:sink0_endofpacket
	wire          sysid_qsys_0_control_slave_burst_adapter_source0_valid;                      // sysid_qsys_0_control_slave_burst_adapter:source0_valid -> sysid_qsys_0_control_slave_agent:cp_valid
	wire  [120:0] sysid_qsys_0_control_slave_burst_adapter_source0_data;                       // sysid_qsys_0_control_slave_burst_adapter:source0_data -> sysid_qsys_0_control_slave_agent:cp_data
	wire          sysid_qsys_0_control_slave_burst_adapter_source0_ready;                      // sysid_qsys_0_control_slave_agent:cp_ready -> sysid_qsys_0_control_slave_burst_adapter:source0_ready
	wire    [2:0] sysid_qsys_0_control_slave_burst_adapter_source0_channel;                    // sysid_qsys_0_control_slave_burst_adapter:source0_channel -> sysid_qsys_0_control_slave_agent:cp_channel
	wire          sysid_qsys_0_control_slave_burst_adapter_source0_startofpacket;              // sysid_qsys_0_control_slave_burst_adapter:source0_startofpacket -> sysid_qsys_0_control_slave_agent:cp_startofpacket
	wire          sysid_qsys_0_control_slave_burst_adapter_source0_endofpacket;                // sysid_qsys_0_control_slave_burst_adapter:source0_endofpacket -> sysid_qsys_0_control_slave_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                                        // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [120:0] cmd_demux_src0_data;                                                         // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                        // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [2:0] cmd_demux_src0_channel;                                                      // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                                // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                  // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                        // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [120:0] cmd_demux_src1_data;                                                         // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                                        // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire    [2:0] cmd_demux_src1_channel;                                                      // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                                // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                  // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                    // cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	wire  [120:0] cmd_demux_001_src0_data;                                                     // cmd_demux_001:src0_data -> cmd_mux:sink1_data
	wire          cmd_demux_001_src0_ready;                                                    // cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	wire    [2:0] cmd_demux_001_src0_channel;                                                  // cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                            // cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                              // cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_001_src1_valid;                                                    // cmd_demux_001:src1_valid -> cmd_mux_001:sink1_valid
	wire  [120:0] cmd_demux_001_src1_data;                                                     // cmd_demux_001:src1_data -> cmd_mux_001:sink1_data
	wire          cmd_demux_001_src1_ready;                                                    // cmd_mux_001:sink1_ready -> cmd_demux_001:src1_ready
	wire    [2:0] cmd_demux_001_src1_channel;                                                  // cmd_demux_001:src1_channel -> cmd_mux_001:sink1_channel
	wire          cmd_demux_001_src1_startofpacket;                                            // cmd_demux_001:src1_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                              // cmd_demux_001:src1_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire          cmd_demux_002_src0_valid;                                                    // cmd_demux_002:src0_valid -> cmd_mux:sink2_valid
	wire  [120:0] cmd_demux_002_src0_data;                                                     // cmd_demux_002:src0_data -> cmd_mux:sink2_data
	wire          cmd_demux_002_src0_ready;                                                    // cmd_mux:sink2_ready -> cmd_demux_002:src0_ready
	wire    [2:0] cmd_demux_002_src0_channel;                                                  // cmd_demux_002:src0_channel -> cmd_mux:sink2_channel
	wire          cmd_demux_002_src0_startofpacket;                                            // cmd_demux_002:src0_startofpacket -> cmd_mux:sink2_startofpacket
	wire          cmd_demux_002_src0_endofpacket;                                              // cmd_demux_002:src0_endofpacket -> cmd_mux:sink2_endofpacket
	wire          rsp_demux_src0_valid;                                                        // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [120:0] rsp_demux_src0_data;                                                         // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                        // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [2:0] rsp_demux_src0_channel;                                                      // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                                // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                  // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                                        // rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	wire  [120:0] rsp_demux_src1_data;                                                         // rsp_demux:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_src1_ready;                                                        // rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	wire    [2:0] rsp_demux_src1_channel;                                                      // rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_src1_startofpacket;                                                // rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_src1_endofpacket;                                                  // rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_src2_valid;                                                        // rsp_demux:src2_valid -> rsp_mux_002:sink0_valid
	wire  [120:0] rsp_demux_src2_data;                                                         // rsp_demux:src2_data -> rsp_mux_002:sink0_data
	wire          rsp_demux_src2_ready;                                                        // rsp_mux_002:sink0_ready -> rsp_demux:src2_ready
	wire    [2:0] rsp_demux_src2_channel;                                                      // rsp_demux:src2_channel -> rsp_mux_002:sink0_channel
	wire          rsp_demux_src2_startofpacket;                                                // rsp_demux:src2_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire          rsp_demux_src2_endofpacket;                                                  // rsp_demux:src2_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                    // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [120:0] rsp_demux_001_src0_data;                                                     // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                                    // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire    [2:0] rsp_demux_001_src0_channel;                                                  // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                            // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                              // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_001_src1_valid;                                                    // rsp_demux_001:src1_valid -> rsp_mux_001:sink1_valid
	wire  [120:0] rsp_demux_001_src1_data;                                                     // rsp_demux_001:src1_data -> rsp_mux_001:sink1_data
	wire          rsp_demux_001_src1_ready;                                                    // rsp_mux_001:sink1_ready -> rsp_demux_001:src1_ready
	wire    [2:0] rsp_demux_001_src1_channel;                                                  // rsp_demux_001:src1_channel -> rsp_mux_001:sink1_channel
	wire          rsp_demux_001_src1_startofpacket;                                            // rsp_demux_001:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          rsp_demux_001_src1_endofpacket;                                              // rsp_demux_001:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          cmd_demux_002_src1_valid;                                                    // cmd_demux_002:src1_valid -> crosser:in_valid
	wire  [120:0] cmd_demux_002_src1_data;                                                     // cmd_demux_002:src1_data -> crosser:in_data
	wire          cmd_demux_002_src1_ready;                                                    // crosser:in_ready -> cmd_demux_002:src1_ready
	wire    [2:0] cmd_demux_002_src1_channel;                                                  // cmd_demux_002:src1_channel -> crosser:in_channel
	wire          cmd_demux_002_src1_startofpacket;                                            // cmd_demux_002:src1_startofpacket -> crosser:in_startofpacket
	wire          cmd_demux_002_src1_endofpacket;                                              // cmd_demux_002:src1_endofpacket -> crosser:in_endofpacket
	wire          crosser_out_valid;                                                           // crosser:out_valid -> cmd_mux_002:sink0_valid
	wire  [120:0] crosser_out_data;                                                            // crosser:out_data -> cmd_mux_002:sink0_data
	wire          crosser_out_ready;                                                           // cmd_mux_002:sink0_ready -> crosser:out_ready
	wire    [2:0] crosser_out_channel;                                                         // crosser:out_channel -> cmd_mux_002:sink0_channel
	wire          crosser_out_startofpacket;                                                   // crosser:out_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          crosser_out_endofpacket;                                                     // crosser:out_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          rsp_demux_002_src0_valid;                                                    // rsp_demux_002:src0_valid -> crosser_001:in_valid
	wire  [120:0] rsp_demux_002_src0_data;                                                     // rsp_demux_002:src0_data -> crosser_001:in_data
	wire          rsp_demux_002_src0_ready;                                                    // crosser_001:in_ready -> rsp_demux_002:src0_ready
	wire    [2:0] rsp_demux_002_src0_channel;                                                  // rsp_demux_002:src0_channel -> crosser_001:in_channel
	wire          rsp_demux_002_src0_startofpacket;                                            // rsp_demux_002:src0_startofpacket -> crosser_001:in_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                              // rsp_demux_002:src0_endofpacket -> crosser_001:in_endofpacket
	wire          crosser_001_out_valid;                                                       // crosser_001:out_valid -> rsp_mux_002:sink1_valid
	wire  [120:0] crosser_001_out_data;                                                        // crosser_001:out_data -> rsp_mux_002:sink1_data
	wire          crosser_001_out_ready;                                                       // rsp_mux_002:sink1_ready -> crosser_001:out_ready
	wire    [2:0] crosser_001_out_channel;                                                     // crosser_001:out_channel -> rsp_mux_002:sink1_channel
	wire          crosser_001_out_startofpacket;                                               // crosser_001:out_startofpacket -> rsp_mux_002:sink1_startofpacket
	wire          crosser_001_out_endofpacket;                                                 // crosser_001:out_endofpacket -> rsp_mux_002:sink1_endofpacket
	wire    [2:0] hps_h2f_lw_axi_master_wr_limiter_cmd_valid_data;                             // hps_h2f_lw_axi_master_wr_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire    [2:0] hps_h2f_lw_axi_master_rd_limiter_cmd_valid_data;                             // hps_h2f_lw_axi_master_rd_limiter:cmd_src_valid -> cmd_demux_001:sink_valid
	wire    [2:0] jtag_master_master_limiter_cmd_valid_data;                                   // jtag_master_master_limiter:cmd_src_valid -> cmd_demux_002:sink_valid
	wire          delay_and_sum_beamformer_0_avalon_slave_agent_rdata_fifo_out_valid;          // delay_and_sum_beamformer_0_avalon_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] delay_and_sum_beamformer_0_avalon_slave_agent_rdata_fifo_out_data;           // delay_and_sum_beamformer_0_avalon_slave_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          delay_and_sum_beamformer_0_avalon_slave_agent_rdata_fifo_out_ready;          // avalon_st_adapter:in_0_ready -> delay_and_sum_beamformer_0_avalon_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                               // avalon_st_adapter:out_0_valid -> delay_and_sum_beamformer_0_avalon_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                                                // avalon_st_adapter:out_0_data -> delay_and_sum_beamformer_0_avalon_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                               // delay_and_sum_beamformer_0_avalon_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                               // avalon_st_adapter:out_0_error -> delay_and_sum_beamformer_0_avalon_slave_agent:rdata_fifo_sink_error
	wire          sysid_qsys_0_control_slave_agent_rdata_fifo_out_valid;                       // sysid_qsys_0_control_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] sysid_qsys_0_control_slave_agent_rdata_fifo_out_data;                        // sysid_qsys_0_control_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_001:in_0_data
	wire          sysid_qsys_0_control_slave_agent_rdata_fifo_out_ready;                       // avalon_st_adapter_001:in_0_ready -> sysid_qsys_0_control_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_001_out_0_valid;                                           // avalon_st_adapter_001:out_0_valid -> sysid_qsys_0_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                            // avalon_st_adapter_001:out_0_data -> sysid_qsys_0_control_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                           // sysid_qsys_0_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                           // avalon_st_adapter_001:out_0_error -> sysid_qsys_0_control_slave_agent:rdata_fifo_sink_error
	wire          mic_array_0_s1_agent_rdata_fifo_out_valid;                                   // mic_array_0_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] mic_array_0_s1_agent_rdata_fifo_out_data;                                    // mic_array_0_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_002:in_0_data
	wire          mic_array_0_s1_agent_rdata_fifo_out_ready;                                   // avalon_st_adapter_002:in_0_ready -> mic_array_0_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_002_out_0_valid;                                           // avalon_st_adapter_002:out_0_valid -> mic_array_0_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                            // avalon_st_adapter_002:out_0_data -> mic_array_0_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                           // mic_array_0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                           // avalon_st_adapter_002:out_0_error -> mic_array_0_s1_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) jtag_master_master_translator (
		.clk                    (codec_clocks_sys_clk_clk),                                              //                       clk.clk
		.reset                  (hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),                      //                     reset.reset
		.uav_address            (jtag_master_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (jtag_master_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (jtag_master_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (jtag_master_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (jtag_master_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (jtag_master_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (jtag_master_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (jtag_master_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (jtag_master_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (jtag_master_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (jtag_master_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (jtag_master_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (jtag_master_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (jtag_master_master_byteenable),                                         //                          .byteenable
		.av_read                (jtag_master_master_read),                                               //                          .read
		.av_readdata            (jtag_master_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (jtag_master_master_readdatavalid),                                      //                          .readdatavalid
		.av_write               (jtag_master_master_write),                                              //                          .write
		.av_writedata           (jtag_master_master_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                  //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                  //               (terminated)
		.av_begintransfer       (1'b0),                                                                  //               (terminated)
		.av_chipselect          (1'b0),                                                                  //               (terminated)
		.av_lock                (1'b0),                                                                  //               (terminated)
		.av_debugaccess         (1'b0),                                                                  //               (terminated)
		.uav_clken              (),                                                                      //               (terminated)
		.av_clken               (1'b1),                                                                  //               (terminated)
		.uav_response           (2'b00),                                                                 //               (terminated)
		.av_response            (),                                                                      //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                  //               (terminated)
		.av_writeresponsevalid  ()                                                                       //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (1),
		.AV_DATA_HOLD_CYCLES            (0)
	) delay_and_sum_beamformer_0_avalon_slave_translator (
		.clk                    (codec_clocks_sys_clk_clk),                                       //                      clk.clk
		.reset                  (hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),               //                    reset.reset
		.uav_address            (delay_and_sum_beamformer_0_avalon_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (delay_and_sum_beamformer_0_avalon_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (delay_and_sum_beamformer_0_avalon_slave_agent_m0_read),          //                         .read
		.uav_write              (delay_and_sum_beamformer_0_avalon_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (delay_and_sum_beamformer_0_avalon_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (delay_and_sum_beamformer_0_avalon_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (delay_and_sum_beamformer_0_avalon_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (delay_and_sum_beamformer_0_avalon_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (delay_and_sum_beamformer_0_avalon_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (delay_and_sum_beamformer_0_avalon_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (delay_and_sum_beamformer_0_avalon_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (delay_and_sum_beamformer_0_avalon_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (delay_and_sum_beamformer_0_avalon_slave_write),                  //                         .write
		.av_read                (delay_and_sum_beamformer_0_avalon_slave_read),                   //                         .read
		.av_readdata            (delay_and_sum_beamformer_0_avalon_slave_readdata),               //                         .readdata
		.av_writedata           (delay_and_sum_beamformer_0_avalon_slave_writedata),              //                         .writedata
		.av_begintransfer       (),                                                               //              (terminated)
		.av_beginbursttransfer  (),                                                               //              (terminated)
		.av_burstcount          (),                                                               //              (terminated)
		.av_byteenable          (),                                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                                           //              (terminated)
		.av_waitrequest         (1'b0),                                                           //              (terminated)
		.av_writebyteenable     (),                                                               //              (terminated)
		.av_lock                (),                                                               //              (terminated)
		.av_chipselect          (),                                                               //              (terminated)
		.av_clken               (),                                                               //              (terminated)
		.uav_clken              (1'b0),                                                           //              (terminated)
		.av_debugaccess         (),                                                               //              (terminated)
		.av_outputenable        (),                                                               //              (terminated)
		.uav_response           (),                                                               //              (terminated)
		.av_response            (2'b00),                                                          //              (terminated)
		.uav_writeresponsevalid (),                                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sysid_qsys_0_control_slave_translator (
		.clk                    (codec_clocks_sys_clk_clk),                          //                      clk.clk
		.reset                  (hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),  //                    reset.reset
		.uav_address            (sysid_qsys_0_control_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (sysid_qsys_0_control_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (sysid_qsys_0_control_slave_agent_m0_read),          //                         .read
		.uav_write              (sysid_qsys_0_control_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (sysid_qsys_0_control_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (sysid_qsys_0_control_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (sysid_qsys_0_control_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (sysid_qsys_0_control_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (sysid_qsys_0_control_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (sysid_qsys_0_control_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (sysid_qsys_0_control_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (sysid_qsys_0_control_slave_address),                //      avalon_anti_slave_0.address
		.av_readdata            (sysid_qsys_0_control_slave_readdata),               //                         .readdata
		.av_write               (),                                                  //              (terminated)
		.av_read                (),                                                  //              (terminated)
		.av_writedata           (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_chipselect          (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) mic_array_0_s1_translator (
		.clk                    (mic_array_clocks_sck_master_clk),               //                      clk.clk
		.reset                  (mic_array_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (mic_array_0_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (mic_array_0_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (mic_array_0_s1_agent_m0_read),                  //                         .read
		.uav_write              (mic_array_0_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (mic_array_0_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (mic_array_0_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (mic_array_0_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (mic_array_0_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (mic_array_0_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (mic_array_0_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (mic_array_0_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (mic_array_0_s1_address),                        //      avalon_anti_slave_0.address
		.av_write               (mic_array_0_s1_write),                          //                         .write
		.av_read                (mic_array_0_s1_read),                           //                         .read
		.av_readdata            (mic_array_0_s1_readdata),                       //                         .readdata
		.av_writedata           (mic_array_0_s1_writedata),                      //                         .writedata
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_chipselect          (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_axi_master_ni #(
		.ID_WIDTH                  (4),
		.ADDR_WIDTH                (21),
		.RDATA_WIDTH               (32),
		.WDATA_WIDTH               (32),
		.ADDR_USER_WIDTH           (5),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (4),
		.AXI_LOCK_WIDTH            (2),
		.AXI_VERSION               ("AXI3"),
		.WRITE_ISSUING_CAPABILITY  (8),
		.READ_ISSUING_CAPABILITY   (8),
		.PKT_BEGIN_BURST           (99),
		.PKT_CACHE_H               (115),
		.PKT_CACHE_L               (112),
		.PKT_ADDR_SIDEBAND_H       (97),
		.PKT_ADDR_SIDEBAND_L       (93),
		.PKT_PROTECTION_H          (111),
		.PKT_PROTECTION_L          (109),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_RESPONSE_STATUS_L     (116),
		.PKT_RESPONSE_STATUS_H     (117),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (81),
		.PKT_BYTE_CNT_H            (80),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (104),
		.PKT_DEST_ID_L             (103),
		.PKT_THREAD_ID_H           (108),
		.PKT_THREAD_ID_L           (105),
		.PKT_QOS_L                 (100),
		.PKT_QOS_H                 (100),
		.PKT_ORI_BURST_SIZE_L      (118),
		.PKT_ORI_BURST_SIZE_H      (120),
		.PKT_DATA_SIDEBAND_H       (98),
		.PKT_DATA_SIDEBAND_L       (98),
		.ST_DATA_W                 (121),
		.ST_CHANNEL_W              (3),
		.ID                        (0)
	) hps_h2f_lw_axi_master_agent (
		.aclk                   (codec_clocks_sys_clk_clk),                               //              clk.clk
		.aresetn                (~hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),      //        clk_reset.reset_n
		.write_cp_valid         (hps_h2f_lw_axi_master_agent_write_cp_valid),             //         write_cp.valid
		.write_cp_data          (hps_h2f_lw_axi_master_agent_write_cp_data),              //                 .data
		.write_cp_startofpacket (hps_h2f_lw_axi_master_agent_write_cp_startofpacket),     //                 .startofpacket
		.write_cp_endofpacket   (hps_h2f_lw_axi_master_agent_write_cp_endofpacket),       //                 .endofpacket
		.write_cp_ready         (hps_h2f_lw_axi_master_agent_write_cp_ready),             //                 .ready
		.write_rp_valid         (hps_h2f_lw_axi_master_wr_limiter_rsp_src_valid),         //         write_rp.valid
		.write_rp_data          (hps_h2f_lw_axi_master_wr_limiter_rsp_src_data),          //                 .data
		.write_rp_channel       (hps_h2f_lw_axi_master_wr_limiter_rsp_src_channel),       //                 .channel
		.write_rp_startofpacket (hps_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket), //                 .startofpacket
		.write_rp_endofpacket   (hps_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket),   //                 .endofpacket
		.write_rp_ready         (hps_h2f_lw_axi_master_wr_limiter_rsp_src_ready),         //                 .ready
		.read_cp_valid          (hps_h2f_lw_axi_master_agent_read_cp_valid),              //          read_cp.valid
		.read_cp_data           (hps_h2f_lw_axi_master_agent_read_cp_data),               //                 .data
		.read_cp_startofpacket  (hps_h2f_lw_axi_master_agent_read_cp_startofpacket),      //                 .startofpacket
		.read_cp_endofpacket    (hps_h2f_lw_axi_master_agent_read_cp_endofpacket),        //                 .endofpacket
		.read_cp_ready          (hps_h2f_lw_axi_master_agent_read_cp_ready),              //                 .ready
		.read_rp_valid          (hps_h2f_lw_axi_master_rd_limiter_rsp_src_valid),         //          read_rp.valid
		.read_rp_data           (hps_h2f_lw_axi_master_rd_limiter_rsp_src_data),          //                 .data
		.read_rp_channel        (hps_h2f_lw_axi_master_rd_limiter_rsp_src_channel),       //                 .channel
		.read_rp_startofpacket  (hps_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket), //                 .startofpacket
		.read_rp_endofpacket    (hps_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket),   //                 .endofpacket
		.read_rp_ready          (hps_h2f_lw_axi_master_rd_limiter_rsp_src_ready),         //                 .ready
		.awid                   (hps_h2f_lw_axi_master_awid),                             // altera_axi_slave.awid
		.awaddr                 (hps_h2f_lw_axi_master_awaddr),                           //                 .awaddr
		.awlen                  (hps_h2f_lw_axi_master_awlen),                            //                 .awlen
		.awsize                 (hps_h2f_lw_axi_master_awsize),                           //                 .awsize
		.awburst                (hps_h2f_lw_axi_master_awburst),                          //                 .awburst
		.awlock                 (hps_h2f_lw_axi_master_awlock),                           //                 .awlock
		.awcache                (hps_h2f_lw_axi_master_awcache),                          //                 .awcache
		.awprot                 (hps_h2f_lw_axi_master_awprot),                           //                 .awprot
		.awuser                 (hps_h2f_lw_axi_master_awuser),                           //                 .awuser
		.awvalid                (hps_h2f_lw_axi_master_awvalid),                          //                 .awvalid
		.awready                (hps_h2f_lw_axi_master_awready),                          //                 .awready
		.wid                    (hps_h2f_lw_axi_master_wid),                              //                 .wid
		.wdata                  (hps_h2f_lw_axi_master_wdata),                            //                 .wdata
		.wstrb                  (hps_h2f_lw_axi_master_wstrb),                            //                 .wstrb
		.wlast                  (hps_h2f_lw_axi_master_wlast),                            //                 .wlast
		.wvalid                 (hps_h2f_lw_axi_master_wvalid),                           //                 .wvalid
		.wready                 (hps_h2f_lw_axi_master_wready),                           //                 .wready
		.bid                    (hps_h2f_lw_axi_master_bid),                              //                 .bid
		.bresp                  (hps_h2f_lw_axi_master_bresp),                            //                 .bresp
		.bvalid                 (hps_h2f_lw_axi_master_bvalid),                           //                 .bvalid
		.bready                 (hps_h2f_lw_axi_master_bready),                           //                 .bready
		.arid                   (hps_h2f_lw_axi_master_arid),                             //                 .arid
		.araddr                 (hps_h2f_lw_axi_master_araddr),                           //                 .araddr
		.arlen                  (hps_h2f_lw_axi_master_arlen),                            //                 .arlen
		.arsize                 (hps_h2f_lw_axi_master_arsize),                           //                 .arsize
		.arburst                (hps_h2f_lw_axi_master_arburst),                          //                 .arburst
		.arlock                 (hps_h2f_lw_axi_master_arlock),                           //                 .arlock
		.arcache                (hps_h2f_lw_axi_master_arcache),                          //                 .arcache
		.arprot                 (hps_h2f_lw_axi_master_arprot),                           //                 .arprot
		.aruser                 (hps_h2f_lw_axi_master_aruser),                           //                 .aruser
		.arvalid                (hps_h2f_lw_axi_master_arvalid),                          //                 .arvalid
		.arready                (hps_h2f_lw_axi_master_arready),                          //                 .arready
		.rid                    (hps_h2f_lw_axi_master_rid),                              //                 .rid
		.rdata                  (hps_h2f_lw_axi_master_rdata),                            //                 .rdata
		.rresp                  (hps_h2f_lw_axi_master_rresp),                            //                 .rresp
		.rlast                  (hps_h2f_lw_axi_master_rlast),                            //                 .rlast
		.rvalid                 (hps_h2f_lw_axi_master_rvalid),                           //                 .rvalid
		.rready                 (hps_h2f_lw_axi_master_rready),                           //                 .rready
		.awqos                  (4'b0000),                                                //      (terminated)
		.arqos                  (4'b0000),                                                //      (terminated)
		.awregion               (4'b0000),                                                //      (terminated)
		.arregion               (4'b0000),                                                //      (terminated)
		.wuser                  (1'b0),                                                   //      (terminated)
		.ruser                  (),                                                       //      (terminated)
		.buser                  ()                                                        //      (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (120),
		.PKT_ORI_BURST_SIZE_L      (118),
		.PKT_RESPONSE_STATUS_H     (117),
		.PKT_RESPONSE_STATUS_L     (116),
		.PKT_QOS_H                 (100),
		.PKT_QOS_L                 (100),
		.PKT_DATA_SIDEBAND_H       (98),
		.PKT_DATA_SIDEBAND_L       (98),
		.PKT_ADDR_SIDEBAND_H       (97),
		.PKT_ADDR_SIDEBAND_L       (93),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_CACHE_H               (115),
		.PKT_CACHE_L               (112),
		.PKT_THREAD_ID_H           (108),
		.PKT_THREAD_ID_L           (105),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (111),
		.PKT_PROTECTION_L          (109),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (81),
		.PKT_BYTE_CNT_H            (80),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (104),
		.PKT_DEST_ID_L             (103),
		.ST_DATA_W                 (121),
		.ST_CHANNEL_W              (3),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (127),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) jtag_master_master_agent (
		.clk                   (codec_clocks_sys_clk_clk),                                              //       clk.clk
		.reset                 (hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),                      // clk_reset.reset
		.av_address            (jtag_master_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (jtag_master_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (jtag_master_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (jtag_master_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (jtag_master_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (jtag_master_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (jtag_master_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (jtag_master_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (jtag_master_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (jtag_master_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (jtag_master_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (jtag_master_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (jtag_master_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (jtag_master_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (jtag_master_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (jtag_master_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (jtag_master_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (jtag_master_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (jtag_master_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (jtag_master_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (jtag_master_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (jtag_master_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                      // (terminated)
		.av_writeresponsevalid ()                                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (120),
		.PKT_ORI_BURST_SIZE_L      (118),
		.PKT_RESPONSE_STATUS_H     (117),
		.PKT_RESPONSE_STATUS_L     (116),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (111),
		.PKT_PROTECTION_L          (109),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (81),
		.PKT_BYTE_CNT_H            (80),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (104),
		.PKT_DEST_ID_L             (103),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (3),
		.ST_DATA_W                 (121),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) delay_and_sum_beamformer_0_avalon_slave_agent (
		.clk                     (codec_clocks_sys_clk_clk),                                                    //             clk.clk
		.reset                   (hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),                            //       clk_reset.reset
		.m0_address              (delay_and_sum_beamformer_0_avalon_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (delay_and_sum_beamformer_0_avalon_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (delay_and_sum_beamformer_0_avalon_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (delay_and_sum_beamformer_0_avalon_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (delay_and_sum_beamformer_0_avalon_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (delay_and_sum_beamformer_0_avalon_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (delay_and_sum_beamformer_0_avalon_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (delay_and_sum_beamformer_0_avalon_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (delay_and_sum_beamformer_0_avalon_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (delay_and_sum_beamformer_0_avalon_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (delay_and_sum_beamformer_0_avalon_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (delay_and_sum_beamformer_0_avalon_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (delay_and_sum_beamformer_0_avalon_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (delay_and_sum_beamformer_0_avalon_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (delay_and_sum_beamformer_0_avalon_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (delay_and_sum_beamformer_0_avalon_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (delay_and_sum_beamformer_0_avalon_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (delay_and_sum_beamformer_0_avalon_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (delay_and_sum_beamformer_0_avalon_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (delay_and_sum_beamformer_0_avalon_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (delay_and_sum_beamformer_0_avalon_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (delay_and_sum_beamformer_0_avalon_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (delay_and_sum_beamformer_0_avalon_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (delay_and_sum_beamformer_0_avalon_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (delay_and_sum_beamformer_0_avalon_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (delay_and_sum_beamformer_0_avalon_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (delay_and_sum_beamformer_0_avalon_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (delay_and_sum_beamformer_0_avalon_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (delay_and_sum_beamformer_0_avalon_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (delay_and_sum_beamformer_0_avalon_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (delay_and_sum_beamformer_0_avalon_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (delay_and_sum_beamformer_0_avalon_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                               //                .error
		.rdata_fifo_src_ready    (delay_and_sum_beamformer_0_avalon_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (delay_and_sum_beamformer_0_avalon_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (delay_and_sum_beamformer_0_avalon_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (122),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) delay_and_sum_beamformer_0_avalon_slave_agent_rsp_fifo (
		.clk               (codec_clocks_sys_clk_clk),                                                 //       clk.clk
		.reset             (hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.in_data           (delay_and_sum_beamformer_0_avalon_slave_agent_rf_source_data),             //        in.data
		.in_valid          (delay_and_sum_beamformer_0_avalon_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (delay_and_sum_beamformer_0_avalon_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (delay_and_sum_beamformer_0_avalon_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (delay_and_sum_beamformer_0_avalon_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (delay_and_sum_beamformer_0_avalon_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (delay_and_sum_beamformer_0_avalon_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (delay_and_sum_beamformer_0_avalon_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (delay_and_sum_beamformer_0_avalon_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (delay_and_sum_beamformer_0_avalon_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                    // (terminated)
		.csr_read          (1'b0),                                                                     // (terminated)
		.csr_write         (1'b0),                                                                     // (terminated)
		.csr_readdata      (),                                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                     // (terminated)
		.almost_full_data  (),                                                                         // (terminated)
		.almost_empty_data (),                                                                         // (terminated)
		.in_empty          (1'b0),                                                                     // (terminated)
		.out_empty         (),                                                                         // (terminated)
		.in_error          (1'b0),                                                                     // (terminated)
		.out_error         (),                                                                         // (terminated)
		.in_channel        (1'b0),                                                                     // (terminated)
		.out_channel       ()                                                                          // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) delay_and_sum_beamformer_0_avalon_slave_agent_rdata_fifo (
		.clk               (codec_clocks_sys_clk_clk),                                           //       clk.clk
		.reset             (hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.in_data           (delay_and_sum_beamformer_0_avalon_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (delay_and_sum_beamformer_0_avalon_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (delay_and_sum_beamformer_0_avalon_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (delay_and_sum_beamformer_0_avalon_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (delay_and_sum_beamformer_0_avalon_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (delay_and_sum_beamformer_0_avalon_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                              // (terminated)
		.csr_read          (1'b0),                                                               // (terminated)
		.csr_write         (1'b0),                                                               // (terminated)
		.csr_readdata      (),                                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                               // (terminated)
		.almost_full_data  (),                                                                   // (terminated)
		.almost_empty_data (),                                                                   // (terminated)
		.in_startofpacket  (1'b0),                                                               // (terminated)
		.in_endofpacket    (1'b0),                                                               // (terminated)
		.out_startofpacket (),                                                                   // (terminated)
		.out_endofpacket   (),                                                                   // (terminated)
		.in_empty          (1'b0),                                                               // (terminated)
		.out_empty         (),                                                                   // (terminated)
		.in_error          (1'b0),                                                               // (terminated)
		.out_error         (),                                                                   // (terminated)
		.in_channel        (1'b0),                                                               // (terminated)
		.out_channel       ()                                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (120),
		.PKT_ORI_BURST_SIZE_L      (118),
		.PKT_RESPONSE_STATUS_H     (117),
		.PKT_RESPONSE_STATUS_L     (116),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (111),
		.PKT_PROTECTION_L          (109),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (81),
		.PKT_BYTE_CNT_H            (80),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (104),
		.PKT_DEST_ID_L             (103),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (3),
		.ST_DATA_W                 (121),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sysid_qsys_0_control_slave_agent (
		.clk                     (codec_clocks_sys_clk_clk),                                       //             clk.clk
		.reset                   (hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),               //       clk_reset.reset
		.m0_address              (sysid_qsys_0_control_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (sysid_qsys_0_control_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (sysid_qsys_0_control_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (sysid_qsys_0_control_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (sysid_qsys_0_control_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (sysid_qsys_0_control_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (sysid_qsys_0_control_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (sysid_qsys_0_control_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (sysid_qsys_0_control_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (sysid_qsys_0_control_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (sysid_qsys_0_control_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (sysid_qsys_0_control_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (sysid_qsys_0_control_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (sysid_qsys_0_control_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (sysid_qsys_0_control_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (sysid_qsys_0_control_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (sysid_qsys_0_control_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (sysid_qsys_0_control_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (sysid_qsys_0_control_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (sysid_qsys_0_control_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (sysid_qsys_0_control_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (sysid_qsys_0_control_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (sysid_qsys_0_control_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (sysid_qsys_0_control_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (sysid_qsys_0_control_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (sysid_qsys_0_control_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (sysid_qsys_0_control_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (sysid_qsys_0_control_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (sysid_qsys_0_control_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (sysid_qsys_0_control_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (sysid_qsys_0_control_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (sysid_qsys_0_control_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                              //                .error
		.rdata_fifo_src_ready    (sysid_qsys_0_control_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sysid_qsys_0_control_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (sysid_qsys_0_control_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (122),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_qsys_0_control_slave_agent_rsp_fifo (
		.clk               (codec_clocks_sys_clk_clk),                                    //       clk.clk
		.reset             (hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_data           (sysid_qsys_0_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (sysid_qsys_0_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (sysid_qsys_0_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sysid_qsys_0_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sysid_qsys_0_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sysid_qsys_0_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sysid_qsys_0_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sysid_qsys_0_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sysid_qsys_0_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sysid_qsys_0_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_qsys_0_control_slave_agent_rdata_fifo (
		.clk               (codec_clocks_sys_clk_clk),                              //       clk.clk
		.reset             (hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (sysid_qsys_0_control_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (sysid_qsys_0_control_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (sysid_qsys_0_control_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (sysid_qsys_0_control_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (sysid_qsys_0_control_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (sysid_qsys_0_control_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_startofpacket  (1'b0),                                                  // (terminated)
		.in_endofpacket    (1'b0),                                                  // (terminated)
		.out_startofpacket (),                                                      // (terminated)
		.out_endofpacket   (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (120),
		.PKT_ORI_BURST_SIZE_L      (118),
		.PKT_RESPONSE_STATUS_H     (117),
		.PKT_RESPONSE_STATUS_L     (116),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (111),
		.PKT_PROTECTION_L          (109),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (81),
		.PKT_BYTE_CNT_H            (80),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (104),
		.PKT_DEST_ID_L             (103),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (3),
		.ST_DATA_W                 (121),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) mic_array_0_s1_agent (
		.clk                     (mic_array_clocks_sck_master_clk),                 //             clk.clk
		.reset                   (mic_array_0_reset_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (mic_array_0_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (mic_array_0_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (mic_array_0_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (mic_array_0_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (mic_array_0_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (mic_array_0_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (mic_array_0_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (mic_array_0_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (mic_array_0_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (mic_array_0_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (mic_array_0_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (mic_array_0_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (mic_array_0_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (mic_array_0_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (mic_array_0_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (mic_array_0_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                           //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                           //                .valid
		.cp_data                 (cmd_mux_002_src_data),                            //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                     //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                         //                .channel
		.rf_sink_ready           (mic_array_0_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (mic_array_0_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (mic_array_0_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (mic_array_0_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (mic_array_0_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (mic_array_0_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (mic_array_0_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (mic_array_0_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (mic_array_0_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (mic_array_0_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),               //                .error
		.rdata_fifo_src_ready    (mic_array_0_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mic_array_0_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (mic_array_0_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (122),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mic_array_0_s1_agent_rsp_fifo (
		.clk               (mic_array_clocks_sck_master_clk),                 //       clk.clk
		.reset             (mic_array_0_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (mic_array_0_s1_agent_rf_source_data),             //        in.data
		.in_valid          (mic_array_0_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (mic_array_0_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (mic_array_0_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (mic_array_0_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (mic_array_0_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (mic_array_0_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (mic_array_0_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (mic_array_0_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (mic_array_0_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mic_array_0_s1_agent_rdata_fifo (
		.clk               (mic_array_clocks_sck_master_clk),               //       clk.clk
		.reset             (mic_array_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (mic_array_0_s1_agent_rdata_fifo_src_data),      //        in.data
		.in_valid          (mic_array_0_s1_agent_rdata_fifo_src_valid),     //          .valid
		.in_ready          (mic_array_0_s1_agent_rdata_fifo_src_ready),     //          .ready
		.out_data          (mic_array_0_s1_agent_rdata_fifo_out_data),      //       out.data
		.out_valid         (mic_array_0_s1_agent_rdata_fifo_out_valid),     //          .valid
		.out_ready         (mic_array_0_s1_agent_rdata_fifo_out_ready),     //          .ready
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_startofpacket  (1'b0),                                          // (terminated)
		.in_endofpacket    (1'b0),                                          // (terminated)
		.out_startofpacket (),                                              // (terminated)
		.out_endofpacket   (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	soc_system_altera_merlin_router_180_sdknauq router (
		.sink_ready         (hps_h2f_lw_axi_master_agent_write_cp_ready),         //      sink.ready
		.sink_valid         (hps_h2f_lw_axi_master_agent_write_cp_valid),         //          .valid
		.sink_data          (hps_h2f_lw_axi_master_agent_write_cp_data),          //          .data
		.sink_startofpacket (hps_h2f_lw_axi_master_agent_write_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (hps_h2f_lw_axi_master_agent_write_cp_endofpacket),   //          .endofpacket
		.clk                (codec_clocks_sys_clk_clk),                           //       clk.clk
		.reset              (hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.src_ready          (router_src_ready),                                   //       src.ready
		.src_valid          (router_src_valid),                                   //          .valid
		.src_data           (router_src_data),                                    //          .data
		.src_channel        (router_src_channel),                                 //          .channel
		.src_startofpacket  (router_src_startofpacket),                           //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                              //          .endofpacket
	);

	soc_system_altera_merlin_router_180_sdknauq router_001 (
		.sink_ready         (hps_h2f_lw_axi_master_agent_read_cp_ready),         //      sink.ready
		.sink_valid         (hps_h2f_lw_axi_master_agent_read_cp_valid),         //          .valid
		.sink_data          (hps_h2f_lw_axi_master_agent_read_cp_data),          //          .data
		.sink_startofpacket (hps_h2f_lw_axi_master_agent_read_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (hps_h2f_lw_axi_master_agent_read_cp_endofpacket),   //          .endofpacket
		.clk                (codec_clocks_sys_clk_clk),                          //       clk.clk
		.reset              (hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_001_src_ready),                              //       src.ready
		.src_valid          (router_001_src_valid),                              //          .valid
		.src_data           (router_001_src_data),                               //          .data
		.src_channel        (router_001_src_channel),                            //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                         //          .endofpacket
	);

	soc_system_altera_merlin_router_180_dosbmwq router_002 (
		.sink_ready         (jtag_master_master_agent_cp_ready),                //      sink.ready
		.sink_valid         (jtag_master_master_agent_cp_valid),                //          .valid
		.sink_data          (jtag_master_master_agent_cp_data),                 //          .data
		.sink_startofpacket (jtag_master_master_agent_cp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (jtag_master_master_agent_cp_endofpacket),          //          .endofpacket
		.clk                (codec_clocks_sys_clk_clk),                         //       clk.clk
		.reset              (hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                             //       src.ready
		.src_valid          (router_002_src_valid),                             //          .valid
		.src_data           (router_002_src_data),                              //          .data
		.src_channel        (router_002_src_channel),                           //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                        //          .endofpacket
	);

	soc_system_altera_merlin_router_180_66khv3i router_003 (
		.sink_ready         (delay_and_sum_beamformer_0_avalon_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (delay_and_sum_beamformer_0_avalon_slave_agent_rp_valid),         //          .valid
		.sink_data          (delay_and_sum_beamformer_0_avalon_slave_agent_rp_data),          //          .data
		.sink_startofpacket (delay_and_sum_beamformer_0_avalon_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (delay_and_sum_beamformer_0_avalon_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (codec_clocks_sys_clk_clk),                                       //       clk.clk
		.reset              (hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.src_ready          (router_003_src_ready),                                           //       src.ready
		.src_valid          (router_003_src_valid),                                           //          .valid
		.src_data           (router_003_src_data),                                            //          .data
		.src_channel        (router_003_src_channel),                                         //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                                      //          .endofpacket
	);

	soc_system_altera_merlin_router_180_rzfz5ua router_004 (
		.sink_ready         (sysid_qsys_0_control_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (sysid_qsys_0_control_slave_agent_rp_valid),         //          .valid
		.sink_data          (sysid_qsys_0_control_slave_agent_rp_data),          //          .data
		.sink_startofpacket (sysid_qsys_0_control_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sysid_qsys_0_control_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (codec_clocks_sys_clk_clk),                          //       clk.clk
		.reset              (hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_004_src_ready),                              //       src.ready
		.src_valid          (router_004_src_valid),                              //          .valid
		.src_data           (router_004_src_data),                               //          .data
		.src_channel        (router_004_src_channel),                            //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                         //          .endofpacket
	);

	soc_system_altera_merlin_router_180_3b75gia router_005 (
		.sink_ready         (mic_array_0_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (mic_array_0_s1_agent_rp_valid),                 //          .valid
		.sink_data          (mic_array_0_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (mic_array_0_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (mic_array_0_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (mic_array_clocks_sck_master_clk),               //       clk.clk
		.reset              (mic_array_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                          //       src.ready
		.src_valid          (router_005_src_valid),                          //          .valid
		.src_data           (router_005_src_data),                           //          .data
		.src_channel        (router_005_src_channel),                        //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                     //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (104),
		.PKT_DEST_ID_L             (103),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (101),
		.PKT_BYTE_CNT_H            (80),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (121),
		.ST_CHANNEL_W              (3),
		.VALID_WIDTH               (3),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) hps_h2f_lw_axi_master_wr_limiter (
		.clk                    (codec_clocks_sys_clk_clk),                               //       clk.clk
		.reset                  (hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                       //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                       //          .valid
		.cmd_sink_data          (router_src_data),                                        //          .data
		.cmd_sink_channel       (router_src_channel),                                     //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                               //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                 //          .endofpacket
		.cmd_src_ready          (hps_h2f_lw_axi_master_wr_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (hps_h2f_lw_axi_master_wr_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (hps_h2f_lw_axi_master_wr_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (hps_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (hps_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                      //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                      //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                    //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                       //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                              //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                                //          .endofpacket
		.rsp_src_ready          (hps_h2f_lw_axi_master_wr_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (hps_h2f_lw_axi_master_wr_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (hps_h2f_lw_axi_master_wr_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (hps_h2f_lw_axi_master_wr_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (hps_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (hps_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (hps_h2f_lw_axi_master_wr_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (104),
		.PKT_DEST_ID_L             (103),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (101),
		.PKT_BYTE_CNT_H            (80),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (121),
		.ST_CHANNEL_W              (3),
		.VALID_WIDTH               (3),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) hps_h2f_lw_axi_master_rd_limiter (
		.clk                    (codec_clocks_sys_clk_clk),                               //       clk.clk
		.reset                  (hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                                   //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                                   //          .valid
		.cmd_sink_data          (router_001_src_data),                                    //          .data
		.cmd_sink_channel       (router_001_src_channel),                                 //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                           //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                             //          .endofpacket
		.cmd_src_ready          (hps_h2f_lw_axi_master_rd_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (hps_h2f_lw_axi_master_rd_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (hps_h2f_lw_axi_master_rd_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (hps_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (hps_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_001_src_ready),                                  //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_001_src_valid),                                  //          .valid
		.rsp_sink_channel       (rsp_mux_001_src_channel),                                //          .channel
		.rsp_sink_data          (rsp_mux_001_src_data),                                   //          .data
		.rsp_sink_startofpacket (rsp_mux_001_src_startofpacket),                          //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_001_src_endofpacket),                            //          .endofpacket
		.rsp_src_ready          (hps_h2f_lw_axi_master_rd_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (hps_h2f_lw_axi_master_rd_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (hps_h2f_lw_axi_master_rd_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (hps_h2f_lw_axi_master_rd_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (hps_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (hps_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (hps_h2f_lw_axi_master_rd_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (104),
		.PKT_DEST_ID_L             (103),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (101),
		.PKT_BYTE_CNT_H            (80),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (5),
		.PIPELINED                 (0),
		.ST_DATA_W                 (121),
		.ST_CHANNEL_W              (3),
		.VALID_WIDTH               (3),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) jtag_master_master_limiter (
		.clk                    (codec_clocks_sys_clk_clk),                         //       clk.clk
		.reset                  (hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_002_src_ready),                             //  cmd_sink.ready
		.cmd_sink_valid         (router_002_src_valid),                             //          .valid
		.cmd_sink_data          (router_002_src_data),                              //          .data
		.cmd_sink_channel       (router_002_src_channel),                           //          .channel
		.cmd_sink_startofpacket (router_002_src_startofpacket),                     //          .startofpacket
		.cmd_sink_endofpacket   (router_002_src_endofpacket),                       //          .endofpacket
		.cmd_src_ready          (jtag_master_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (jtag_master_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (jtag_master_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (jtag_master_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (jtag_master_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_002_src_ready),                            //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_002_src_valid),                            //          .valid
		.rsp_sink_channel       (rsp_mux_002_src_channel),                          //          .channel
		.rsp_sink_data          (rsp_mux_002_src_data),                             //          .data
		.rsp_sink_startofpacket (rsp_mux_002_src_startofpacket),                    //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_002_src_endofpacket),                      //          .endofpacket
		.rsp_src_ready          (jtag_master_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (jtag_master_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (jtag_master_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (jtag_master_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (jtag_master_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (jtag_master_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (jtag_master_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (80),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (81),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (121),
		.ST_CHANNEL_W              (3),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) delay_and_sum_beamformer_0_avalon_slave_burst_adapter (
		.clk                   (codec_clocks_sys_clk_clk),                                                    //       cr0.clk
		.reset                 (hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),                            // cr0_reset.reset
		.sink0_valid           (cmd_mux_src_valid),                                                           //     sink0.valid
		.sink0_data            (cmd_mux_src_data),                                                            //          .data
		.sink0_channel         (cmd_mux_src_channel),                                                         //          .channel
		.sink0_startofpacket   (cmd_mux_src_startofpacket),                                                   //          .startofpacket
		.sink0_endofpacket     (cmd_mux_src_endofpacket),                                                     //          .endofpacket
		.sink0_ready           (cmd_mux_src_ready),                                                           //          .ready
		.source0_valid         (delay_and_sum_beamformer_0_avalon_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (delay_and_sum_beamformer_0_avalon_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (delay_and_sum_beamformer_0_avalon_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (delay_and_sum_beamformer_0_avalon_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (delay_and_sum_beamformer_0_avalon_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (delay_and_sum_beamformer_0_avalon_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (80),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (81),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (121),
		.ST_CHANNEL_W              (3),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) sysid_qsys_0_control_slave_burst_adapter (
		.clk                   (codec_clocks_sys_clk_clk),                                       //       cr0.clk
		.reset                 (hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),               // cr0_reset.reset
		.sink0_valid           (cmd_mux_001_src_valid),                                          //     sink0.valid
		.sink0_data            (cmd_mux_001_src_data),                                           //          .data
		.sink0_channel         (cmd_mux_001_src_channel),                                        //          .channel
		.sink0_startofpacket   (cmd_mux_001_src_startofpacket),                                  //          .startofpacket
		.sink0_endofpacket     (cmd_mux_001_src_endofpacket),                                    //          .endofpacket
		.sink0_ready           (cmd_mux_001_src_ready),                                          //          .ready
		.source0_valid         (sysid_qsys_0_control_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sysid_qsys_0_control_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (sysid_qsys_0_control_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sysid_qsys_0_control_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sysid_qsys_0_control_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sysid_qsys_0_control_slave_burst_adapter_source0_ready)          //          .ready
	);

	soc_system_altera_merlin_demultiplexer_180_73ypsli cmd_demux (
		.clk                (codec_clocks_sys_clk_clk),                               //        clk.clk
		.reset              (hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),       //  clk_reset.reset
		.sink_ready         (hps_h2f_lw_axi_master_wr_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (hps_h2f_lw_axi_master_wr_limiter_cmd_src_channel),       //           .channel
		.sink_data          (hps_h2f_lw_axi_master_wr_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (hps_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (hps_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (hps_h2f_lw_axi_master_wr_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                                   //       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                   //           .valid
		.src0_data          (cmd_demux_src0_data),                                    //           .data
		.src0_channel       (cmd_demux_src0_channel),                                 //           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                           //           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                             //           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                                   //       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                                   //           .valid
		.src1_data          (cmd_demux_src1_data),                                    //           .data
		.src1_channel       (cmd_demux_src1_channel),                                 //           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                           //           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket)                              //           .endofpacket
	);

	soc_system_altera_merlin_demultiplexer_180_73ypsli cmd_demux_001 (
		.clk                (codec_clocks_sys_clk_clk),                               //        clk.clk
		.reset              (hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),       //  clk_reset.reset
		.sink_ready         (hps_h2f_lw_axi_master_rd_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (hps_h2f_lw_axi_master_rd_limiter_cmd_src_channel),       //           .channel
		.sink_data          (hps_h2f_lw_axi_master_rd_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (hps_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (hps_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (hps_h2f_lw_axi_master_rd_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_001_src0_ready),                               //       src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                               //           .valid
		.src0_data          (cmd_demux_001_src0_data),                                //           .data
		.src0_channel       (cmd_demux_001_src0_channel),                             //           .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                       //           .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                         //           .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                               //       src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                               //           .valid
		.src1_data          (cmd_demux_001_src1_data),                                //           .data
		.src1_channel       (cmd_demux_001_src1_channel),                             //           .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),                       //           .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket)                          //           .endofpacket
	);

	soc_system_altera_merlin_demultiplexer_180_73ypsli cmd_demux_002 (
		.clk                (codec_clocks_sys_clk_clk),                         //        clk.clk
		.reset              (hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (jtag_master_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (jtag_master_master_limiter_cmd_src_channel),       //           .channel
		.sink_data          (jtag_master_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (jtag_master_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (jtag_master_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (jtag_master_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_002_src0_ready),                         //       src0.ready
		.src0_valid         (cmd_demux_002_src0_valid),                         //           .valid
		.src0_data          (cmd_demux_002_src0_data),                          //           .data
		.src0_channel       (cmd_demux_002_src0_channel),                       //           .channel
		.src0_startofpacket (cmd_demux_002_src0_startofpacket),                 //           .startofpacket
		.src0_endofpacket   (cmd_demux_002_src0_endofpacket),                   //           .endofpacket
		.src1_ready         (cmd_demux_002_src1_ready),                         //       src1.ready
		.src1_valid         (cmd_demux_002_src1_valid),                         //           .valid
		.src1_data          (cmd_demux_002_src1_data),                          //           .data
		.src1_channel       (cmd_demux_002_src1_channel),                       //           .channel
		.src1_startofpacket (cmd_demux_002_src1_startofpacket),                 //           .startofpacket
		.src1_endofpacket   (cmd_demux_002_src1_endofpacket)                    //           .endofpacket
	);

	soc_system_altera_merlin_multiplexer_180_5oflh4a cmd_mux (
		.clk                 (codec_clocks_sys_clk_clk),                         //       clk.clk
		.reset               (hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                //       src.ready
		.src_valid           (cmd_mux_src_valid),                                //          .valid
		.src_data            (cmd_mux_src_data),                                 //          .data
		.src_channel         (cmd_mux_src_channel),                              //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                           //          .channel
		.sink0_data          (cmd_demux_src0_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),                       //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                         //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                         //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                       //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                          //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),                 //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket),                   //          .endofpacket
		.sink2_ready         (cmd_demux_002_src0_ready),                         //     sink2.ready
		.sink2_valid         (cmd_demux_002_src0_valid),                         //          .valid
		.sink2_channel       (cmd_demux_002_src0_channel),                       //          .channel
		.sink2_data          (cmd_demux_002_src0_data),                          //          .data
		.sink2_startofpacket (cmd_demux_002_src0_startofpacket),                 //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src0_endofpacket)                    //          .endofpacket
	);

	soc_system_altera_merlin_multiplexer_180_lwrrlqi cmd_mux_001 (
		.clk                 (codec_clocks_sys_clk_clk),                         //       clk.clk
		.reset               (hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                            //          .valid
		.src_data            (cmd_mux_001_src_data),                             //          .data
		.src_channel         (cmd_mux_001_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                           //          .channel
		.sink0_data          (cmd_demux_src1_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket),                       //          .endofpacket
		.sink1_ready         (cmd_demux_001_src1_ready),                         //     sink1.ready
		.sink1_valid         (cmd_demux_001_src1_valid),                         //          .valid
		.sink1_channel       (cmd_demux_001_src1_channel),                       //          .channel
		.sink1_data          (cmd_demux_001_src1_data),                          //          .data
		.sink1_startofpacket (cmd_demux_001_src1_startofpacket),                 //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src1_endofpacket)                    //          .endofpacket
	);

	soc_system_altera_merlin_multiplexer_180_xmjw7fa cmd_mux_002 (
		.clk                 (mic_array_clocks_sck_master_clk),               //       clk.clk
		.reset               (mic_array_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                         //          .valid
		.src_data            (cmd_mux_002_src_data),                          //          .data
		.src_channel         (cmd_mux_002_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (crosser_out_ready),                             //     sink0.ready
		.sink0_valid         (crosser_out_valid),                             //          .valid
		.sink0_channel       (crosser_out_channel),                           //          .channel
		.sink0_data          (crosser_out_data),                              //          .data
		.sink0_startofpacket (crosser_out_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket)                        //          .endofpacket
	);

	soc_system_altera_merlin_demultiplexer_180_hpkcg3i rsp_demux (
		.clk                (codec_clocks_sys_clk_clk),                         //       clk.clk
		.reset              (hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                             //      sink.ready
		.sink_channel       (router_003_src_channel),                           //          .channel
		.sink_data          (router_003_src_data),                              //          .data
		.sink_startofpacket (router_003_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_003_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_src0_ready),                             //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                             //          .valid
		.src0_data          (rsp_demux_src0_data),                              //          .data
		.src0_channel       (rsp_demux_src0_channel),                           //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                       //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                             //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                             //          .valid
		.src1_data          (rsp_demux_src1_data),                              //          .data
		.src1_channel       (rsp_demux_src1_channel),                           //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                     //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket),                       //          .endofpacket
		.src2_ready         (rsp_demux_src2_ready),                             //      src2.ready
		.src2_valid         (rsp_demux_src2_valid),                             //          .valid
		.src2_data          (rsp_demux_src2_data),                              //          .data
		.src2_channel       (rsp_demux_src2_channel),                           //          .channel
		.src2_startofpacket (rsp_demux_src2_startofpacket),                     //          .startofpacket
		.src2_endofpacket   (rsp_demux_src2_endofpacket)                        //          .endofpacket
	);

	soc_system_altera_merlin_demultiplexer_180_46bgb3i rsp_demux_001 (
		.clk                (codec_clocks_sys_clk_clk),                         //       clk.clk
		.reset              (hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                             //      sink.ready
		.sink_channel       (router_004_src_channel),                           //          .channel
		.sink_data          (router_004_src_data),                              //          .data
		.sink_startofpacket (router_004_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_004_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_001_src0_data),                          //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),                   //          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                         //      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                         //          .valid
		.src1_data          (rsp_demux_001_src1_data),                          //          .data
		.src1_channel       (rsp_demux_001_src1_channel),                       //          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),                 //          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket)                    //          .endofpacket
	);

	soc_system_altera_merlin_demultiplexer_180_ru7q4la rsp_demux_002 (
		.clk                (mic_array_clocks_sck_master_clk),               //       clk.clk
		.reset              (mic_array_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                          //      sink.ready
		.sink_channel       (router_005_src_channel),                        //          .channel
		.sink_data          (router_005_src_data),                           //          .data
		.sink_startofpacket (router_005_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_005_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_002_src0_data),                       //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)                 //          .endofpacket
	);

	soc_system_altera_merlin_multiplexer_180_mliztty rsp_mux (
		.clk                 (codec_clocks_sys_clk_clk),                         //       clk.clk
		.reset               (hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                //       src.ready
		.src_valid           (rsp_mux_src_valid),                                //          .valid
		.src_data            (rsp_mux_src_data),                                 //          .data
		.src_channel         (rsp_mux_src_channel),                              //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                             //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                             //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                           //          .channel
		.sink0_data          (rsp_demux_src0_data),                              //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),                       //          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                         //     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                         //          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),                       //          .channel
		.sink1_data          (rsp_demux_001_src0_data),                          //          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),                 //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket)                    //          .endofpacket
	);

	soc_system_altera_merlin_multiplexer_180_mliztty rsp_mux_001 (
		.clk                 (codec_clocks_sys_clk_clk),                         //       clk.clk
		.reset               (hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                            //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                            //          .valid
		.src_data            (rsp_mux_001_src_data),                             //          .data
		.src_channel         (rsp_mux_001_src_channel),                          //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (rsp_demux_src1_ready),                             //     sink0.ready
		.sink0_valid         (rsp_demux_src1_valid),                             //          .valid
		.sink0_channel       (rsp_demux_src1_channel),                           //          .channel
		.sink0_data          (rsp_demux_src1_data),                              //          .data
		.sink0_startofpacket (rsp_demux_src1_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src1_endofpacket),                       //          .endofpacket
		.sink1_ready         (rsp_demux_001_src1_ready),                         //     sink1.ready
		.sink1_valid         (rsp_demux_001_src1_valid),                         //          .valid
		.sink1_channel       (rsp_demux_001_src1_channel),                       //          .channel
		.sink1_data          (rsp_demux_001_src1_data),                          //          .data
		.sink1_startofpacket (rsp_demux_001_src1_startofpacket),                 //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src1_endofpacket)                    //          .endofpacket
	);

	soc_system_altera_merlin_multiplexer_180_mliztty rsp_mux_002 (
		.clk                 (codec_clocks_sys_clk_clk),                         //       clk.clk
		.reset               (hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_002_src_ready),                            //       src.ready
		.src_valid           (rsp_mux_002_src_valid),                            //          .valid
		.src_data            (rsp_mux_002_src_data),                             //          .data
		.src_channel         (rsp_mux_002_src_channel),                          //          .channel
		.src_startofpacket   (rsp_mux_002_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (rsp_mux_002_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (rsp_demux_src2_ready),                             //     sink0.ready
		.sink0_valid         (rsp_demux_src2_valid),                             //          .valid
		.sink0_channel       (rsp_demux_src2_channel),                           //          .channel
		.sink0_data          (rsp_demux_src2_data),                              //          .data
		.sink0_startofpacket (rsp_demux_src2_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src2_endofpacket),                       //          .endofpacket
		.sink1_ready         (crosser_001_out_ready),                            //     sink1.ready
		.sink1_valid         (crosser_001_out_valid),                            //          .valid
		.sink1_channel       (crosser_001_out_channel),                          //          .channel
		.sink1_data          (crosser_001_out_data),                             //          .data
		.sink1_startofpacket (crosser_001_out_startofpacket),                    //          .startofpacket
		.sink1_endofpacket   (crosser_001_out_endofpacket)                       //          .endofpacket
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (121),
		.BITS_PER_SYMBOL     (121),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (3),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser (
		.in_clk            (codec_clocks_sys_clk_clk),                         //        in_clk.clk
		.in_reset          (hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (mic_array_clocks_sck_master_clk),                  //       out_clk.clk
		.out_reset         (mic_array_0_reset_reset_bridge_in_reset_reset),    // out_clk_reset.reset
		.in_ready          (cmd_demux_002_src1_ready),                         //            in.ready
		.in_valid          (cmd_demux_002_src1_valid),                         //              .valid
		.in_startofpacket  (cmd_demux_002_src1_startofpacket),                 //              .startofpacket
		.in_endofpacket    (cmd_demux_002_src1_endofpacket),                   //              .endofpacket
		.in_channel        (cmd_demux_002_src1_channel),                       //              .channel
		.in_data           (cmd_demux_002_src1_data),                          //              .data
		.out_ready         (crosser_out_ready),                                //           out.ready
		.out_valid         (crosser_out_valid),                                //              .valid
		.out_startofpacket (crosser_out_startofpacket),                        //              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                          //              .endofpacket
		.out_channel       (crosser_out_channel),                              //              .channel
		.out_data          (crosser_out_data),                                 //              .data
		.in_empty          (1'b0),                                             //   (terminated)
		.in_error          (1'b0),                                             //   (terminated)
		.out_empty         (),                                                 //   (terminated)
		.out_error         ()                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (121),
		.BITS_PER_SYMBOL     (121),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (3),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_001 (
		.in_clk            (mic_array_clocks_sck_master_clk),                  //        in_clk.clk
		.in_reset          (mic_array_0_reset_reset_bridge_in_reset_reset),    //  in_clk_reset.reset
		.out_clk           (codec_clocks_sys_clk_clk),                         //       out_clk.clk
		.out_reset         (hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_002_src0_ready),                         //            in.ready
		.in_valid          (rsp_demux_002_src0_valid),                         //              .valid
		.in_startofpacket  (rsp_demux_002_src0_startofpacket),                 //              .startofpacket
		.in_endofpacket    (rsp_demux_002_src0_endofpacket),                   //              .endofpacket
		.in_channel        (rsp_demux_002_src0_channel),                       //              .channel
		.in_data           (rsp_demux_002_src0_data),                          //              .data
		.out_ready         (crosser_001_out_ready),                            //           out.ready
		.out_valid         (crosser_001_out_valid),                            //              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                    //              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                      //              .endofpacket
		.out_channel       (crosser_001_out_channel),                          //              .channel
		.out_data          (crosser_001_out_data),                             //              .data
		.in_empty          (1'b0),                                             //   (terminated)
		.in_error          (1'b0),                                             //   (terminated)
		.out_empty         (),                                                 //   (terminated)
		.out_error         ()                                                  //   (terminated)
	);

	soc_system_altera_avalon_st_adapter_180_7g3x3ri #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (codec_clocks_sys_clk_clk),                                           // in_clk_0.clk
		.in_rst_0_reset (hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),                   // in_rst_0.reset
		.in_0_data      (delay_and_sum_beamformer_0_avalon_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (delay_and_sum_beamformer_0_avalon_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (delay_and_sum_beamformer_0_avalon_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                                       //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                                      //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                                      //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                                       //         .error
	);

	soc_system_altera_avalon_st_adapter_180_7g3x3ri #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (codec_clocks_sys_clk_clk),                              // in_clk_0.clk
		.in_rst_0_reset (hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),      // in_rst_0.reset
		.in_0_data      (sysid_qsys_0_control_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (sysid_qsys_0_control_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (sysid_qsys_0_control_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                     //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                     //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                      //         .error
	);

	soc_system_altera_avalon_st_adapter_180_7g3x3ri #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (mic_array_clocks_sck_master_clk),               // in_clk_0.clk
		.in_rst_0_reset (mic_array_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (mic_array_0_s1_agent_rdata_fifo_out_data),      //     in_0.data
		.in_0_valid     (mic_array_0_s1_agent_rdata_fifo_out_valid),     //         .valid
		.in_0_ready     (mic_array_0_s1_agent_rdata_fifo_out_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)              //         .error
	);

endmodule
