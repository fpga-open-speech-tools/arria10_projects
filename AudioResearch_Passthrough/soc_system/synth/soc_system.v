// soc_system.v

// Generated using ACDS version 18.0 614

`timescale 1 ps / 1 ps
module soc_system (
		input  wire        ad1939_abclk_clk,                     //                 ad1939_abclk.clk
		input  wire        ad1939_alrclk_clk,                    //                ad1939_alrclk.clk
		input  wire        ad1939_mclk_clk,                      //                  ad1939_mclk.clk
		input  wire        ad1939_physical_ad1939_adc_asdata1,   //              ad1939_physical.ad1939_adc_asdata1
		input  wire        ad1939_physical_ad1939_adc_asdata2,   //                             .ad1939_adc_asdata2
		output wire        ad1939_physical_ad1939_dac_dbclk,     //                             .ad1939_dac_dbclk
		output wire        ad1939_physical_ad1939_dac_dlrclk,    //                             .ad1939_dac_dlrclk
		output wire        ad1939_physical_ad1939_dac_dsdata1,   //                             .ad1939_dac_dsdata1
		output wire        ad1939_physical_ad1939_dac_dsdata2,   //                             .ad1939_dac_dsdata2
		output wire        ad1939_physical_ad1939_dac_dsdata3,   //                             .ad1939_dac_dsdata3
		output wire        ad1939_physical_ad1939_dac_dsdata4,   //                             .ad1939_dac_dsdata4
		input  wire        clk_clk,                              //                          clk.clk
		input  wire        ddr4_global_reset_reset_sink_reset_n, // ddr4_global_reset_reset_sink.reset_n
		output wire [0:0]  ddr4_mem_conduit_end_mem_ck,          //         ddr4_mem_conduit_end.mem_ck
		output wire [0:0]  ddr4_mem_conduit_end_mem_ck_n,        //                             .mem_ck_n
		output wire [16:0] ddr4_mem_conduit_end_mem_a,           //                             .mem_a
		output wire [0:0]  ddr4_mem_conduit_end_mem_act_n,       //                             .mem_act_n
		output wire [1:0]  ddr4_mem_conduit_end_mem_ba,          //                             .mem_ba
		output wire [1:0]  ddr4_mem_conduit_end_mem_bg,          //                             .mem_bg
		output wire [0:0]  ddr4_mem_conduit_end_mem_cke,         //                             .mem_cke
		output wire [0:0]  ddr4_mem_conduit_end_mem_cs_n,        //                             .mem_cs_n
		output wire [0:0]  ddr4_mem_conduit_end_mem_odt,         //                             .mem_odt
		output wire [0:0]  ddr4_mem_conduit_end_mem_reset_n,     //                             .mem_reset_n
		output wire [0:0]  ddr4_mem_conduit_end_mem_par,         //                             .mem_par
		input  wire [0:0]  ddr4_mem_conduit_end_mem_alert_n,     //                             .mem_alert_n
		inout  wire [3:0]  ddr4_mem_conduit_end_mem_dqs,         //                             .mem_dqs
		inout  wire [3:0]  ddr4_mem_conduit_end_mem_dqs_n,       //                             .mem_dqs_n
		inout  wire [31:0] ddr4_mem_conduit_end_mem_dq,          //                             .mem_dq
		inout  wire [3:0]  ddr4_mem_conduit_end_mem_dbi_n,       //                             .mem_dbi_n
		input  wire        ddr4_oct_conduit_end_oct_rzqin,       //         ddr4_oct_conduit_end.oct_rzqin
		input  wire        ddr4_pll_ref_clk_clock_sink_clk,      //  ddr4_pll_ref_clk_clock_sink.clk
		input  wire        hps_f2h_cold_reset_req_reset_n,       //       hps_f2h_cold_reset_req.reset_n
		input  wire [31:0] hps_f2h_irq0_irq,                     //                 hps_f2h_irq0.irq
		input  wire [31:0] hps_f2h_irq1_irq,                     //                 hps_f2h_irq1.irq
		input  wire        hps_f2h_warm_reset_req_reset_n,       //       hps_f2h_warm_reset_req.reset_n
		input  wire        hps_i2c0_sda_i,                       //                     hps_i2c0.sda_i
		output wire        hps_i2c0_sda_oe,                      //                             .sda_oe
		output wire        hps_i2c0_clk_clk,                     //                 hps_i2c0_clk.clk
		input  wire        hps_i2c0_scl_in_clk,                  //              hps_i2c0_scl_in.clk
		output wire        hps_io_hps_io_phery_emac1_TX_CLK,     //                       hps_io.hps_io_phery_emac1_TX_CLK
		output wire        hps_io_hps_io_phery_emac1_TXD0,       //                             .hps_io_phery_emac1_TXD0
		output wire        hps_io_hps_io_phery_emac1_TXD1,       //                             .hps_io_phery_emac1_TXD1
		output wire        hps_io_hps_io_phery_emac1_TXD2,       //                             .hps_io_phery_emac1_TXD2
		output wire        hps_io_hps_io_phery_emac1_TXD3,       //                             .hps_io_phery_emac1_TXD3
		input  wire        hps_io_hps_io_phery_emac1_RX_CTL,     //                             .hps_io_phery_emac1_RX_CTL
		output wire        hps_io_hps_io_phery_emac1_TX_CTL,     //                             .hps_io_phery_emac1_TX_CTL
		input  wire        hps_io_hps_io_phery_emac1_RX_CLK,     //                             .hps_io_phery_emac1_RX_CLK
		input  wire        hps_io_hps_io_phery_emac1_RXD0,       //                             .hps_io_phery_emac1_RXD0
		input  wire        hps_io_hps_io_phery_emac1_RXD1,       //                             .hps_io_phery_emac1_RXD1
		input  wire        hps_io_hps_io_phery_emac1_RXD2,       //                             .hps_io_phery_emac1_RXD2
		input  wire        hps_io_hps_io_phery_emac1_RXD3,       //                             .hps_io_phery_emac1_RXD3
		inout  wire        hps_io_hps_io_phery_emac1_MDIO,       //                             .hps_io_phery_emac1_MDIO
		output wire        hps_io_hps_io_phery_emac1_MDC,        //                             .hps_io_phery_emac1_MDC
		output wire        hps_io_hps_io_phery_emac2_TX_CLK,     //                             .hps_io_phery_emac2_TX_CLK
		output wire        hps_io_hps_io_phery_emac2_TXD0,       //                             .hps_io_phery_emac2_TXD0
		output wire        hps_io_hps_io_phery_emac2_TXD1,       //                             .hps_io_phery_emac2_TXD1
		output wire        hps_io_hps_io_phery_emac2_TXD2,       //                             .hps_io_phery_emac2_TXD2
		output wire        hps_io_hps_io_phery_emac2_TXD3,       //                             .hps_io_phery_emac2_TXD3
		input  wire        hps_io_hps_io_phery_emac2_RX_CTL,     //                             .hps_io_phery_emac2_RX_CTL
		output wire        hps_io_hps_io_phery_emac2_TX_CTL,     //                             .hps_io_phery_emac2_TX_CTL
		input  wire        hps_io_hps_io_phery_emac2_RX_CLK,     //                             .hps_io_phery_emac2_RX_CLK
		input  wire        hps_io_hps_io_phery_emac2_RXD0,       //                             .hps_io_phery_emac2_RXD0
		input  wire        hps_io_hps_io_phery_emac2_RXD1,       //                             .hps_io_phery_emac2_RXD1
		input  wire        hps_io_hps_io_phery_emac2_RXD2,       //                             .hps_io_phery_emac2_RXD2
		input  wire        hps_io_hps_io_phery_emac2_RXD3,       //                             .hps_io_phery_emac2_RXD3
		inout  wire        hps_io_hps_io_phery_emac2_MDIO,       //                             .hps_io_phery_emac2_MDIO
		output wire        hps_io_hps_io_phery_emac2_MDC,        //                             .hps_io_phery_emac2_MDC
		inout  wire        hps_io_hps_io_phery_sdmmc_CMD,        //                             .hps_io_phery_sdmmc_CMD
		inout  wire        hps_io_hps_io_phery_sdmmc_D0,         //                             .hps_io_phery_sdmmc_D0
		inout  wire        hps_io_hps_io_phery_sdmmc_D1,         //                             .hps_io_phery_sdmmc_D1
		inout  wire        hps_io_hps_io_phery_sdmmc_D2,         //                             .hps_io_phery_sdmmc_D2
		inout  wire        hps_io_hps_io_phery_sdmmc_D3,         //                             .hps_io_phery_sdmmc_D3
		inout  wire        hps_io_hps_io_phery_sdmmc_D4,         //                             .hps_io_phery_sdmmc_D4
		inout  wire        hps_io_hps_io_phery_sdmmc_D5,         //                             .hps_io_phery_sdmmc_D5
		inout  wire        hps_io_hps_io_phery_sdmmc_D6,         //                             .hps_io_phery_sdmmc_D6
		inout  wire        hps_io_hps_io_phery_sdmmc_D7,         //                             .hps_io_phery_sdmmc_D7
		output wire        hps_io_hps_io_phery_sdmmc_CCLK,       //                             .hps_io_phery_sdmmc_CCLK
		inout  wire        hps_io_hps_io_phery_usb1_DATA0,       //                             .hps_io_phery_usb1_DATA0
		inout  wire        hps_io_hps_io_phery_usb1_DATA1,       //                             .hps_io_phery_usb1_DATA1
		inout  wire        hps_io_hps_io_phery_usb1_DATA2,       //                             .hps_io_phery_usb1_DATA2
		inout  wire        hps_io_hps_io_phery_usb1_DATA3,       //                             .hps_io_phery_usb1_DATA3
		inout  wire        hps_io_hps_io_phery_usb1_DATA4,       //                             .hps_io_phery_usb1_DATA4
		inout  wire        hps_io_hps_io_phery_usb1_DATA5,       //                             .hps_io_phery_usb1_DATA5
		inout  wire        hps_io_hps_io_phery_usb1_DATA6,       //                             .hps_io_phery_usb1_DATA6
		inout  wire        hps_io_hps_io_phery_usb1_DATA7,       //                             .hps_io_phery_usb1_DATA7
		input  wire        hps_io_hps_io_phery_usb1_CLK,         //                             .hps_io_phery_usb1_CLK
		output wire        hps_io_hps_io_phery_usb1_STP,         //                             .hps_io_phery_usb1_STP
		input  wire        hps_io_hps_io_phery_usb1_DIR,         //                             .hps_io_phery_usb1_DIR
		input  wire        hps_io_hps_io_phery_usb1_NXT,         //                             .hps_io_phery_usb1_NXT
		input  wire        hps_io_hps_io_phery_uart0_RX,         //                             .hps_io_phery_uart0_RX
		output wire        hps_io_hps_io_phery_uart0_TX,         //                             .hps_io_phery_uart0_TX
		input  wire        hps_io_hps_io_phery_uart0_CTS_N,      //                             .hps_io_phery_uart0_CTS_N
		output wire        hps_io_hps_io_phery_uart0_RTS_N,      //                             .hps_io_phery_uart0_RTS_N
		output wire        hps_spim1_mosi_o,                     //                    hps_spim1.mosi_o
		input  wire        hps_spim1_miso_i,                     //                             .miso_i
		input  wire        hps_spim1_ss_in_n,                    //                             .ss_in_n
		output wire        hps_spim1_mosi_oe,                    //                             .mosi_oe
		output wire        hps_spim1_ss0_n_o,                    //                             .ss0_n_o
		output wire        hps_spim1_ss1_n_o,                    //                             .ss1_n_o
		output wire        hps_spim1_ss2_n_o,                    //                             .ss2_n_o
		output wire        hps_spim1_ss3_n_o,                    //                             .ss3_n_o
		output wire        hps_spim1_sclk_out_clk,               //           hps_spim1_sclk_out.clk
		output wire        mclk_pll_locked_export,               //              mclk_pll_locked.export
		input  wire        reset_reset_n                         //                        reset.reset_n
	);

	wire           fe_qsys_ad1939_audio_research_v1_0_line_in_valid;         // FE_Qsys_AD1939_Audio_Research_v1_0:AD1939_ADC2_valid -> FE_Qsys_AD1939_Audio_Research_v1_0:AD1939_DAC2_valid
	wire    [31:0] fe_qsys_ad1939_audio_research_v1_0_line_in_data;          // FE_Qsys_AD1939_Audio_Research_v1_0:AD1939_ADC2_data -> FE_Qsys_AD1939_Audio_Research_v1_0:AD1939_DAC2_data
	wire     [1:0] fe_qsys_ad1939_audio_research_v1_0_line_in_channel;       // FE_Qsys_AD1939_Audio_Research_v1_0:AD1939_ADC2_channel -> FE_Qsys_AD1939_Audio_Research_v1_0:AD1939_DAC2_channel
	wire     [1:0] fe_qsys_ad1939_audio_research_v1_0_line_in_error;         // FE_Qsys_AD1939_Audio_Research_v1_0:AD1939_ADC2_error -> FE_Qsys_AD1939_Audio_Research_v1_0:AD1939_DAC2_error
	wire           fe_qsys_ad1939_audio_research_v1_0_microphone_in_valid;   // FE_Qsys_AD1939_Audio_Research_v1_0:AD1939_ADC1_valid -> FE_Qsys_AD1939_Audio_Research_v1_0:AD1939_DAC1_valid
	wire    [31:0] fe_qsys_ad1939_audio_research_v1_0_microphone_in_data;    // FE_Qsys_AD1939_Audio_Research_v1_0:AD1939_ADC1_data -> FE_Qsys_AD1939_Audio_Research_v1_0:AD1939_DAC1_data
	wire     [1:0] fe_qsys_ad1939_audio_research_v1_0_microphone_in_channel; // FE_Qsys_AD1939_Audio_Research_v1_0:AD1939_ADC1_channel -> FE_Qsys_AD1939_Audio_Research_v1_0:AD1939_DAC1_channel
	wire     [1:0] fe_qsys_ad1939_audio_research_v1_0_microphone_in_error;   // FE_Qsys_AD1939_Audio_Research_v1_0:AD1939_ADC1_error -> FE_Qsys_AD1939_Audio_Research_v1_0:AD1939_DAC1_error
	wire           pll_using_ad1939_mclk_outclk0_clk;                        // PLL_using_AD1939_MCLK:outclk_0 -> [FE_Qsys_AD1939_Audio_Research_v1_0:sys_clk, rst_controller:clk]
	wire     [1:0] hps_emif_gp_to_emif;                                      // hps:emif_gp_to_emif -> ddr4:hps_to_emif_gp
	wire  [4095:0] ddr4_hps_emif_conduit_end_emif_to_hps;                    // ddr4:emif_to_hps -> hps:emif_emif_to_hps
	wire     [0:0] ddr4_hps_emif_conduit_end_emif_to_gp;                     // ddr4:emif_to_hps_gp -> hps:emif_emif_to_gp
	wire  [4095:0] hps_emif_hps_to_emif;                                     // hps:emif_hps_to_emif -> ddr4:hps_to_emif
	wire     [1:0] hps_h2f_lw_axi_master_awburst;                            // hps:h2f_lw_AWBURST -> mm_interconnect_0:hps_h2f_lw_axi_master_awburst
	wire     [4:0] hps_h2f_lw_axi_master_awuser;                             // hps:h2f_lw_AWUSER -> mm_interconnect_0:hps_h2f_lw_axi_master_awuser
	wire     [3:0] hps_h2f_lw_axi_master_arlen;                              // hps:h2f_lw_ARLEN -> mm_interconnect_0:hps_h2f_lw_axi_master_arlen
	wire     [3:0] hps_h2f_lw_axi_master_wstrb;                              // hps:h2f_lw_WSTRB -> mm_interconnect_0:hps_h2f_lw_axi_master_wstrb
	wire           hps_h2f_lw_axi_master_wready;                             // mm_interconnect_0:hps_h2f_lw_axi_master_wready -> hps:h2f_lw_WREADY
	wire     [3:0] hps_h2f_lw_axi_master_rid;                                // mm_interconnect_0:hps_h2f_lw_axi_master_rid -> hps:h2f_lw_RID
	wire           hps_h2f_lw_axi_master_rready;                             // hps:h2f_lw_RREADY -> mm_interconnect_0:hps_h2f_lw_axi_master_rready
	wire     [3:0] hps_h2f_lw_axi_master_awlen;                              // hps:h2f_lw_AWLEN -> mm_interconnect_0:hps_h2f_lw_axi_master_awlen
	wire     [3:0] hps_h2f_lw_axi_master_wid;                                // hps:h2f_lw_WID -> mm_interconnect_0:hps_h2f_lw_axi_master_wid
	wire     [3:0] hps_h2f_lw_axi_master_arcache;                            // hps:h2f_lw_ARCACHE -> mm_interconnect_0:hps_h2f_lw_axi_master_arcache
	wire           hps_h2f_lw_axi_master_wvalid;                             // hps:h2f_lw_WVALID -> mm_interconnect_0:hps_h2f_lw_axi_master_wvalid
	wire    [20:0] hps_h2f_lw_axi_master_araddr;                             // hps:h2f_lw_ARADDR -> mm_interconnect_0:hps_h2f_lw_axi_master_araddr
	wire     [2:0] hps_h2f_lw_axi_master_arprot;                             // hps:h2f_lw_ARPROT -> mm_interconnect_0:hps_h2f_lw_axi_master_arprot
	wire     [2:0] hps_h2f_lw_axi_master_awprot;                             // hps:h2f_lw_AWPROT -> mm_interconnect_0:hps_h2f_lw_axi_master_awprot
	wire    [31:0] hps_h2f_lw_axi_master_wdata;                              // hps:h2f_lw_WDATA -> mm_interconnect_0:hps_h2f_lw_axi_master_wdata
	wire           hps_h2f_lw_axi_master_arvalid;                            // hps:h2f_lw_ARVALID -> mm_interconnect_0:hps_h2f_lw_axi_master_arvalid
	wire     [3:0] hps_h2f_lw_axi_master_awcache;                            // hps:h2f_lw_AWCACHE -> mm_interconnect_0:hps_h2f_lw_axi_master_awcache
	wire     [3:0] hps_h2f_lw_axi_master_arid;                               // hps:h2f_lw_ARID -> mm_interconnect_0:hps_h2f_lw_axi_master_arid
	wire     [1:0] hps_h2f_lw_axi_master_arlock;                             // hps:h2f_lw_ARLOCK -> mm_interconnect_0:hps_h2f_lw_axi_master_arlock
	wire     [1:0] hps_h2f_lw_axi_master_awlock;                             // hps:h2f_lw_AWLOCK -> mm_interconnect_0:hps_h2f_lw_axi_master_awlock
	wire    [20:0] hps_h2f_lw_axi_master_awaddr;                             // hps:h2f_lw_AWADDR -> mm_interconnect_0:hps_h2f_lw_axi_master_awaddr
	wire     [1:0] hps_h2f_lw_axi_master_bresp;                              // mm_interconnect_0:hps_h2f_lw_axi_master_bresp -> hps:h2f_lw_BRESP
	wire           hps_h2f_lw_axi_master_arready;                            // mm_interconnect_0:hps_h2f_lw_axi_master_arready -> hps:h2f_lw_ARREADY
	wire    [31:0] hps_h2f_lw_axi_master_rdata;                              // mm_interconnect_0:hps_h2f_lw_axi_master_rdata -> hps:h2f_lw_RDATA
	wire           hps_h2f_lw_axi_master_awready;                            // mm_interconnect_0:hps_h2f_lw_axi_master_awready -> hps:h2f_lw_AWREADY
	wire     [1:0] hps_h2f_lw_axi_master_arburst;                            // hps:h2f_lw_ARBURST -> mm_interconnect_0:hps_h2f_lw_axi_master_arburst
	wire     [2:0] hps_h2f_lw_axi_master_arsize;                             // hps:h2f_lw_ARSIZE -> mm_interconnect_0:hps_h2f_lw_axi_master_arsize
	wire           hps_h2f_lw_axi_master_bready;                             // hps:h2f_lw_BREADY -> mm_interconnect_0:hps_h2f_lw_axi_master_bready
	wire           hps_h2f_lw_axi_master_rlast;                              // mm_interconnect_0:hps_h2f_lw_axi_master_rlast -> hps:h2f_lw_RLAST
	wire           hps_h2f_lw_axi_master_wlast;                              // hps:h2f_lw_WLAST -> mm_interconnect_0:hps_h2f_lw_axi_master_wlast
	wire     [1:0] hps_h2f_lw_axi_master_rresp;                              // mm_interconnect_0:hps_h2f_lw_axi_master_rresp -> hps:h2f_lw_RRESP
	wire     [3:0] hps_h2f_lw_axi_master_awid;                               // hps:h2f_lw_AWID -> mm_interconnect_0:hps_h2f_lw_axi_master_awid
	wire     [3:0] hps_h2f_lw_axi_master_bid;                                // mm_interconnect_0:hps_h2f_lw_axi_master_bid -> hps:h2f_lw_BID
	wire           hps_h2f_lw_axi_master_bvalid;                             // mm_interconnect_0:hps_h2f_lw_axi_master_bvalid -> hps:h2f_lw_BVALID
	wire     [2:0] hps_h2f_lw_axi_master_awsize;                             // hps:h2f_lw_AWSIZE -> mm_interconnect_0:hps_h2f_lw_axi_master_awsize
	wire           hps_h2f_lw_axi_master_awvalid;                            // hps:h2f_lw_AWVALID -> mm_interconnect_0:hps_h2f_lw_axi_master_awvalid
	wire     [4:0] hps_h2f_lw_axi_master_aruser;                             // hps:h2f_lw_ARUSER -> mm_interconnect_0:hps_h2f_lw_axi_master_aruser
	wire           hps_h2f_lw_axi_master_rvalid;                             // mm_interconnect_0:hps_h2f_lw_axi_master_rvalid -> hps:h2f_lw_RVALID
	wire    [31:0] mm_interconnect_0_sysid_qsys_0_control_slave_readdata;    // sysid_qsys_0:readdata -> mm_interconnect_0:sysid_qsys_0_control_slave_readdata
	wire     [0:0] mm_interconnect_0_sysid_qsys_0_control_slave_address;     // mm_interconnect_0:sysid_qsys_0_control_slave_address -> sysid_qsys_0:address
	wire           rst_controller_reset_out_reset;                           // rst_controller:reset_out -> FE_Qsys_AD1939_Audio_Research_v1_0:sys_reset
	wire           rst_controller_001_reset_out_reset;                       // rst_controller_001:reset_out -> [hps:h2f_lw_axi_rst, mm_interconnect_0:hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset, sysid_qsys_0:reset_n]

	AD1939_hps_audio_research fe_qsys_ad1939_audio_research_v1_0 (
		.AD1939_DAC1_channel (fe_qsys_ad1939_audio_research_v1_0_microphone_in_channel), //     Headphone_Out.channel
		.AD1939_DAC1_data    (fe_qsys_ad1939_audio_research_v1_0_microphone_in_data),    //                  .data
		.AD1939_DAC1_error   (fe_qsys_ad1939_audio_research_v1_0_microphone_in_error),   //                  .error
		.AD1939_DAC1_valid   (fe_qsys_ad1939_audio_research_v1_0_microphone_in_valid),   //                  .valid
		.AD1939_DAC2_channel (fe_qsys_ad1939_audio_research_v1_0_line_in_channel),       //          Line_Out.channel
		.AD1939_DAC2_data    (fe_qsys_ad1939_audio_research_v1_0_line_in_data),          //                  .data
		.AD1939_DAC2_error   (fe_qsys_ad1939_audio_research_v1_0_line_in_error),         //                  .error
		.AD1939_DAC2_valid   (fe_qsys_ad1939_audio_research_v1_0_line_in_valid),         //                  .valid
		.AD1939_DAC3_channel (),                                                         //          XLR1_Out.channel
		.AD1939_DAC3_data    (),                                                         //                  .data
		.AD1939_DAC3_error   (),                                                         //                  .error
		.AD1939_DAC3_valid   (),                                                         //                  .valid
		.AD1939_DAC4_channel (),                                                         //          XLR2_Out.channel
		.AD1939_DAC4_data    (),                                                         //                  .data
		.AD1939_DAC4_error   (),                                                         //                  .error
		.AD1939_DAC4_valid   (),                                                         //                  .valid
		.AD1939_ADC2_channel (fe_qsys_ad1939_audio_research_v1_0_line_in_channel),       //           Line_In.channel
		.AD1939_ADC2_data    (fe_qsys_ad1939_audio_research_v1_0_line_in_data),          //                  .data
		.AD1939_ADC2_error   (fe_qsys_ad1939_audio_research_v1_0_line_in_error),         //                  .error
		.AD1939_ADC2_valid   (fe_qsys_ad1939_audio_research_v1_0_line_in_valid),         //                  .valid
		.AD1939_ADC1_channel (fe_qsys_ad1939_audio_research_v1_0_microphone_in_channel), //     Microphone_In.channel
		.AD1939_ADC1_data    (fe_qsys_ad1939_audio_research_v1_0_microphone_in_data),    //                  .data
		.AD1939_ADC1_error   (fe_qsys_ad1939_audio_research_v1_0_microphone_in_error),   //                  .error
		.AD1939_ADC1_valid   (fe_qsys_ad1939_audio_research_v1_0_microphone_in_valid),   //                  .valid
		.sys_reset           (rst_controller_reset_out_reset),                           //         sys_reset.reset
		.AD1939_ADC_ABCLK    (ad1939_abclk_clk),                                         //         clk_abclk.clk
		.AD1939_ADC_ALRCLK   (ad1939_alrclk_clk),                                        //        clk_alrclk.clk
		.sys_clk             (pll_using_ad1939_mclk_outclk0_clk),                        //           sys_clk.clk
		.AD1939_ADC_ASDATA1  (ad1939_physical_ad1939_adc_asdata1),                       // connect_to_AD1939.ad1939_adc_asdata1
		.AD1939_ADC_ASDATA2  (ad1939_physical_ad1939_adc_asdata2),                       //                  .ad1939_adc_asdata2
		.AD1939_DAC_DBCLK    (ad1939_physical_ad1939_dac_dbclk),                         //                  .ad1939_dac_dbclk
		.AD1939_DAC_DLRCLK   (ad1939_physical_ad1939_dac_dlrclk),                        //                  .ad1939_dac_dlrclk
		.AD1939_DAC_DSDATA1  (ad1939_physical_ad1939_dac_dsdata1),                       //                  .ad1939_dac_dsdata1
		.AD1939_DAC_DSDATA2  (ad1939_physical_ad1939_dac_dsdata2),                       //                  .ad1939_dac_dsdata2
		.AD1939_DAC_DSDATA3  (ad1939_physical_ad1939_dac_dsdata3),                       //                  .ad1939_dac_dsdata3
		.AD1939_DAC_DSDATA4  (ad1939_physical_ad1939_dac_dsdata4)                        //                  .ad1939_dac_dsdata4
	);

	soc_system_altera_iopll_180_mnqgzey pll_using_ad1939_mclk (
		.rst      (~reset_reset_n),                    //   reset.reset
		.refclk   (ad1939_mclk_clk),                   //  refclk.clk
		.locked   (mclk_pll_locked_export),            //  locked.export
		.outclk_0 (pll_using_ad1939_mclk_outclk0_clk)  // outclk0.clk
	);

	soc_system_altera_emif_a10_hps_180_oqueytq ddr4 (
		.global_reset_n (ddr4_global_reset_reset_sink_reset_n),  // global_reset_reset_sink.reset_n
		.pll_ref_clk    (ddr4_pll_ref_clk_clock_sink_clk),       //  pll_ref_clk_clock_sink.clk
		.oct_rzqin      (ddr4_oct_conduit_end_oct_rzqin),        //         oct_conduit_end.oct_rzqin
		.mem_ck         (ddr4_mem_conduit_end_mem_ck),           //         mem_conduit_end.mem_ck
		.mem_ck_n       (ddr4_mem_conduit_end_mem_ck_n),         //                        .mem_ck_n
		.mem_a          (ddr4_mem_conduit_end_mem_a),            //                        .mem_a
		.mem_act_n      (ddr4_mem_conduit_end_mem_act_n),        //                        .mem_act_n
		.mem_ba         (ddr4_mem_conduit_end_mem_ba),           //                        .mem_ba
		.mem_bg         (ddr4_mem_conduit_end_mem_bg),           //                        .mem_bg
		.mem_cke        (ddr4_mem_conduit_end_mem_cke),          //                        .mem_cke
		.mem_cs_n       (ddr4_mem_conduit_end_mem_cs_n),         //                        .mem_cs_n
		.mem_odt        (ddr4_mem_conduit_end_mem_odt),          //                        .mem_odt
		.mem_reset_n    (ddr4_mem_conduit_end_mem_reset_n),      //                        .mem_reset_n
		.mem_par        (ddr4_mem_conduit_end_mem_par),          //                        .mem_par
		.mem_alert_n    (ddr4_mem_conduit_end_mem_alert_n),      //                        .mem_alert_n
		.mem_dqs        (ddr4_mem_conduit_end_mem_dqs),          //                        .mem_dqs
		.mem_dqs_n      (ddr4_mem_conduit_end_mem_dqs_n),        //                        .mem_dqs_n
		.mem_dq         (ddr4_mem_conduit_end_mem_dq),           //                        .mem_dq
		.mem_dbi_n      (ddr4_mem_conduit_end_mem_dbi_n),        //                        .mem_dbi_n
		.hps_to_emif    (hps_emif_hps_to_emif),                  //    hps_emif_conduit_end.hps_to_emif
		.emif_to_hps    (ddr4_hps_emif_conduit_end_emif_to_hps), //                        .emif_to_hps
		.hps_to_emif_gp (hps_emif_gp_to_emif),                   //                        .gp_to_emif
		.emif_to_hps_gp (ddr4_hps_emif_conduit_end_emif_to_gp)   //                        .emif_to_gp
	);

	soc_system_altera_arria10_hps_180_4pootmi #(
		.F2S_Width (0),
		.S2F_Width (0)
	) hps (
		.h2f_rst_n                 (),                                      //          h2f_reset.reset_n
		.f2h_cold_rst_req_n        (hps_f2h_cold_reset_req_reset_n),        // f2h_cold_reset_req.reset_n
		.f2h_warm_rst_req_n        (hps_f2h_warm_reset_req_reset_n),        // f2h_warm_reset_req.reset_n
		.emif_emif_to_hps          (ddr4_hps_emif_conduit_end_emif_to_hps), //               emif.emif_to_hps
		.emif_hps_to_emif          (hps_emif_hps_to_emif),                  //                   .hps_to_emif
		.emif_emif_to_gp           (ddr4_hps_emif_conduit_end_emif_to_gp),  //                   .emif_to_gp
		.emif_gp_to_emif           (hps_emif_gp_to_emif),                   //                   .gp_to_emif
		.h2f_lw_axi_clk            (clk_clk),                               //   h2f_lw_axi_clock.clk
		.h2f_lw_axi_rst            (~rst_controller_001_reset_out_reset),   //   h2f_lw_axi_reset.reset_n
		.h2f_lw_AWID               (hps_h2f_lw_axi_master_awid),            //  h2f_lw_axi_master.awid
		.h2f_lw_AWADDR             (hps_h2f_lw_axi_master_awaddr),          //                   .awaddr
		.h2f_lw_AWLEN              (hps_h2f_lw_axi_master_awlen),           //                   .awlen
		.h2f_lw_AWSIZE             (hps_h2f_lw_axi_master_awsize),          //                   .awsize
		.h2f_lw_AWBURST            (hps_h2f_lw_axi_master_awburst),         //                   .awburst
		.h2f_lw_AWLOCK             (hps_h2f_lw_axi_master_awlock),          //                   .awlock
		.h2f_lw_AWCACHE            (hps_h2f_lw_axi_master_awcache),         //                   .awcache
		.h2f_lw_AWPROT             (hps_h2f_lw_axi_master_awprot),          //                   .awprot
		.h2f_lw_AWVALID            (hps_h2f_lw_axi_master_awvalid),         //                   .awvalid
		.h2f_lw_AWREADY            (hps_h2f_lw_axi_master_awready),         //                   .awready
		.h2f_lw_AWUSER             (hps_h2f_lw_axi_master_awuser),          //                   .awuser
		.h2f_lw_WID                (hps_h2f_lw_axi_master_wid),             //                   .wid
		.h2f_lw_WDATA              (hps_h2f_lw_axi_master_wdata),           //                   .wdata
		.h2f_lw_WSTRB              (hps_h2f_lw_axi_master_wstrb),           //                   .wstrb
		.h2f_lw_WLAST              (hps_h2f_lw_axi_master_wlast),           //                   .wlast
		.h2f_lw_WVALID             (hps_h2f_lw_axi_master_wvalid),          //                   .wvalid
		.h2f_lw_WREADY             (hps_h2f_lw_axi_master_wready),          //                   .wready
		.h2f_lw_BID                (hps_h2f_lw_axi_master_bid),             //                   .bid
		.h2f_lw_BRESP              (hps_h2f_lw_axi_master_bresp),           //                   .bresp
		.h2f_lw_BVALID             (hps_h2f_lw_axi_master_bvalid),          //                   .bvalid
		.h2f_lw_BREADY             (hps_h2f_lw_axi_master_bready),          //                   .bready
		.h2f_lw_ARID               (hps_h2f_lw_axi_master_arid),            //                   .arid
		.h2f_lw_ARADDR             (hps_h2f_lw_axi_master_araddr),          //                   .araddr
		.h2f_lw_ARLEN              (hps_h2f_lw_axi_master_arlen),           //                   .arlen
		.h2f_lw_ARSIZE             (hps_h2f_lw_axi_master_arsize),          //                   .arsize
		.h2f_lw_ARBURST            (hps_h2f_lw_axi_master_arburst),         //                   .arburst
		.h2f_lw_ARLOCK             (hps_h2f_lw_axi_master_arlock),          //                   .arlock
		.h2f_lw_ARCACHE            (hps_h2f_lw_axi_master_arcache),         //                   .arcache
		.h2f_lw_ARPROT             (hps_h2f_lw_axi_master_arprot),          //                   .arprot
		.h2f_lw_ARVALID            (hps_h2f_lw_axi_master_arvalid),         //                   .arvalid
		.h2f_lw_ARREADY            (hps_h2f_lw_axi_master_arready),         //                   .arready
		.h2f_lw_ARUSER             (hps_h2f_lw_axi_master_aruser),          //                   .aruser
		.h2f_lw_RID                (hps_h2f_lw_axi_master_rid),             //                   .rid
		.h2f_lw_RDATA              (hps_h2f_lw_axi_master_rdata),           //                   .rdata
		.h2f_lw_RRESP              (hps_h2f_lw_axi_master_rresp),           //                   .rresp
		.h2f_lw_RLAST              (hps_h2f_lw_axi_master_rlast),           //                   .rlast
		.h2f_lw_RVALID             (hps_h2f_lw_axi_master_rvalid),          //                   .rvalid
		.h2f_lw_RREADY             (hps_h2f_lw_axi_master_rready),          //                   .rready
		.f2h_irq_p0                (hps_f2h_irq0_irq),                      //           f2h_irq0.irq
		.f2h_irq_p1                (hps_f2h_irq1_irq),                      //           f2h_irq1.irq
		.spim1_mosi_o              (hps_spim1_mosi_o),                      //              spim1.mosi_o
		.spim1_miso_i              (hps_spim1_miso_i),                      //                   .miso_i
		.spim1_ss_in_n             (hps_spim1_ss_in_n),                     //                   .ss_in_n
		.spim1_mosi_oe             (hps_spim1_mosi_oe),                     //                   .mosi_oe
		.spim1_ss0_n_o             (hps_spim1_ss0_n_o),                     //                   .ss0_n_o
		.spim1_ss1_n_o             (hps_spim1_ss1_n_o),                     //                   .ss1_n_o
		.spim1_ss2_n_o             (hps_spim1_ss2_n_o),                     //                   .ss2_n_o
		.spim1_ss3_n_o             (hps_spim1_ss3_n_o),                     //                   .ss3_n_o
		.spim1_sclk_out            (hps_spim1_sclk_out_clk),                //     spim1_sclk_out.clk
		.i2c0_scl_i                (hps_i2c0_scl_in_clk),                   //        i2c0_scl_in.clk
		.i2c0_scl_oe               (hps_i2c0_clk_clk),                      //           i2c0_clk.clk
		.i2c0_sda_i                (hps_i2c0_sda_i),                        //               i2c0.sda_i
		.i2c0_sda_oe               (hps_i2c0_sda_oe),                       //                   .sda_oe
		.hps_io_phery_emac1_TX_CLK (hps_io_hps_io_phery_emac1_TX_CLK),      //             hps_io.hps_io_phery_emac1_TX_CLK
		.hps_io_phery_emac1_TXD0   (hps_io_hps_io_phery_emac1_TXD0),        //                   .hps_io_phery_emac1_TXD0
		.hps_io_phery_emac1_TXD1   (hps_io_hps_io_phery_emac1_TXD1),        //                   .hps_io_phery_emac1_TXD1
		.hps_io_phery_emac1_TXD2   (hps_io_hps_io_phery_emac1_TXD2),        //                   .hps_io_phery_emac1_TXD2
		.hps_io_phery_emac1_TXD3   (hps_io_hps_io_phery_emac1_TXD3),        //                   .hps_io_phery_emac1_TXD3
		.hps_io_phery_emac1_RX_CTL (hps_io_hps_io_phery_emac1_RX_CTL),      //                   .hps_io_phery_emac1_RX_CTL
		.hps_io_phery_emac1_TX_CTL (hps_io_hps_io_phery_emac1_TX_CTL),      //                   .hps_io_phery_emac1_TX_CTL
		.hps_io_phery_emac1_RX_CLK (hps_io_hps_io_phery_emac1_RX_CLK),      //                   .hps_io_phery_emac1_RX_CLK
		.hps_io_phery_emac1_RXD0   (hps_io_hps_io_phery_emac1_RXD0),        //                   .hps_io_phery_emac1_RXD0
		.hps_io_phery_emac1_RXD1   (hps_io_hps_io_phery_emac1_RXD1),        //                   .hps_io_phery_emac1_RXD1
		.hps_io_phery_emac1_RXD2   (hps_io_hps_io_phery_emac1_RXD2),        //                   .hps_io_phery_emac1_RXD2
		.hps_io_phery_emac1_RXD3   (hps_io_hps_io_phery_emac1_RXD3),        //                   .hps_io_phery_emac1_RXD3
		.hps_io_phery_emac1_MDIO   (hps_io_hps_io_phery_emac1_MDIO),        //                   .hps_io_phery_emac1_MDIO
		.hps_io_phery_emac1_MDC    (hps_io_hps_io_phery_emac1_MDC),         //                   .hps_io_phery_emac1_MDC
		.hps_io_phery_emac2_TX_CLK (hps_io_hps_io_phery_emac2_TX_CLK),      //                   .hps_io_phery_emac2_TX_CLK
		.hps_io_phery_emac2_TXD0   (hps_io_hps_io_phery_emac2_TXD0),        //                   .hps_io_phery_emac2_TXD0
		.hps_io_phery_emac2_TXD1   (hps_io_hps_io_phery_emac2_TXD1),        //                   .hps_io_phery_emac2_TXD1
		.hps_io_phery_emac2_TXD2   (hps_io_hps_io_phery_emac2_TXD2),        //                   .hps_io_phery_emac2_TXD2
		.hps_io_phery_emac2_TXD3   (hps_io_hps_io_phery_emac2_TXD3),        //                   .hps_io_phery_emac2_TXD3
		.hps_io_phery_emac2_RX_CTL (hps_io_hps_io_phery_emac2_RX_CTL),      //                   .hps_io_phery_emac2_RX_CTL
		.hps_io_phery_emac2_TX_CTL (hps_io_hps_io_phery_emac2_TX_CTL),      //                   .hps_io_phery_emac2_TX_CTL
		.hps_io_phery_emac2_RX_CLK (hps_io_hps_io_phery_emac2_RX_CLK),      //                   .hps_io_phery_emac2_RX_CLK
		.hps_io_phery_emac2_RXD0   (hps_io_hps_io_phery_emac2_RXD0),        //                   .hps_io_phery_emac2_RXD0
		.hps_io_phery_emac2_RXD1   (hps_io_hps_io_phery_emac2_RXD1),        //                   .hps_io_phery_emac2_RXD1
		.hps_io_phery_emac2_RXD2   (hps_io_hps_io_phery_emac2_RXD2),        //                   .hps_io_phery_emac2_RXD2
		.hps_io_phery_emac2_RXD3   (hps_io_hps_io_phery_emac2_RXD3),        //                   .hps_io_phery_emac2_RXD3
		.hps_io_phery_emac2_MDIO   (hps_io_hps_io_phery_emac2_MDIO),        //                   .hps_io_phery_emac2_MDIO
		.hps_io_phery_emac2_MDC    (hps_io_hps_io_phery_emac2_MDC),         //                   .hps_io_phery_emac2_MDC
		.hps_io_phery_sdmmc_CMD    (hps_io_hps_io_phery_sdmmc_CMD),         //                   .hps_io_phery_sdmmc_CMD
		.hps_io_phery_sdmmc_D0     (hps_io_hps_io_phery_sdmmc_D0),          //                   .hps_io_phery_sdmmc_D0
		.hps_io_phery_sdmmc_D1     (hps_io_hps_io_phery_sdmmc_D1),          //                   .hps_io_phery_sdmmc_D1
		.hps_io_phery_sdmmc_D2     (hps_io_hps_io_phery_sdmmc_D2),          //                   .hps_io_phery_sdmmc_D2
		.hps_io_phery_sdmmc_D3     (hps_io_hps_io_phery_sdmmc_D3),          //                   .hps_io_phery_sdmmc_D3
		.hps_io_phery_sdmmc_D4     (hps_io_hps_io_phery_sdmmc_D4),          //                   .hps_io_phery_sdmmc_D4
		.hps_io_phery_sdmmc_D5     (hps_io_hps_io_phery_sdmmc_D5),          //                   .hps_io_phery_sdmmc_D5
		.hps_io_phery_sdmmc_D6     (hps_io_hps_io_phery_sdmmc_D6),          //                   .hps_io_phery_sdmmc_D6
		.hps_io_phery_sdmmc_D7     (hps_io_hps_io_phery_sdmmc_D7),          //                   .hps_io_phery_sdmmc_D7
		.hps_io_phery_sdmmc_CCLK   (hps_io_hps_io_phery_sdmmc_CCLK),        //                   .hps_io_phery_sdmmc_CCLK
		.hps_io_phery_usb1_DATA0   (hps_io_hps_io_phery_usb1_DATA0),        //                   .hps_io_phery_usb1_DATA0
		.hps_io_phery_usb1_DATA1   (hps_io_hps_io_phery_usb1_DATA1),        //                   .hps_io_phery_usb1_DATA1
		.hps_io_phery_usb1_DATA2   (hps_io_hps_io_phery_usb1_DATA2),        //                   .hps_io_phery_usb1_DATA2
		.hps_io_phery_usb1_DATA3   (hps_io_hps_io_phery_usb1_DATA3),        //                   .hps_io_phery_usb1_DATA3
		.hps_io_phery_usb1_DATA4   (hps_io_hps_io_phery_usb1_DATA4),        //                   .hps_io_phery_usb1_DATA4
		.hps_io_phery_usb1_DATA5   (hps_io_hps_io_phery_usb1_DATA5),        //                   .hps_io_phery_usb1_DATA5
		.hps_io_phery_usb1_DATA6   (hps_io_hps_io_phery_usb1_DATA6),        //                   .hps_io_phery_usb1_DATA6
		.hps_io_phery_usb1_DATA7   (hps_io_hps_io_phery_usb1_DATA7),        //                   .hps_io_phery_usb1_DATA7
		.hps_io_phery_usb1_CLK     (hps_io_hps_io_phery_usb1_CLK),          //                   .hps_io_phery_usb1_CLK
		.hps_io_phery_usb1_STP     (hps_io_hps_io_phery_usb1_STP),          //                   .hps_io_phery_usb1_STP
		.hps_io_phery_usb1_DIR     (hps_io_hps_io_phery_usb1_DIR),          //                   .hps_io_phery_usb1_DIR
		.hps_io_phery_usb1_NXT     (hps_io_hps_io_phery_usb1_NXT),          //                   .hps_io_phery_usb1_NXT
		.hps_io_phery_uart0_RX     (hps_io_hps_io_phery_uart0_RX),          //                   .hps_io_phery_uart0_RX
		.hps_io_phery_uart0_TX     (hps_io_hps_io_phery_uart0_TX),          //                   .hps_io_phery_uart0_TX
		.hps_io_phery_uart0_CTS_N  (hps_io_hps_io_phery_uart0_CTS_N),       //                   .hps_io_phery_uart0_CTS_N
		.hps_io_phery_uart0_RTS_N  (hps_io_hps_io_phery_uart0_RTS_N)        //                   .hps_io_phery_uart0_RTS_N
	);

	soc_system_altera_jtag_avalon_master_180_sb3msya #(
		.USE_PLI     (0),
		.PLI_PORT    (50000),
		.FIFO_DEPTHS (2)
	) jtag_master (
		.clk_clk              (clk_clk),        //          clk.clk
		.clk_reset_reset      (~reset_reset_n), //    clk_reset.reset
		.master_address       (),               //       master.address
		.master_readdata      (),               //             .readdata
		.master_read          (),               //             .read
		.master_write         (),               //             .write
		.master_writedata     (),               //             .writedata
		.master_waitrequest   (),               //             .waitrequest
		.master_readdatavalid (),               //             .readdatavalid
		.master_byteenable    (),               //             .byteenable
		.master_reset_reset   ()                // master_reset.reset
	);

	soc_system_altera_avalon_sysid_qsys_180_3giudzy sysid_qsys_0 (
		.clock    (clk_clk),                                               //           clk.clk
		.reset_n  (~rst_controller_001_reset_out_reset),                   //         reset.reset_n
		.readdata (mm_interconnect_0_sysid_qsys_0_control_slave_readdata), // control_slave.readdata
		.address  (mm_interconnect_0_sysid_qsys_0_control_slave_address)   //              .address
	);

	soc_system_altera_mm_interconnect_180_h4iigbi mm_interconnect_0 (
		.hps_h2f_lw_axi_master_awid                       (hps_h2f_lw_axi_master_awid),                            //                      hps_h2f_lw_axi_master.awid
		.hps_h2f_lw_axi_master_awaddr                     (hps_h2f_lw_axi_master_awaddr),                          //                                           .awaddr
		.hps_h2f_lw_axi_master_awlen                      (hps_h2f_lw_axi_master_awlen),                           //                                           .awlen
		.hps_h2f_lw_axi_master_awsize                     (hps_h2f_lw_axi_master_awsize),                          //                                           .awsize
		.hps_h2f_lw_axi_master_awburst                    (hps_h2f_lw_axi_master_awburst),                         //                                           .awburst
		.hps_h2f_lw_axi_master_awlock                     (hps_h2f_lw_axi_master_awlock),                          //                                           .awlock
		.hps_h2f_lw_axi_master_awcache                    (hps_h2f_lw_axi_master_awcache),                         //                                           .awcache
		.hps_h2f_lw_axi_master_awprot                     (hps_h2f_lw_axi_master_awprot),                          //                                           .awprot
		.hps_h2f_lw_axi_master_awuser                     (hps_h2f_lw_axi_master_awuser),                          //                                           .awuser
		.hps_h2f_lw_axi_master_awvalid                    (hps_h2f_lw_axi_master_awvalid),                         //                                           .awvalid
		.hps_h2f_lw_axi_master_awready                    (hps_h2f_lw_axi_master_awready),                         //                                           .awready
		.hps_h2f_lw_axi_master_wid                        (hps_h2f_lw_axi_master_wid),                             //                                           .wid
		.hps_h2f_lw_axi_master_wdata                      (hps_h2f_lw_axi_master_wdata),                           //                                           .wdata
		.hps_h2f_lw_axi_master_wstrb                      (hps_h2f_lw_axi_master_wstrb),                           //                                           .wstrb
		.hps_h2f_lw_axi_master_wlast                      (hps_h2f_lw_axi_master_wlast),                           //                                           .wlast
		.hps_h2f_lw_axi_master_wvalid                     (hps_h2f_lw_axi_master_wvalid),                          //                                           .wvalid
		.hps_h2f_lw_axi_master_wready                     (hps_h2f_lw_axi_master_wready),                          //                                           .wready
		.hps_h2f_lw_axi_master_bid                        (hps_h2f_lw_axi_master_bid),                             //                                           .bid
		.hps_h2f_lw_axi_master_bresp                      (hps_h2f_lw_axi_master_bresp),                           //                                           .bresp
		.hps_h2f_lw_axi_master_bvalid                     (hps_h2f_lw_axi_master_bvalid),                          //                                           .bvalid
		.hps_h2f_lw_axi_master_bready                     (hps_h2f_lw_axi_master_bready),                          //                                           .bready
		.hps_h2f_lw_axi_master_arid                       (hps_h2f_lw_axi_master_arid),                            //                                           .arid
		.hps_h2f_lw_axi_master_araddr                     (hps_h2f_lw_axi_master_araddr),                          //                                           .araddr
		.hps_h2f_lw_axi_master_arlen                      (hps_h2f_lw_axi_master_arlen),                           //                                           .arlen
		.hps_h2f_lw_axi_master_arsize                     (hps_h2f_lw_axi_master_arsize),                          //                                           .arsize
		.hps_h2f_lw_axi_master_arburst                    (hps_h2f_lw_axi_master_arburst),                         //                                           .arburst
		.hps_h2f_lw_axi_master_arlock                     (hps_h2f_lw_axi_master_arlock),                          //                                           .arlock
		.hps_h2f_lw_axi_master_arcache                    (hps_h2f_lw_axi_master_arcache),                         //                                           .arcache
		.hps_h2f_lw_axi_master_arprot                     (hps_h2f_lw_axi_master_arprot),                          //                                           .arprot
		.hps_h2f_lw_axi_master_aruser                     (hps_h2f_lw_axi_master_aruser),                          //                                           .aruser
		.hps_h2f_lw_axi_master_arvalid                    (hps_h2f_lw_axi_master_arvalid),                         //                                           .arvalid
		.hps_h2f_lw_axi_master_arready                    (hps_h2f_lw_axi_master_arready),                         //                                           .arready
		.hps_h2f_lw_axi_master_rid                        (hps_h2f_lw_axi_master_rid),                             //                                           .rid
		.hps_h2f_lw_axi_master_rdata                      (hps_h2f_lw_axi_master_rdata),                           //                                           .rdata
		.hps_h2f_lw_axi_master_rresp                      (hps_h2f_lw_axi_master_rresp),                           //                                           .rresp
		.hps_h2f_lw_axi_master_rlast                      (hps_h2f_lw_axi_master_rlast),                           //                                           .rlast
		.hps_h2f_lw_axi_master_rvalid                     (hps_h2f_lw_axi_master_rvalid),                          //                                           .rvalid
		.hps_h2f_lw_axi_master_rready                     (hps_h2f_lw_axi_master_rready),                          //                                           .rready
		.clk_hps_clk_clk                                  (clk_clk),                                               //                                clk_hps_clk.clk
		.hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset (rst_controller_001_reset_out_reset),                    // hps_h2f_lw_axi_reset_reset_bridge_in_reset.reset
		.sysid_qsys_0_control_slave_address               (mm_interconnect_0_sysid_qsys_0_control_slave_address),  //                 sysid_qsys_0_control_slave.address
		.sysid_qsys_0_control_slave_readdata              (mm_interconnect_0_sysid_qsys_0_control_slave_readdata)  //                                           .readdata
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller (
		.reset_in0      (~reset_reset_n),                    // reset_in0.reset
		.clk            (pll_using_ad1939_mclk_outclk0_clk), //       clk.clk
		.reset_out      (rst_controller_reset_out_reset),    // reset_out.reset
		.reset_req      (),                                  // (terminated)
		.reset_req_in0  (1'b0),                              // (terminated)
		.reset_in1      (1'b0),                              // (terminated)
		.reset_req_in1  (1'b0),                              // (terminated)
		.reset_in2      (1'b0),                              // (terminated)
		.reset_req_in2  (1'b0),                              // (terminated)
		.reset_in3      (1'b0),                              // (terminated)
		.reset_req_in3  (1'b0),                              // (terminated)
		.reset_in4      (1'b0),                              // (terminated)
		.reset_req_in4  (1'b0),                              // (terminated)
		.reset_in5      (1'b0),                              // (terminated)
		.reset_req_in5  (1'b0),                              // (terminated)
		.reset_in6      (1'b0),                              // (terminated)
		.reset_req_in6  (1'b0),                              // (terminated)
		.reset_in7      (1'b0),                              // (terminated)
		.reset_req_in7  (1'b0),                              // (terminated)
		.reset_in8      (1'b0),                              // (terminated)
		.reset_req_in8  (1'b0),                              // (terminated)
		.reset_in9      (1'b0),                              // (terminated)
		.reset_req_in9  (1'b0),                              // (terminated)
		.reset_in10     (1'b0),                              // (terminated)
		.reset_req_in10 (1'b0),                              // (terminated)
		.reset_in11     (1'b0),                              // (terminated)
		.reset_req_in11 (1'b0),                              // (terminated)
		.reset_in12     (1'b0),                              // (terminated)
		.reset_req_in12 (1'b0),                              // (terminated)
		.reset_in13     (1'b0),                              // (terminated)
		.reset_req_in13 (1'b0),                              // (terminated)
		.reset_in14     (1'b0),                              // (terminated)
		.reset_req_in14 (1'b0),                              // (terminated)
		.reset_in15     (1'b0),                              // (terminated)
		.reset_req_in15 (1'b0)                               // (terminated)
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_001 (
		.reset_in0      (~reset_reset_n),                     // reset_in0.reset
		.clk            (clk_clk),                            //       clk.clk
		.reset_out      (rst_controller_001_reset_out_reset), // reset_out.reset
		.reset_req      (),                                   // (terminated)
		.reset_req_in0  (1'b0),                               // (terminated)
		.reset_in1      (1'b0),                               // (terminated)
		.reset_req_in1  (1'b0),                               // (terminated)
		.reset_in2      (1'b0),                               // (terminated)
		.reset_req_in2  (1'b0),                               // (terminated)
		.reset_in3      (1'b0),                               // (terminated)
		.reset_req_in3  (1'b0),                               // (terminated)
		.reset_in4      (1'b0),                               // (terminated)
		.reset_req_in4  (1'b0),                               // (terminated)
		.reset_in5      (1'b0),                               // (terminated)
		.reset_req_in5  (1'b0),                               // (terminated)
		.reset_in6      (1'b0),                               // (terminated)
		.reset_req_in6  (1'b0),                               // (terminated)
		.reset_in7      (1'b0),                               // (terminated)
		.reset_req_in7  (1'b0),                               // (terminated)
		.reset_in8      (1'b0),                               // (terminated)
		.reset_req_in8  (1'b0),                               // (terminated)
		.reset_in9      (1'b0),                               // (terminated)
		.reset_req_in9  (1'b0),                               // (terminated)
		.reset_in10     (1'b0),                               // (terminated)
		.reset_req_in10 (1'b0),                               // (terminated)
		.reset_in11     (1'b0),                               // (terminated)
		.reset_req_in11 (1'b0),                               // (terminated)
		.reset_in12     (1'b0),                               // (terminated)
		.reset_req_in12 (1'b0),                               // (terminated)
		.reset_in13     (1'b0),                               // (terminated)
		.reset_req_in13 (1'b0),                               // (terminated)
		.reset_in14     (1'b0),                               // (terminated)
		.reset_req_in14 (1'b0),                               // (terminated)
		.reset_in15     (1'b0),                               // (terminated)
		.reset_req_in15 (1'b0)                                // (terminated)
	);

endmodule
