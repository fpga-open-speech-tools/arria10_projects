-- som_system.vhd

-- Generated using ACDS version 18.0 614

library IEEE;
library som_system_FE_AD4020_10;
library som_system_FE_AD5791_v1_10;
library som_system_FE_AD7768_v1_10;
library som_system_FE_FPGA_Microphone_Encoder_Decoder_10;
library som_system_FE_Qsys_AD1939_Audio_Blade_v1_10;
library som_system_altera_arria10_hps_180;
library som_system_altera_emif_180;
library som_system_altera_emif_a10_hps_180;
library som_system_altera_avalon_mm_clock_crossing_bridge_180;
library som_system_mux_ddr_10;
library som_system_altera_iopll_180;
library som_system_altera_avalon_pio_180;
library som_system_altera_mm_interconnect_180;
library som_system_altera_irq_mapper_180;
library som_system_altera_avalon_st_adapter_180;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use som_system_FE_AD4020_10.som_system_pkg.all;
use som_system_FE_AD5791_v1_10.som_system_pkg.all;
use som_system_FE_AD7768_v1_10.som_system_pkg.all;
use som_system_FE_FPGA_Microphone_Encoder_Decoder_10.som_system_pkg.all;
use som_system_FE_Qsys_AD1939_Audio_Blade_v1_10.som_system_pkg.all;
use som_system_altera_arria10_hps_180.som_system_pkg.all;
use som_system_altera_emif_180.som_system_pkg.all;
use som_system_altera_emif_a10_hps_180.som_system_pkg.all;
use som_system_altera_avalon_mm_clock_crossing_bridge_180.som_system_pkg.all;
use som_system_mux_ddr_10.som_system_pkg.all;
use som_system_altera_iopll_180.som_system_pkg.all;
use som_system_altera_avalon_pio_180.som_system_pkg.all;
use som_system_altera_mm_interconnect_180.som_system_pkg.all;
use som_system_altera_irq_mapper_180.som_system_pkg.all;
use som_system_altera_avalon_st_adapter_180.som_system_pkg.all;

entity som_system is
	port (
		ad1939_abclk_clk                               : in    std_logic                     := '0';             --                           ad1939_abclk.clk
		ad1939_alrclk_clk                              : in    std_logic                     := '0';             --                          ad1939_alrclk.clk
		ad1939_mclk_clk                                : in    std_logic                     := '0';             --                            ad1939_mclk.clk
		ad1939_physical_ad1939_adc_asdata1             : in    std_logic                     := '0';             --                        ad1939_physical.ad1939_adc_asdata1
		ad1939_physical_ad1939_adc_asdata2             : in    std_logic                     := '0';             --                                       .ad1939_adc_asdata2
		ad1939_physical_ad1939_dac_dsdata1             : out   std_logic;                                        --                                       .ad1939_dac_dsdata1
		ad1939_physical_ad1939_dac_dsdata2             : out   std_logic;                                        --                                       .ad1939_dac_dsdata2
		ad1939_physical_ad1939_dac_dbclk               : out   std_logic;                                        --                                       .ad1939_dac_dbclk
		ad1939_physical_ad1939_dac_dlrclk              : out   std_logic;                                        --                                       .ad1939_dac_dlrclk
		ad4020_left_physical_cnv                       : out   std_logic;                                        --                   ad4020_left_physical.cnv
		ad4020_left_physical_miso                      : in    std_logic                     := '0';             --                                       .miso
		ad4020_left_physical_mosi                      : out   std_logic;                                        --                                       .mosi
		ad4020_left_physical_sclk                      : out   std_logic;                                        --                                       .sclk
		ad4020_right_physical_cnv                      : out   std_logic;                                        --                  ad4020_right_physical.cnv
		ad4020_right_physical_miso                     : in    std_logic                     := '0';             --                                       .miso
		ad4020_right_physical_mosi                     : out   std_logic;                                        --                                       .mosi
		ad4020_right_physical_sclk                     : out   std_logic;                                        --                                       .sclk
		ad5791_left_physical_ad5791_clr_n_out          : out   std_logic;                                        --                   ad5791_left_physical.ad5791_clr_n_out
		ad5791_left_physical_ad5791_ldac_n_out         : out   std_logic;                                        --                                       .ad5791_ldac_n_out
		ad5791_left_physical_ad5791_miso_out           : in    std_logic                     := '0';             --                                       .ad5791_miso_out
		ad5791_left_physical_ad5791_mosi_in            : out   std_logic;                                        --                                       .ad5791_mosi_in
		ad5791_left_physical_ad5791_sclk_out           : out   std_logic;                                        --                                       .ad5791_sclk_out
		ad5791_left_physical_ad5791_sync_n_out         : out   std_logic;                                        --                                       .ad5791_sync_n_out
		ad5791_right_physical_ad5791_clr_n_out         : out   std_logic;                                        --                  ad5791_right_physical.ad5791_clr_n_out
		ad5791_right_physical_ad5791_ldac_n_out        : out   std_logic;                                        --                                       .ad5791_ldac_n_out
		ad5791_right_physical_ad5791_miso_out          : in    std_logic                     := '0';             --                                       .ad5791_miso_out
		ad5791_right_physical_ad5791_mosi_in           : out   std_logic;                                        --                                       .ad5791_mosi_in
		ad5791_right_physical_ad5791_sclk_out          : out   std_logic;                                        --                                       .ad5791_sclk_out
		ad5791_right_physical_ad5791_sync_n_out        : out   std_logic;                                        --                                       .ad5791_sync_n_out
		ad7768_physical_ad7768_dout_in                 : in    std_logic_vector(3 downto 0)  := (others => '0'); --                        ad7768_physical.ad7768_dout_in
		ad7768_physical_ad7768_drdy_in                 : in    std_logic                     := '0';             --                                       .ad7768_drdy_in
		ad7768_physical_ad7768_dclk_in                 : in    std_logic                     := '0';             --                                       .ad7768_dclk_in
		addr_sel_in_add_sel                            : in    std_logic_vector(2 downto 0)  := (others => '0'); --                            addr_sel_in.add_sel
		axi_clk_bridge_in_clk_clk                      : in    std_logic                     := '0';             --                  axi_clk_bridge_in_clk.clk
		clk_100_clk                                    : in    std_logic                     := '0';             --                                clk_100.clk
		ddr_ref_clk_clk                                : in    std_logic                     := '0';             --                            ddr_ref_clk.clk
		emif_0_global_reset_n_reset_n                  : in    std_logic                     := '0';             --                  emif_0_global_reset_n.reset_n
		emif_0_mem_mem_ck                              : out   std_logic_vector(0 downto 0);                     --                             emif_0_mem.mem_ck
		emif_0_mem_mem_ck_n                            : out   std_logic_vector(0 downto 0);                     --                                       .mem_ck_n
		emif_0_mem_mem_a                               : out   std_logic_vector(16 downto 0);                    --                                       .mem_a
		emif_0_mem_mem_act_n                           : out   std_logic_vector(0 downto 0);                     --                                       .mem_act_n
		emif_0_mem_mem_ba                              : out   std_logic_vector(1 downto 0);                     --                                       .mem_ba
		emif_0_mem_mem_bg                              : out   std_logic_vector(0 downto 0);                     --                                       .mem_bg
		emif_0_mem_mem_cke                             : out   std_logic_vector(0 downto 0);                     --                                       .mem_cke
		emif_0_mem_mem_cs_n                            : out   std_logic_vector(0 downto 0);                     --                                       .mem_cs_n
		emif_0_mem_mem_odt                             : out   std_logic_vector(0 downto 0);                     --                                       .mem_odt
		emif_0_mem_mem_reset_n                         : out   std_logic_vector(0 downto 0);                     --                                       .mem_reset_n
		emif_0_mem_mem_par                             : out   std_logic_vector(0 downto 0);                     --                                       .mem_par
		emif_0_mem_mem_alert_n                         : in    std_logic_vector(0 downto 0)  := (others => '0'); --                                       .mem_alert_n
		emif_0_mem_mem_dqs                             : inout std_logic_vector(7 downto 0)  := (others => '0'); --                                       .mem_dqs
		emif_0_mem_mem_dqs_n                           : inout std_logic_vector(7 downto 0)  := (others => '0'); --                                       .mem_dqs_n
		emif_0_mem_mem_dq                              : inout std_logic_vector(63 downto 0) := (others => '0'); --                                       .mem_dq
		emif_0_mem_mem_dbi_n                           : inout std_logic_vector(7 downto 0)  := (others => '0'); --                                       .mem_dbi_n
		emif_0_oct_oct_rzqin                           : in    std_logic                     := '0';             --                             emif_0_oct.oct_rzqin
		emif_0_pll_extra_clk_0_pll_extra_clk_0         : out   std_logic;                                        --                 emif_0_pll_extra_clk_0.pll_extra_clk_0
		emif_0_pll_locked_pll_locked                   : out   std_logic;                                        --                      emif_0_pll_locked.pll_locked
		emif_0_pll_ref_clk_clk                         : in    std_logic                     := '0';             --                     emif_0_pll_ref_clk.clk
		emif_0_status_local_cal_success                : out   std_logic;                                        --                          emif_0_status.local_cal_success
		emif_0_status_local_cal_fail                   : out   std_logic;                                        --                                       .local_cal_fail
		emif_a10_hps_0_global_reset_reset_sink_reset_n : in    std_logic                     := '0';             -- emif_a10_hps_0_global_reset_reset_sink.reset_n
		hps_0_h2f_reset_reset_n                        : out   std_logic;                                        --                        hps_0_h2f_reset.reset_n
		hps_i2c1_sda_i                                 : in    std_logic                     := '0';             --                               hps_i2c1.sda_i
		hps_i2c1_sda_oe                                : out   std_logic;                                        --                                       .sda_oe
		hps_i2c1_clk_clk                               : out   std_logic;                                        --                           hps_i2c1_clk.clk
		hps_i2c1_scl_in_clk                            : in    std_logic                     := '0';             --                        hps_i2c1_scl_in.clk
		hps_io_hps_io_phery_emac1_TX_CLK               : out   std_logic;                                        --                                 hps_io.hps_io_phery_emac1_TX_CLK
		hps_io_hps_io_phery_emac1_TXD0                 : out   std_logic;                                        --                                       .hps_io_phery_emac1_TXD0
		hps_io_hps_io_phery_emac1_TXD1                 : out   std_logic;                                        --                                       .hps_io_phery_emac1_TXD1
		hps_io_hps_io_phery_emac1_TXD2                 : out   std_logic;                                        --                                       .hps_io_phery_emac1_TXD2
		hps_io_hps_io_phery_emac1_TXD3                 : out   std_logic;                                        --                                       .hps_io_phery_emac1_TXD3
		hps_io_hps_io_phery_emac1_RX_CTL               : in    std_logic                     := '0';             --                                       .hps_io_phery_emac1_RX_CTL
		hps_io_hps_io_phery_emac1_TX_CTL               : out   std_logic;                                        --                                       .hps_io_phery_emac1_TX_CTL
		hps_io_hps_io_phery_emac1_RX_CLK               : in    std_logic                     := '0';             --                                       .hps_io_phery_emac1_RX_CLK
		hps_io_hps_io_phery_emac1_RXD0                 : in    std_logic                     := '0';             --                                       .hps_io_phery_emac1_RXD0
		hps_io_hps_io_phery_emac1_RXD1                 : in    std_logic                     := '0';             --                                       .hps_io_phery_emac1_RXD1
		hps_io_hps_io_phery_emac1_RXD2                 : in    std_logic                     := '0';             --                                       .hps_io_phery_emac1_RXD2
		hps_io_hps_io_phery_emac1_RXD3                 : in    std_logic                     := '0';             --                                       .hps_io_phery_emac1_RXD3
		hps_io_hps_io_phery_emac1_MDIO                 : inout std_logic                     := '0';             --                                       .hps_io_phery_emac1_MDIO
		hps_io_hps_io_phery_emac1_MDC                  : out   std_logic;                                        --                                       .hps_io_phery_emac1_MDC
		hps_io_hps_io_phery_sdmmc_CMD                  : inout std_logic                     := '0';             --                                       .hps_io_phery_sdmmc_CMD
		hps_io_hps_io_phery_sdmmc_D0                   : inout std_logic                     := '0';             --                                       .hps_io_phery_sdmmc_D0
		hps_io_hps_io_phery_sdmmc_D1                   : inout std_logic                     := '0';             --                                       .hps_io_phery_sdmmc_D1
		hps_io_hps_io_phery_sdmmc_D2                   : inout std_logic                     := '0';             --                                       .hps_io_phery_sdmmc_D2
		hps_io_hps_io_phery_sdmmc_D3                   : inout std_logic                     := '0';             --                                       .hps_io_phery_sdmmc_D3
		hps_io_hps_io_phery_sdmmc_CCLK                 : out   std_logic;                                        --                                       .hps_io_phery_sdmmc_CCLK
		hps_io_hps_io_phery_usb1_DATA0                 : inout std_logic                     := '0';             --                                       .hps_io_phery_usb1_DATA0
		hps_io_hps_io_phery_usb1_DATA1                 : inout std_logic                     := '0';             --                                       .hps_io_phery_usb1_DATA1
		hps_io_hps_io_phery_usb1_DATA2                 : inout std_logic                     := '0';             --                                       .hps_io_phery_usb1_DATA2
		hps_io_hps_io_phery_usb1_DATA3                 : inout std_logic                     := '0';             --                                       .hps_io_phery_usb1_DATA3
		hps_io_hps_io_phery_usb1_DATA4                 : inout std_logic                     := '0';             --                                       .hps_io_phery_usb1_DATA4
		hps_io_hps_io_phery_usb1_DATA5                 : inout std_logic                     := '0';             --                                       .hps_io_phery_usb1_DATA5
		hps_io_hps_io_phery_usb1_DATA6                 : inout std_logic                     := '0';             --                                       .hps_io_phery_usb1_DATA6
		hps_io_hps_io_phery_usb1_DATA7                 : inout std_logic                     := '0';             --                                       .hps_io_phery_usb1_DATA7
		hps_io_hps_io_phery_usb1_CLK                   : in    std_logic                     := '0';             --                                       .hps_io_phery_usb1_CLK
		hps_io_hps_io_phery_usb1_STP                   : out   std_logic;                                        --                                       .hps_io_phery_usb1_STP
		hps_io_hps_io_phery_usb1_DIR                   : in    std_logic                     := '0';             --                                       .hps_io_phery_usb1_DIR
		hps_io_hps_io_phery_usb1_NXT                   : in    std_logic                     := '0';             --                                       .hps_io_phery_usb1_NXT
		hps_io_hps_io_phery_uart1_RX                   : in    std_logic                     := '0';             --                                       .hps_io_phery_uart1_RX
		hps_io_hps_io_phery_uart1_TX                   : out   std_logic;                                        --                                       .hps_io_phery_uart1_TX
		hps_io_hps_io_phery_i2c0_SDA                   : inout std_logic                     := '0';             --                                       .hps_io_phery_i2c0_SDA
		hps_io_hps_io_phery_i2c0_SCL                   : inout std_logic                     := '0';             --                                       .hps_io_phery_i2c0_SCL
		hps_io_hps_io_gpio_gpio2_io6                   : inout std_logic                     := '0';             --                                       .hps_io_gpio_gpio2_io6
		hps_io_hps_io_gpio_gpio2_io8                   : inout std_logic                     := '0';             --                                       .hps_io_gpio_gpio2_io8
		hps_io_hps_io_gpio_gpio0_io0                   : inout std_logic                     := '0';             --                                       .hps_io_gpio_gpio0_io0
		hps_io_hps_io_gpio_gpio0_io1                   : inout std_logic                     := '0';             --                                       .hps_io_gpio_gpio0_io1
		hps_io_hps_io_gpio_gpio0_io6                   : inout std_logic                     := '0';             --                                       .hps_io_gpio_gpio0_io6
		hps_io_hps_io_gpio_gpio0_io11                  : inout std_logic                     := '0';             --                                       .hps_io_gpio_gpio0_io11
		hps_io_hps_io_gpio_gpio1_io12                  : inout std_logic                     := '0';             --                                       .hps_io_gpio_gpio1_io12
		hps_io_hps_io_gpio_gpio1_io13                  : inout std_logic                     := '0';             --                                       .hps_io_gpio_gpio1_io13
		hps_io_hps_io_gpio_gpio1_io14                  : inout std_logic                     := '0';             --                                       .hps_io_gpio_gpio1_io14
		hps_io_hps_io_gpio_gpio1_io15                  : inout std_logic                     := '0';             --                                       .hps_io_gpio_gpio1_io15
		hps_io_hps_io_gpio_gpio1_io16                  : inout std_logic                     := '0';             --                                       .hps_io_gpio_gpio1_io16
		hps_io_hps_io_gpio_gpio1_io17                  : inout std_logic                     := '0';             --                                       .hps_io_gpio_gpio1_io17
		hps_io_hps_io_gpio_gpio1_io18                  : inout std_logic                     := '0';             --                                       .hps_io_gpio_gpio1_io18
		hps_io_hps_io_gpio_gpio1_io19                  : inout std_logic                     := '0';             --                                       .hps_io_gpio_gpio1_io19
		hps_io_hps_io_gpio_gpio1_io20                  : inout std_logic                     := '0';             --                                       .hps_io_gpio_gpio1_io20
		hps_io_hps_io_gpio_gpio1_io21                  : inout std_logic                     := '0';             --                                       .hps_io_gpio_gpio1_io21
		hps_io_hps_io_gpio_gpio1_io22                  : inout std_logic                     := '0';             --                                       .hps_io_gpio_gpio1_io22
		hps_io_hps_io_gpio_gpio1_io23                  : inout std_logic                     := '0';             --                                       .hps_io_gpio_gpio1_io23
		hps_spim0_mosi_o                               : out   std_logic;                                        --                              hps_spim0.mosi_o
		hps_spim0_miso_i                               : in    std_logic                     := '0';             --                                       .miso_i
		hps_spim0_ss_in_n                              : in    std_logic                     := '0';             --                                       .ss_in_n
		hps_spim0_mosi_oe                              : out   std_logic;                                        --                                       .mosi_oe
		hps_spim0_ss0_n_o                              : out   std_logic;                                        --                                       .ss0_n_o
		hps_spim0_ss1_n_o                              : out   std_logic;                                        --                                       .ss1_n_o
		hps_spim0_ss2_n_o                              : out   std_logic;                                        --                                       .ss2_n_o
		hps_spim0_ss3_n_o                              : out   std_logic;                                        --                                       .ss3_n_o
		hps_spim0_sclk_out_clk                         : out   std_logic;                                        --                     hps_spim0_sclk_out.clk
		mclk_pll_locked_export                         : out   std_logic;                                        --                        mclk_pll_locked.export
		mem_mem_ck                                     : out   std_logic_vector(0 downto 0);                     --                                    mem.mem_ck
		mem_mem_ck_n                                   : out   std_logic_vector(0 downto 0);                     --                                       .mem_ck_n
		mem_mem_a                                      : out   std_logic_vector(16 downto 0);                    --                                       .mem_a
		mem_mem_act_n                                  : out   std_logic_vector(0 downto 0);                     --                                       .mem_act_n
		mem_mem_ba                                     : out   std_logic_vector(1 downto 0);                     --                                       .mem_ba
		mem_mem_bg                                     : out   std_logic_vector(0 downto 0);                     --                                       .mem_bg
		mem_mem_cke                                    : out   std_logic_vector(0 downto 0);                     --                                       .mem_cke
		mem_mem_cs_n                                   : out   std_logic_vector(0 downto 0);                     --                                       .mem_cs_n
		mem_mem_odt                                    : out   std_logic_vector(0 downto 0);                     --                                       .mem_odt
		mem_mem_reset_n                                : out   std_logic_vector(0 downto 0);                     --                                       .mem_reset_n
		mem_mem_par                                    : out   std_logic_vector(0 downto 0);                     --                                       .mem_par
		mem_mem_alert_n                                : in    std_logic_vector(0 downto 0)  := (others => '0'); --                                       .mem_alert_n
		mem_mem_dqs                                    : inout std_logic_vector(4 downto 0)  := (others => '0'); --                                       .mem_dqs
		mem_mem_dqs_n                                  : inout std_logic_vector(4 downto 0)  := (others => '0'); --                                       .mem_dqs_n
		mem_mem_dq                                     : inout std_logic_vector(39 downto 0) := (others => '0'); --                                       .mem_dq
		mem_mem_dbi_n                                  : inout std_logic_vector(4 downto 0)  := (others => '0'); --                                       .mem_dbi_n
		mic_array0_control_busy_out                    : out   std_logic;                                        --                     mic_array0_control.busy_out
		mic_array0_physical_serial_data_in             : in    std_logic                     := '0';             --                    mic_array0_physical.serial_data_in
		mic_array0_physical_serial_data_out            : out   std_logic;                                        --                                       .serial_data_out
		mic_array0_physical_serial_clk_out             : out   std_logic;                                        --                                       .serial_clk_out
		mic_array10_control_busy_out                   : out   std_logic;                                        --                    mic_array10_control.busy_out
		mic_array10_physical_serial_data_in            : in    std_logic                     := '0';             --                   mic_array10_physical.serial_data_in
		mic_array10_physical_serial_data_out           : out   std_logic;                                        --                                       .serial_data_out
		mic_array10_physical_serial_clk_out            : out   std_logic;                                        --                                       .serial_clk_out
		mic_array11_control_busy_out                   : out   std_logic;                                        --                    mic_array11_control.busy_out
		mic_array11_physical_serial_data_in            : in    std_logic                     := '0';             --                   mic_array11_physical.serial_data_in
		mic_array11_physical_serial_data_out           : out   std_logic;                                        --                                       .serial_data_out
		mic_array11_physical_serial_clk_out            : out   std_logic;                                        --                                       .serial_clk_out
		mic_array12_control_busy_out                   : out   std_logic;                                        --                    mic_array12_control.busy_out
		mic_array12_physical_serial_data_in            : in    std_logic                     := '0';             --                   mic_array12_physical.serial_data_in
		mic_array12_physical_serial_data_out           : out   std_logic;                                        --                                       .serial_data_out
		mic_array12_physical_serial_clk_out            : out   std_logic;                                        --                                       .serial_clk_out
		mic_array13_control_busy_out                   : out   std_logic;                                        --                    mic_array13_control.busy_out
		mic_array13_physical_serial_data_in            : in    std_logic                     := '0';             --                   mic_array13_physical.serial_data_in
		mic_array13_physical_serial_data_out           : out   std_logic;                                        --                                       .serial_data_out
		mic_array13_physical_serial_clk_out            : out   std_logic;                                        --                                       .serial_clk_out
		mic_array14_control_busy_out                   : out   std_logic;                                        --                    mic_array14_control.busy_out
		mic_array14_physical_serial_data_in            : in    std_logic                     := '0';             --                   mic_array14_physical.serial_data_in
		mic_array14_physical_serial_data_out           : out   std_logic;                                        --                                       .serial_data_out
		mic_array14_physical_serial_clk_out            : out   std_logic;                                        --                                       .serial_clk_out
		mic_array15_control_busy_out                   : out   std_logic;                                        --                    mic_array15_control.busy_out
		mic_array15_physical_serial_data_in            : in    std_logic                     := '0';             --                   mic_array15_physical.serial_data_in
		mic_array15_physical_serial_data_out           : out   std_logic;                                        --                                       .serial_data_out
		mic_array15_physical_serial_clk_out            : out   std_logic;                                        --                                       .serial_clk_out
		mic_array1_control_busy_out                    : out   std_logic;                                        --                     mic_array1_control.busy_out
		mic_array1_physical_serial_data_in             : in    std_logic                     := '0';             --                    mic_array1_physical.serial_data_in
		mic_array1_physical_serial_data_out            : out   std_logic;                                        --                                       .serial_data_out
		mic_array1_physical_serial_clk_out             : out   std_logic;                                        --                                       .serial_clk_out
		mic_array2_control_busy_out                    : out   std_logic;                                        --                     mic_array2_control.busy_out
		mic_array2_physical_serial_data_in             : in    std_logic                     := '0';             --                    mic_array2_physical.serial_data_in
		mic_array2_physical_serial_data_out            : out   std_logic;                                        --                                       .serial_data_out
		mic_array2_physical_serial_clk_out             : out   std_logic;                                        --                                       .serial_clk_out
		mic_array3_control_busy_out                    : out   std_logic;                                        --                     mic_array3_control.busy_out
		mic_array3_physical_serial_data_in             : in    std_logic                     := '0';             --                    mic_array3_physical.serial_data_in
		mic_array3_physical_serial_data_out            : out   std_logic;                                        --                                       .serial_data_out
		mic_array3_physical_serial_clk_out             : out   std_logic;                                        --                                       .serial_clk_out
		mic_array4_control_busy_out                    : out   std_logic;                                        --                     mic_array4_control.busy_out
		mic_array4_physical_serial_data_in             : in    std_logic                     := '0';             --                    mic_array4_physical.serial_data_in
		mic_array4_physical_serial_data_out            : out   std_logic;                                        --                                       .serial_data_out
		mic_array4_physical_serial_clk_out             : out   std_logic;                                        --                                       .serial_clk_out
		mic_array5_control_busy_out                    : out   std_logic;                                        --                     mic_array5_control.busy_out
		mic_array5_physical_serial_data_in             : in    std_logic                     := '0';             --                    mic_array5_physical.serial_data_in
		mic_array5_physical_serial_data_out            : out   std_logic;                                        --                                       .serial_data_out
		mic_array5_physical_serial_clk_out             : out   std_logic;                                        --                                       .serial_clk_out
		mic_array6_physical_serial_data_in             : in    std_logic                     := '0';             --                    mic_array6_physical.serial_data_in
		mic_array6_physical_serial_data_out            : out   std_logic;                                        --                                       .serial_data_out
		mic_array6_physical_serial_clk_out             : out   std_logic;                                        --                                       .serial_clk_out
		mic_array6_physical_1_busy_out                 : out   std_logic;                                        --                  mic_array6_physical_1.busy_out
		mic_array7_control_busy_out                    : out   std_logic;                                        --                     mic_array7_control.busy_out
		mic_array7_physical_serial_data_in             : in    std_logic                     := '0';             --                    mic_array7_physical.serial_data_in
		mic_array7_physical_serial_data_out            : out   std_logic;                                        --                                       .serial_data_out
		mic_array7_physical_serial_clk_out             : out   std_logic;                                        --                                       .serial_clk_out
		mic_array8_control_busy_out                    : out   std_logic;                                        --                     mic_array8_control.busy_out
		mic_array8_physical_serial_data_in             : in    std_logic                     := '0';             --                    mic_array8_physical.serial_data_in
		mic_array8_physical_serial_data_out            : out   std_logic;                                        --                                       .serial_data_out
		mic_array8_physical_serial_clk_out             : out   std_logic;                                        --                                       .serial_clk_out
		mic_array9_control_busy_out                    : out   std_logic;                                        --                     mic_array9_control.busy_out
		mic_array9_physical_serial_data_in             : in    std_logic                     := '0';             --                    mic_array9_physical.serial_data_in
		mic_array9_physical_serial_data_out            : out   std_logic;                                        --                                       .serial_data_out
		mic_array9_physical_serial_clk_out             : out   std_logic;                                        --                                       .serial_clk_out
		oct_oct_rzqin                                  : in    std_logic                     := '0';             --                                    oct.oct_rzqin
		reset_reset_n                                  : in    std_logic                     := '0';             --                                  reset.reset_n
		som_config_pio_export                          : inout std_logic_vector(1 downto 0)  := (others => '0')  --                         som_config_pio.export
	);
end entity som_system;

architecture rtl of som_system is
	component som_system_rst_controller is
		generic (
			NUM_RESET_INPUTS          : integer := 6;
			OUTPUT_RESET_SYNC_EDGES   : string  := "deassert";
			SYNC_DEPTH                : integer := 2;
			RESET_REQUEST_PRESENT     : integer := 0;
			RESET_REQ_WAIT_TIME       : integer := 1;
			MIN_RST_ASSERTION_TIME    : integer := 3;
			RESET_REQ_EARLY_DSRT_TIME : integer := 1;
			USE_RESET_REQUEST_IN0     : integer := 0;
			USE_RESET_REQUEST_IN1     : integer := 0;
			USE_RESET_REQUEST_IN2     : integer := 0;
			USE_RESET_REQUEST_IN3     : integer := 0;
			USE_RESET_REQUEST_IN4     : integer := 0;
			USE_RESET_REQUEST_IN5     : integer := 0;
			USE_RESET_REQUEST_IN6     : integer := 0;
			USE_RESET_REQUEST_IN7     : integer := 0;
			USE_RESET_REQUEST_IN8     : integer := 0;
			USE_RESET_REQUEST_IN9     : integer := 0;
			USE_RESET_REQUEST_IN10    : integer := 0;
			USE_RESET_REQUEST_IN11    : integer := 0;
			USE_RESET_REQUEST_IN12    : integer := 0;
			USE_RESET_REQUEST_IN13    : integer := 0;
			USE_RESET_REQUEST_IN14    : integer := 0;
			USE_RESET_REQUEST_IN15    : integer := 0;
			ADAPT_RESET_REQUEST       : integer := 0
		);
		port (
			reset_in0      : in  std_logic := 'X'; -- reset_in0.reset
			clk            : in  std_logic := 'X'; --       clk.clk
			reset_out      : out std_logic;        -- reset_out.reset
			reset_in1      : in  std_logic := 'X';
			reset_in10     : in  std_logic := 'X';
			reset_in11     : in  std_logic := 'X';
			reset_in12     : in  std_logic := 'X';
			reset_in13     : in  std_logic := 'X';
			reset_in14     : in  std_logic := 'X';
			reset_in15     : in  std_logic := 'X';
			reset_in2      : in  std_logic := 'X';
			reset_in3      : in  std_logic := 'X';
			reset_in4      : in  std_logic := 'X';
			reset_in5      : in  std_logic := 'X';
			reset_in6      : in  std_logic := 'X';
			reset_in7      : in  std_logic := 'X';
			reset_in8      : in  std_logic := 'X';
			reset_in9      : in  std_logic := 'X';
			reset_req      : out std_logic;
			reset_req_in0  : in  std_logic := 'X';
			reset_req_in1  : in  std_logic := 'X';
			reset_req_in10 : in  std_logic := 'X';
			reset_req_in11 : in  std_logic := 'X';
			reset_req_in12 : in  std_logic := 'X';
			reset_req_in13 : in  std_logic := 'X';
			reset_req_in14 : in  std_logic := 'X';
			reset_req_in15 : in  std_logic := 'X';
			reset_req_in2  : in  std_logic := 'X';
			reset_req_in3  : in  std_logic := 'X';
			reset_req_in4  : in  std_logic := 'X';
			reset_req_in5  : in  std_logic := 'X';
			reset_req_in6  : in  std_logic := 'X';
			reset_req_in7  : in  std_logic := 'X';
			reset_req_in8  : in  std_logic := 'X';
			reset_req_in9  : in  std_logic := 'X'
		);
	end component som_system_rst_controller;

	component som_system_rst_controller_002 is
		generic (
			NUM_RESET_INPUTS          : integer := 6;
			OUTPUT_RESET_SYNC_EDGES   : string  := "deassert";
			SYNC_DEPTH                : integer := 2;
			RESET_REQUEST_PRESENT     : integer := 0;
			RESET_REQ_WAIT_TIME       : integer := 1;
			MIN_RST_ASSERTION_TIME    : integer := 3;
			RESET_REQ_EARLY_DSRT_TIME : integer := 1;
			USE_RESET_REQUEST_IN0     : integer := 0;
			USE_RESET_REQUEST_IN1     : integer := 0;
			USE_RESET_REQUEST_IN2     : integer := 0;
			USE_RESET_REQUEST_IN3     : integer := 0;
			USE_RESET_REQUEST_IN4     : integer := 0;
			USE_RESET_REQUEST_IN5     : integer := 0;
			USE_RESET_REQUEST_IN6     : integer := 0;
			USE_RESET_REQUEST_IN7     : integer := 0;
			USE_RESET_REQUEST_IN8     : integer := 0;
			USE_RESET_REQUEST_IN9     : integer := 0;
			USE_RESET_REQUEST_IN10    : integer := 0;
			USE_RESET_REQUEST_IN11    : integer := 0;
			USE_RESET_REQUEST_IN12    : integer := 0;
			USE_RESET_REQUEST_IN13    : integer := 0;
			USE_RESET_REQUEST_IN14    : integer := 0;
			USE_RESET_REQUEST_IN15    : integer := 0;
			ADAPT_RESET_REQUEST       : integer := 0
		);
		port (
			reset_in0      : in  std_logic := 'X'; -- reset_in0.reset
			reset_in1      : in  std_logic := 'X'; -- reset_in1.reset
			clk            : in  std_logic := 'X'; --       clk.clk
			reset_out      : out std_logic;        -- reset_out.reset
			reset_in10     : in  std_logic := 'X';
			reset_in11     : in  std_logic := 'X';
			reset_in12     : in  std_logic := 'X';
			reset_in13     : in  std_logic := 'X';
			reset_in14     : in  std_logic := 'X';
			reset_in15     : in  std_logic := 'X';
			reset_in2      : in  std_logic := 'X';
			reset_in3      : in  std_logic := 'X';
			reset_in4      : in  std_logic := 'X';
			reset_in5      : in  std_logic := 'X';
			reset_in6      : in  std_logic := 'X';
			reset_in7      : in  std_logic := 'X';
			reset_in8      : in  std_logic := 'X';
			reset_in9      : in  std_logic := 'X';
			reset_req      : out std_logic;
			reset_req_in0  : in  std_logic := 'X';
			reset_req_in1  : in  std_logic := 'X';
			reset_req_in10 : in  std_logic := 'X';
			reset_req_in11 : in  std_logic := 'X';
			reset_req_in12 : in  std_logic := 'X';
			reset_req_in13 : in  std_logic := 'X';
			reset_req_in14 : in  std_logic := 'X';
			reset_req_in15 : in  std_logic := 'X';
			reset_req_in2  : in  std_logic := 'X';
			reset_req_in3  : in  std_logic := 'X';
			reset_req_in4  : in  std_logic := 'X';
			reset_req_in5  : in  std_logic := 'X';
			reset_req_in6  : in  std_logic := 'X';
			reset_req_in7  : in  std_logic := 'X';
			reset_req_in8  : in  std_logic := 'X';
			reset_req_in9  : in  std_logic := 'X'
		);
	end component som_system_rst_controller_002;

	signal emif_0_emif_usr_clk_clk                                       : std_logic;                       -- emif_0:emif_usr_clk -> [mm_clock_crossing_bridge_0:m0_clk, mm_interconnect_3:emif_0_emif_usr_clk_clk, rst_controller_003:clk]
	signal pll_using_ad1939_mclk_outclk0_clk                             : std_logic;                       -- pll_using_AD1939_MCLK:outclk_0 -> [FE_AD4020_Left:sys_clk, FE_AD4020_Right:sys_clk, FE_AD5791_v1_Left:sys_clk, FE_AD5791_v1_Right:sys_clk, FE_AD7768_v1_0:sys_clk, FE_FPGA_Microphone_Encoder_Decoder_0:sys_clk, FE_FPGA_Microphone_Encoder_Decoder_10:sys_clk, FE_FPGA_Microphone_Encoder_Decoder_11:sys_clk, FE_FPGA_Microphone_Encoder_Decoder_12:sys_clk, FE_FPGA_Microphone_Encoder_Decoder_13:sys_clk, FE_FPGA_Microphone_Encoder_Decoder_15:sys_clk, FE_FPGA_Microphone_Encoder_Decoder_1:sys_clk, FE_FPGA_Microphone_Encoder_Decoder_2:sys_clk, FE_FPGA_Microphone_Encoder_Decoder_3:sys_clk, FE_FPGA_Microphone_Encoder_Decoder_4:sys_clk, FE_FPGA_Microphone_Encoder_Decoder_5:sys_clk, FE_FPGA_Microphone_Encoder_Decoder_6:sys_clk, FE_FPGA_Microphone_Encoder_Decoder_7:sys_clk, FE_FPGA_Microphone_Encoder_Decoder_8:sys_clk, FE_FPGA_Microphone_Encoder_Decoder_9:sys_clk, FE_Qsys_AD1939_Audio_Blade_v1_0:sys_clk, avalon_st_adapter:in_clk_0_clk, avalon_st_adapter_001:in_clk_0_clk, avalon_st_adapter_002:in_clk_0_clk, avalon_st_adapter_003:in_clk_0_clk, rst_controller:clk]
	signal pll_using_ad1939_mclk_outclk1_clk                             : std_logic;                       -- pll_using_AD1939_MCLK:outclk_1 -> [FE_AD5791_v1_Left:spi_clk, FE_AD5791_v1_Right:spi_clk]
	signal pll_using_ad1939_mclk_outclk2_clk                             : std_logic;                       -- pll_using_AD1939_MCLK:outclk_2 -> [FE_AD5791_v1_Left:double_spi_clk_in, FE_AD5791_v1_Right:double_spi_clk_in]
	signal pll_using_ad1939_mclk_outclk3_clk                             : std_logic;                       -- pll_using_AD1939_MCLK:outclk_3 -> [FE_FPGA_Microphone_Encoder_Decoder_0:serial_clk, FE_FPGA_Microphone_Encoder_Decoder_10:serial_clk, FE_FPGA_Microphone_Encoder_Decoder_11:serial_clk, FE_FPGA_Microphone_Encoder_Decoder_12:serial_clk, FE_FPGA_Microphone_Encoder_Decoder_13:serial_clk, FE_FPGA_Microphone_Encoder_Decoder_14:serial_clk, FE_FPGA_Microphone_Encoder_Decoder_15:serial_clk, FE_FPGA_Microphone_Encoder_Decoder_1:serial_clk, FE_FPGA_Microphone_Encoder_Decoder_2:serial_clk, FE_FPGA_Microphone_Encoder_Decoder_3:serial_clk, FE_FPGA_Microphone_Encoder_Decoder_4:serial_clk, FE_FPGA_Microphone_Encoder_Decoder_5:serial_clk, FE_FPGA_Microphone_Encoder_Decoder_6:serial_clk, FE_FPGA_Microphone_Encoder_Decoder_7:serial_clk, FE_FPGA_Microphone_Encoder_Decoder_8:serial_clk, FE_FPGA_Microphone_Encoder_Decoder_9:serial_clk]
	signal pll_using_ad1939_mclk_outclk4_clk                             : std_logic;                       -- pll_using_AD1939_MCLK:outclk_4 -> [FE_AD4020_Left:spi_clk, FE_AD4020_Right:spi_clk]
	signal arria10_hps_0_emif_gp_to_emif                                 : std_logic_vector(1 downto 0);    -- arria10_hps_0:emif_gp_to_emif -> emif_a10_hps_0:hps_to_emif_gp
	signal emif_a10_hps_0_hps_emif_conduit_end_emif_to_hps               : std_logic_vector(4095 downto 0); -- emif_a10_hps_0:emif_to_hps -> arria10_hps_0:emif_emif_to_hps
	signal emif_a10_hps_0_hps_emif_conduit_end_emif_to_gp                : std_logic_vector(0 downto 0);    -- emif_a10_hps_0:emif_to_hps_gp -> arria10_hps_0:emif_emif_to_gp
	signal arria10_hps_0_emif_hps_to_emif                                : std_logic_vector(4095 downto 0); -- arria10_hps_0:emif_hps_to_emif -> emif_a10_hps_0:hps_to_emif
	signal mux_ddr_0_altera_axi_master_awburst                           : std_logic_vector(1 downto 0);    -- mux_ddr_0:hps_master_awburst -> mm_interconnect_0:mux_ddr_0_altera_axi_master_awburst
	signal mux_ddr_0_altera_axi_master_arlen                             : std_logic_vector(3 downto 0);    -- mux_ddr_0:hps_master_arlen -> mm_interconnect_0:mux_ddr_0_altera_axi_master_arlen
	signal mux_ddr_0_altera_axi_master_awuser                            : std_logic_vector(4 downto 0);    -- mux_ddr_0:hps_master_awuser -> mm_interconnect_0:mux_ddr_0_altera_axi_master_awuser
	signal mux_ddr_0_altera_axi_master_wready                            : std_logic;                       -- mm_interconnect_0:mux_ddr_0_altera_axi_master_wready -> mux_ddr_0:hps_master_wready
	signal mux_ddr_0_altera_axi_master_wstrb                             : std_logic_vector(3 downto 0);    -- mux_ddr_0:hps_master_wstrb -> mm_interconnect_0:mux_ddr_0_altera_axi_master_wstrb
	signal mux_ddr_0_altera_axi_master_rid                               : std_logic_vector(3 downto 0);    -- mm_interconnect_0:mux_ddr_0_altera_axi_master_rid -> mux_ddr_0:hps_master_rid
	signal mux_ddr_0_altera_axi_master_rready                            : std_logic;                       -- mux_ddr_0:hps_master_rready -> mm_interconnect_0:mux_ddr_0_altera_axi_master_rready
	signal mux_ddr_0_altera_axi_master_awlen                             : std_logic_vector(3 downto 0);    -- mux_ddr_0:hps_master_awlen -> mm_interconnect_0:mux_ddr_0_altera_axi_master_awlen
	signal mux_ddr_0_altera_axi_master_wid                               : std_logic_vector(3 downto 0);    -- mux_ddr_0:hps_master_wid -> mm_interconnect_0:mux_ddr_0_altera_axi_master_wid
	signal mux_ddr_0_altera_axi_master_arcache                           : std_logic_vector(3 downto 0);    -- mux_ddr_0:hps_master_arcache -> mm_interconnect_0:mux_ddr_0_altera_axi_master_arcache
	signal mux_ddr_0_altera_axi_master_araddr                            : std_logic_vector(31 downto 0);   -- mux_ddr_0:hps_master_araddr -> mm_interconnect_0:mux_ddr_0_altera_axi_master_araddr
	signal mux_ddr_0_altera_axi_master_wvalid                            : std_logic;                       -- mux_ddr_0:hps_master_wvalid -> mm_interconnect_0:mux_ddr_0_altera_axi_master_wvalid
	signal mux_ddr_0_altera_axi_master_arprot                            : std_logic_vector(2 downto 0);    -- mux_ddr_0:hps_master_arprot -> mm_interconnect_0:mux_ddr_0_altera_axi_master_arprot
	signal mux_ddr_0_altera_axi_master_arvalid                           : std_logic;                       -- mux_ddr_0:hps_master_arvalid -> mm_interconnect_0:mux_ddr_0_altera_axi_master_arvalid
	signal mux_ddr_0_altera_axi_master_awprot                            : std_logic_vector(2 downto 0);    -- mux_ddr_0:hps_master_awprot -> mm_interconnect_0:mux_ddr_0_altera_axi_master_awprot
	signal mux_ddr_0_altera_axi_master_wdata                             : std_logic_vector(31 downto 0);   -- mux_ddr_0:hps_master_wdata -> mm_interconnect_0:mux_ddr_0_altera_axi_master_wdata
	signal mux_ddr_0_altera_axi_master_arid                              : std_logic_vector(3 downto 0);    -- mux_ddr_0:hps_master_arid -> mm_interconnect_0:mux_ddr_0_altera_axi_master_arid
	signal mux_ddr_0_altera_axi_master_awcache                           : std_logic_vector(3 downto 0);    -- mux_ddr_0:hps_master_awcache -> mm_interconnect_0:mux_ddr_0_altera_axi_master_awcache
	signal mux_ddr_0_altera_axi_master_arlock                            : std_logic_vector(1 downto 0);    -- mux_ddr_0:hps_master_arlock -> mm_interconnect_0:mux_ddr_0_altera_axi_master_arlock
	signal mux_ddr_0_altera_axi_master_awlock                            : std_logic_vector(1 downto 0);    -- mux_ddr_0:hps_master_awlock -> mm_interconnect_0:mux_ddr_0_altera_axi_master_awlock
	signal mux_ddr_0_altera_axi_master_awaddr                            : std_logic_vector(31 downto 0);   -- mux_ddr_0:hps_master_awaddr -> mm_interconnect_0:mux_ddr_0_altera_axi_master_awaddr
	signal mux_ddr_0_altera_axi_master_arready                           : std_logic;                       -- mm_interconnect_0:mux_ddr_0_altera_axi_master_arready -> mux_ddr_0:hps_master_arready
	signal mux_ddr_0_altera_axi_master_bresp                             : std_logic_vector(1 downto 0);    -- mm_interconnect_0:mux_ddr_0_altera_axi_master_bresp -> mux_ddr_0:hps_master_bresp
	signal mux_ddr_0_altera_axi_master_rdata                             : std_logic_vector(31 downto 0);   -- mm_interconnect_0:mux_ddr_0_altera_axi_master_rdata -> mux_ddr_0:hps_master_rdata
	signal mux_ddr_0_altera_axi_master_arburst                           : std_logic_vector(1 downto 0);    -- mux_ddr_0:hps_master_arburst -> mm_interconnect_0:mux_ddr_0_altera_axi_master_arburst
	signal mux_ddr_0_altera_axi_master_awready                           : std_logic;                       -- mm_interconnect_0:mux_ddr_0_altera_axi_master_awready -> mux_ddr_0:hps_master_awready
	signal mux_ddr_0_altera_axi_master_arsize                            : std_logic_vector(2 downto 0);    -- mux_ddr_0:hps_master_arsize -> mm_interconnect_0:mux_ddr_0_altera_axi_master_arsize
	signal mux_ddr_0_altera_axi_master_bready                            : std_logic;                       -- mux_ddr_0:hps_master_bready -> mm_interconnect_0:mux_ddr_0_altera_axi_master_bready
	signal mux_ddr_0_altera_axi_master_rlast                             : std_logic;                       -- mm_interconnect_0:mux_ddr_0_altera_axi_master_rlast -> mux_ddr_0:hps_master_rlast
	signal mux_ddr_0_altera_axi_master_wlast                             : std_logic;                       -- mux_ddr_0:hps_master_wlast -> mm_interconnect_0:mux_ddr_0_altera_axi_master_wlast
	signal mux_ddr_0_altera_axi_master_rresp                             : std_logic_vector(1 downto 0);    -- mm_interconnect_0:mux_ddr_0_altera_axi_master_rresp -> mux_ddr_0:hps_master_rresp
	signal mux_ddr_0_altera_axi_master_awid                              : std_logic_vector(3 downto 0);    -- mux_ddr_0:hps_master_awid -> mm_interconnect_0:mux_ddr_0_altera_axi_master_awid
	signal mux_ddr_0_altera_axi_master_bid                               : std_logic_vector(3 downto 0);    -- mm_interconnect_0:mux_ddr_0_altera_axi_master_bid -> mux_ddr_0:hps_master_bid
	signal mux_ddr_0_altera_axi_master_bvalid                            : std_logic;                       -- mm_interconnect_0:mux_ddr_0_altera_axi_master_bvalid -> mux_ddr_0:hps_master_bvalid
	signal mux_ddr_0_altera_axi_master_aruser                            : std_logic_vector(4 downto 0);    -- mux_ddr_0:hps_master_aruser -> mm_interconnect_0:mux_ddr_0_altera_axi_master_aruser
	signal mux_ddr_0_altera_axi_master_awsize                            : std_logic_vector(2 downto 0);    -- mux_ddr_0:hps_master_awsize -> mm_interconnect_0:mux_ddr_0_altera_axi_master_awsize
	signal mux_ddr_0_altera_axi_master_awvalid                           : std_logic;                       -- mux_ddr_0:hps_master_awvalid -> mm_interconnect_0:mux_ddr_0_altera_axi_master_awvalid
	signal mux_ddr_0_altera_axi_master_rvalid                            : std_logic;                       -- mm_interconnect_0:mux_ddr_0_altera_axi_master_rvalid -> mux_ddr_0:hps_master_rvalid
	signal mm_interconnect_0_mm_clock_crossing_bridge_0_s0_readdata      : std_logic_vector(511 downto 0);  -- mm_clock_crossing_bridge_0:s0_readdata -> mm_interconnect_0:mm_clock_crossing_bridge_0_s0_readdata
	signal mm_interconnect_0_mm_clock_crossing_bridge_0_s0_waitrequest   : std_logic;                       -- mm_clock_crossing_bridge_0:s0_waitrequest -> mm_interconnect_0:mm_clock_crossing_bridge_0_s0_waitrequest
	signal mm_interconnect_0_mm_clock_crossing_bridge_0_s0_debugaccess   : std_logic;                       -- mm_interconnect_0:mm_clock_crossing_bridge_0_s0_debugaccess -> mm_clock_crossing_bridge_0:s0_debugaccess
	signal mm_interconnect_0_mm_clock_crossing_bridge_0_s0_address       : std_logic_vector(31 downto 0);   -- mm_interconnect_0:mm_clock_crossing_bridge_0_s0_address -> mm_clock_crossing_bridge_0:s0_address
	signal mm_interconnect_0_mm_clock_crossing_bridge_0_s0_read          : std_logic;                       -- mm_interconnect_0:mm_clock_crossing_bridge_0_s0_read -> mm_clock_crossing_bridge_0:s0_read
	signal mm_interconnect_0_mm_clock_crossing_bridge_0_s0_byteenable    : std_logic_vector(63 downto 0);   -- mm_interconnect_0:mm_clock_crossing_bridge_0_s0_byteenable -> mm_clock_crossing_bridge_0:s0_byteenable
	signal mm_interconnect_0_mm_clock_crossing_bridge_0_s0_readdatavalid : std_logic;                       -- mm_clock_crossing_bridge_0:s0_readdatavalid -> mm_interconnect_0:mm_clock_crossing_bridge_0_s0_readdatavalid
	signal mm_interconnect_0_mm_clock_crossing_bridge_0_s0_write         : std_logic;                       -- mm_interconnect_0:mm_clock_crossing_bridge_0_s0_write -> mm_clock_crossing_bridge_0:s0_write
	signal mm_interconnect_0_mm_clock_crossing_bridge_0_s0_writedata     : std_logic_vector(511 downto 0);  -- mm_interconnect_0:mm_clock_crossing_bridge_0_s0_writedata -> mm_clock_crossing_bridge_0:s0_writedata
	signal mm_interconnect_0_mm_clock_crossing_bridge_0_s0_burstcount    : std_logic_vector(6 downto 0);    -- mm_interconnect_0:mm_clock_crossing_bridge_0_s0_burstcount -> mm_clock_crossing_bridge_0:s0_burstcount
	signal arria10_hps_0_h2f_axi_master_awburst                          : std_logic_vector(1 downto 0);    -- arria10_hps_0:h2f_AWBURST -> mm_interconnect_1:arria10_hps_0_h2f_axi_master_awburst
	signal arria10_hps_0_h2f_axi_master_awuser                           : std_logic_vector(4 downto 0);    -- arria10_hps_0:h2f_AWUSER -> mm_interconnect_1:arria10_hps_0_h2f_axi_master_awuser
	signal arria10_hps_0_h2f_axi_master_arlen                            : std_logic_vector(3 downto 0);    -- arria10_hps_0:h2f_ARLEN -> mm_interconnect_1:arria10_hps_0_h2f_axi_master_arlen
	signal arria10_hps_0_h2f_axi_master_wstrb                            : std_logic_vector(15 downto 0);   -- arria10_hps_0:h2f_WSTRB -> mm_interconnect_1:arria10_hps_0_h2f_axi_master_wstrb
	signal arria10_hps_0_h2f_axi_master_wready                           : std_logic;                       -- mm_interconnect_1:arria10_hps_0_h2f_axi_master_wready -> arria10_hps_0:h2f_WREADY
	signal arria10_hps_0_h2f_axi_master_rid                              : std_logic_vector(3 downto 0);    -- mm_interconnect_1:arria10_hps_0_h2f_axi_master_rid -> arria10_hps_0:h2f_RID
	signal arria10_hps_0_h2f_axi_master_rready                           : std_logic;                       -- arria10_hps_0:h2f_RREADY -> mm_interconnect_1:arria10_hps_0_h2f_axi_master_rready
	signal arria10_hps_0_h2f_axi_master_awlen                            : std_logic_vector(3 downto 0);    -- arria10_hps_0:h2f_AWLEN -> mm_interconnect_1:arria10_hps_0_h2f_axi_master_awlen
	signal arria10_hps_0_h2f_axi_master_wid                              : std_logic_vector(3 downto 0);    -- arria10_hps_0:h2f_WID -> mm_interconnect_1:arria10_hps_0_h2f_axi_master_wid
	signal arria10_hps_0_h2f_axi_master_arcache                          : std_logic_vector(3 downto 0);    -- arria10_hps_0:h2f_ARCACHE -> mm_interconnect_1:arria10_hps_0_h2f_axi_master_arcache
	signal arria10_hps_0_h2f_axi_master_wvalid                           : std_logic;                       -- arria10_hps_0:h2f_WVALID -> mm_interconnect_1:arria10_hps_0_h2f_axi_master_wvalid
	signal arria10_hps_0_h2f_axi_master_araddr                           : std_logic_vector(31 downto 0);   -- arria10_hps_0:h2f_ARADDR -> mm_interconnect_1:arria10_hps_0_h2f_axi_master_araddr
	signal arria10_hps_0_h2f_axi_master_arprot                           : std_logic_vector(2 downto 0);    -- arria10_hps_0:h2f_ARPROT -> mm_interconnect_1:arria10_hps_0_h2f_axi_master_arprot
	signal arria10_hps_0_h2f_axi_master_awprot                           : std_logic_vector(2 downto 0);    -- arria10_hps_0:h2f_AWPROT -> mm_interconnect_1:arria10_hps_0_h2f_axi_master_awprot
	signal arria10_hps_0_h2f_axi_master_wdata                            : std_logic_vector(127 downto 0);  -- arria10_hps_0:h2f_WDATA -> mm_interconnect_1:arria10_hps_0_h2f_axi_master_wdata
	signal arria10_hps_0_h2f_axi_master_arvalid                          : std_logic;                       -- arria10_hps_0:h2f_ARVALID -> mm_interconnect_1:arria10_hps_0_h2f_axi_master_arvalid
	signal arria10_hps_0_h2f_axi_master_awcache                          : std_logic_vector(3 downto 0);    -- arria10_hps_0:h2f_AWCACHE -> mm_interconnect_1:arria10_hps_0_h2f_axi_master_awcache
	signal arria10_hps_0_h2f_axi_master_arid                             : std_logic_vector(3 downto 0);    -- arria10_hps_0:h2f_ARID -> mm_interconnect_1:arria10_hps_0_h2f_axi_master_arid
	signal arria10_hps_0_h2f_axi_master_arlock                           : std_logic_vector(1 downto 0);    -- arria10_hps_0:h2f_ARLOCK -> mm_interconnect_1:arria10_hps_0_h2f_axi_master_arlock
	signal arria10_hps_0_h2f_axi_master_awlock                           : std_logic_vector(1 downto 0);    -- arria10_hps_0:h2f_AWLOCK -> mm_interconnect_1:arria10_hps_0_h2f_axi_master_awlock
	signal arria10_hps_0_h2f_axi_master_awaddr                           : std_logic_vector(31 downto 0);   -- arria10_hps_0:h2f_AWADDR -> mm_interconnect_1:arria10_hps_0_h2f_axi_master_awaddr
	signal arria10_hps_0_h2f_axi_master_bresp                            : std_logic_vector(1 downto 0);    -- mm_interconnect_1:arria10_hps_0_h2f_axi_master_bresp -> arria10_hps_0:h2f_BRESP
	signal arria10_hps_0_h2f_axi_master_arready                          : std_logic;                       -- mm_interconnect_1:arria10_hps_0_h2f_axi_master_arready -> arria10_hps_0:h2f_ARREADY
	signal arria10_hps_0_h2f_axi_master_rdata                            : std_logic_vector(127 downto 0);  -- mm_interconnect_1:arria10_hps_0_h2f_axi_master_rdata -> arria10_hps_0:h2f_RDATA
	signal arria10_hps_0_h2f_axi_master_awready                          : std_logic;                       -- mm_interconnect_1:arria10_hps_0_h2f_axi_master_awready -> arria10_hps_0:h2f_AWREADY
	signal arria10_hps_0_h2f_axi_master_arburst                          : std_logic_vector(1 downto 0);    -- arria10_hps_0:h2f_ARBURST -> mm_interconnect_1:arria10_hps_0_h2f_axi_master_arburst
	signal arria10_hps_0_h2f_axi_master_arsize                           : std_logic_vector(2 downto 0);    -- arria10_hps_0:h2f_ARSIZE -> mm_interconnect_1:arria10_hps_0_h2f_axi_master_arsize
	signal arria10_hps_0_h2f_axi_master_bready                           : std_logic;                       -- arria10_hps_0:h2f_BREADY -> mm_interconnect_1:arria10_hps_0_h2f_axi_master_bready
	signal arria10_hps_0_h2f_axi_master_rlast                            : std_logic;                       -- mm_interconnect_1:arria10_hps_0_h2f_axi_master_rlast -> arria10_hps_0:h2f_RLAST
	signal arria10_hps_0_h2f_axi_master_wlast                            : std_logic;                       -- arria10_hps_0:h2f_WLAST -> mm_interconnect_1:arria10_hps_0_h2f_axi_master_wlast
	signal arria10_hps_0_h2f_axi_master_rresp                            : std_logic_vector(1 downto 0);    -- mm_interconnect_1:arria10_hps_0_h2f_axi_master_rresp -> arria10_hps_0:h2f_RRESP
	signal arria10_hps_0_h2f_axi_master_awid                             : std_logic_vector(3 downto 0);    -- arria10_hps_0:h2f_AWID -> mm_interconnect_1:arria10_hps_0_h2f_axi_master_awid
	signal arria10_hps_0_h2f_axi_master_bid                              : std_logic_vector(3 downto 0);    -- mm_interconnect_1:arria10_hps_0_h2f_axi_master_bid -> arria10_hps_0:h2f_BID
	signal arria10_hps_0_h2f_axi_master_bvalid                           : std_logic;                       -- mm_interconnect_1:arria10_hps_0_h2f_axi_master_bvalid -> arria10_hps_0:h2f_BVALID
	signal arria10_hps_0_h2f_axi_master_awsize                           : std_logic_vector(2 downto 0);    -- arria10_hps_0:h2f_AWSIZE -> mm_interconnect_1:arria10_hps_0_h2f_axi_master_awsize
	signal arria10_hps_0_h2f_axi_master_awvalid                          : std_logic;                       -- arria10_hps_0:h2f_AWVALID -> mm_interconnect_1:arria10_hps_0_h2f_axi_master_awvalid
	signal arria10_hps_0_h2f_axi_master_aruser                           : std_logic_vector(4 downto 0);    -- arria10_hps_0:h2f_ARUSER -> mm_interconnect_1:arria10_hps_0_h2f_axi_master_aruser
	signal arria10_hps_0_h2f_axi_master_rvalid                           : std_logic;                       -- mm_interconnect_1:arria10_hps_0_h2f_axi_master_rvalid -> arria10_hps_0:h2f_RVALID
	signal mm_interconnect_1_mux_ddr_0_altera_axi_slave_awburst          : std_logic_vector(1 downto 0);    -- mm_interconnect_1:mux_ddr_0_altera_axi_slave_awburst -> mux_ddr_0:arria10_hps_0_h2f_axi_master_awburst
	signal mm_interconnect_1_mux_ddr_0_altera_axi_slave_awuser           : std_logic_vector(4 downto 0);    -- mm_interconnect_1:mux_ddr_0_altera_axi_slave_awuser -> mux_ddr_0:arria10_hps_0_h2f_axi_master_awuser
	signal mm_interconnect_1_mux_ddr_0_altera_axi_slave_arlen            : std_logic_vector(3 downto 0);    -- mm_interconnect_1:mux_ddr_0_altera_axi_slave_arlen -> mux_ddr_0:arria10_hps_0_h2f_axi_master_arlen
	signal mm_interconnect_1_mux_ddr_0_altera_axi_slave_wstrb            : std_logic_vector(3 downto 0);    -- mm_interconnect_1:mux_ddr_0_altera_axi_slave_wstrb -> mux_ddr_0:arria10_hps_0_h2f_axi_master_wstrb
	signal mm_interconnect_1_mux_ddr_0_altera_axi_slave_wready           : std_logic;                       -- mux_ddr_0:arria10_hps_0_h2f_axi_master_wready -> mm_interconnect_1:mux_ddr_0_altera_axi_slave_wready
	signal mm_interconnect_1_mux_ddr_0_altera_axi_slave_rid              : std_logic_vector(3 downto 0);    -- mux_ddr_0:arria10_hps_0_h2f_axi_master_rid -> mm_interconnect_1:mux_ddr_0_altera_axi_slave_rid
	signal mm_interconnect_1_mux_ddr_0_altera_axi_slave_rready           : std_logic;                       -- mm_interconnect_1:mux_ddr_0_altera_axi_slave_rready -> mux_ddr_0:arria10_hps_0_h2f_axi_master_rready
	signal mm_interconnect_1_mux_ddr_0_altera_axi_slave_awlen            : std_logic_vector(3 downto 0);    -- mm_interconnect_1:mux_ddr_0_altera_axi_slave_awlen -> mux_ddr_0:arria10_hps_0_h2f_axi_master_awlen
	signal mm_interconnect_1_mux_ddr_0_altera_axi_slave_wid              : std_logic_vector(3 downto 0);    -- mm_interconnect_1:mux_ddr_0_altera_axi_slave_wid -> mux_ddr_0:arria10_hps_0_h2f_axi_master_wid
	signal mm_interconnect_1_mux_ddr_0_altera_axi_slave_arcache          : std_logic_vector(3 downto 0);    -- mm_interconnect_1:mux_ddr_0_altera_axi_slave_arcache -> mux_ddr_0:arria10_hps_0_h2f_axi_master_arcache
	signal mm_interconnect_1_mux_ddr_0_altera_axi_slave_wvalid           : std_logic;                       -- mm_interconnect_1:mux_ddr_0_altera_axi_slave_wvalid -> mux_ddr_0:arria10_hps_0_h2f_axi_master_wvalid
	signal mm_interconnect_1_mux_ddr_0_altera_axi_slave_araddr           : std_logic_vector(28 downto 0);   -- mm_interconnect_1:mux_ddr_0_altera_axi_slave_araddr -> mux_ddr_0:arria10_hps_0_h2f_axi_master_araddr
	signal mm_interconnect_1_mux_ddr_0_altera_axi_slave_arprot           : std_logic_vector(2 downto 0);    -- mm_interconnect_1:mux_ddr_0_altera_axi_slave_arprot -> mux_ddr_0:arria10_hps_0_h2f_axi_master_arprot
	signal mm_interconnect_1_mux_ddr_0_altera_axi_slave_awprot           : std_logic_vector(2 downto 0);    -- mm_interconnect_1:mux_ddr_0_altera_axi_slave_awprot -> mux_ddr_0:arria10_hps_0_h2f_axi_master_awprot
	signal mm_interconnect_1_mux_ddr_0_altera_axi_slave_wdata            : std_logic_vector(31 downto 0);   -- mm_interconnect_1:mux_ddr_0_altera_axi_slave_wdata -> mux_ddr_0:arria10_hps_0_h2f_axi_master_wdata
	signal mm_interconnect_1_mux_ddr_0_altera_axi_slave_arvalid          : std_logic;                       -- mm_interconnect_1:mux_ddr_0_altera_axi_slave_arvalid -> mux_ddr_0:arria10_hps_0_h2f_axi_master_arvalid
	signal mm_interconnect_1_mux_ddr_0_altera_axi_slave_awcache          : std_logic_vector(3 downto 0);    -- mm_interconnect_1:mux_ddr_0_altera_axi_slave_awcache -> mux_ddr_0:arria10_hps_0_h2f_axi_master_awcache
	signal mm_interconnect_1_mux_ddr_0_altera_axi_slave_arid             : std_logic_vector(3 downto 0);    -- mm_interconnect_1:mux_ddr_0_altera_axi_slave_arid -> mux_ddr_0:arria10_hps_0_h2f_axi_master_arid
	signal mm_interconnect_1_mux_ddr_0_altera_axi_slave_arlock           : std_logic_vector(1 downto 0);    -- mm_interconnect_1:mux_ddr_0_altera_axi_slave_arlock -> mux_ddr_0:arria10_hps_0_h2f_axi_master_arlock
	signal mm_interconnect_1_mux_ddr_0_altera_axi_slave_awlock           : std_logic_vector(1 downto 0);    -- mm_interconnect_1:mux_ddr_0_altera_axi_slave_awlock -> mux_ddr_0:arria10_hps_0_h2f_axi_master_awlock
	signal mm_interconnect_1_mux_ddr_0_altera_axi_slave_awaddr           : std_logic_vector(28 downto 0);   -- mm_interconnect_1:mux_ddr_0_altera_axi_slave_awaddr -> mux_ddr_0:arria10_hps_0_h2f_axi_master_awaddr
	signal mm_interconnect_1_mux_ddr_0_altera_axi_slave_bresp            : std_logic_vector(1 downto 0);    -- mux_ddr_0:arria10_hps_0_h2f_axi_master_bresp -> mm_interconnect_1:mux_ddr_0_altera_axi_slave_bresp
	signal mm_interconnect_1_mux_ddr_0_altera_axi_slave_arready          : std_logic;                       -- mux_ddr_0:arria10_hps_0_h2f_axi_master_arready -> mm_interconnect_1:mux_ddr_0_altera_axi_slave_arready
	signal mm_interconnect_1_mux_ddr_0_altera_axi_slave_rdata            : std_logic_vector(31 downto 0);   -- mux_ddr_0:arria10_hps_0_h2f_axi_master_rdata -> mm_interconnect_1:mux_ddr_0_altera_axi_slave_rdata
	signal mm_interconnect_1_mux_ddr_0_altera_axi_slave_awready          : std_logic;                       -- mux_ddr_0:arria10_hps_0_h2f_axi_master_awready -> mm_interconnect_1:mux_ddr_0_altera_axi_slave_awready
	signal mm_interconnect_1_mux_ddr_0_altera_axi_slave_arburst          : std_logic_vector(1 downto 0);    -- mm_interconnect_1:mux_ddr_0_altera_axi_slave_arburst -> mux_ddr_0:arria10_hps_0_h2f_axi_master_arburst
	signal mm_interconnect_1_mux_ddr_0_altera_axi_slave_arsize           : std_logic_vector(2 downto 0);    -- mm_interconnect_1:mux_ddr_0_altera_axi_slave_arsize -> mux_ddr_0:arria10_hps_0_h2f_axi_master_arsize
	signal mm_interconnect_1_mux_ddr_0_altera_axi_slave_bready           : std_logic;                       -- mm_interconnect_1:mux_ddr_0_altera_axi_slave_bready -> mux_ddr_0:arria10_hps_0_h2f_axi_master_bready
	signal mm_interconnect_1_mux_ddr_0_altera_axi_slave_rlast            : std_logic;                       -- mux_ddr_0:arria10_hps_0_h2f_axi_master_rlast -> mm_interconnect_1:mux_ddr_0_altera_axi_slave_rlast
	signal mm_interconnect_1_mux_ddr_0_altera_axi_slave_wlast            : std_logic;                       -- mm_interconnect_1:mux_ddr_0_altera_axi_slave_wlast -> mux_ddr_0:arria10_hps_0_h2f_axi_master_wlast
	signal mm_interconnect_1_mux_ddr_0_altera_axi_slave_rresp            : std_logic_vector(1 downto 0);    -- mux_ddr_0:arria10_hps_0_h2f_axi_master_rresp -> mm_interconnect_1:mux_ddr_0_altera_axi_slave_rresp
	signal mm_interconnect_1_mux_ddr_0_altera_axi_slave_awid             : std_logic_vector(3 downto 0);    -- mm_interconnect_1:mux_ddr_0_altera_axi_slave_awid -> mux_ddr_0:arria10_hps_0_h2f_axi_master_awid
	signal mm_interconnect_1_mux_ddr_0_altera_axi_slave_bid              : std_logic_vector(3 downto 0);    -- mux_ddr_0:arria10_hps_0_h2f_axi_master_bid -> mm_interconnect_1:mux_ddr_0_altera_axi_slave_bid
	signal mm_interconnect_1_mux_ddr_0_altera_axi_slave_bvalid           : std_logic;                       -- mux_ddr_0:arria10_hps_0_h2f_axi_master_bvalid -> mm_interconnect_1:mux_ddr_0_altera_axi_slave_bvalid
	signal mm_interconnect_1_mux_ddr_0_altera_axi_slave_awsize           : std_logic_vector(2 downto 0);    -- mm_interconnect_1:mux_ddr_0_altera_axi_slave_awsize -> mux_ddr_0:arria10_hps_0_h2f_axi_master_awsize
	signal mm_interconnect_1_mux_ddr_0_altera_axi_slave_awvalid          : std_logic;                       -- mm_interconnect_1:mux_ddr_0_altera_axi_slave_awvalid -> mux_ddr_0:arria10_hps_0_h2f_axi_master_awvalid
	signal mm_interconnect_1_mux_ddr_0_altera_axi_slave_aruser           : std_logic_vector(4 downto 0);    -- mm_interconnect_1:mux_ddr_0_altera_axi_slave_aruser -> mux_ddr_0:arria10_hps_0_h2f_axi_master_aruser
	signal mm_interconnect_1_mux_ddr_0_altera_axi_slave_rvalid           : std_logic;                       -- mux_ddr_0:arria10_hps_0_h2f_axi_master_rvalid -> mm_interconnect_1:mux_ddr_0_altera_axi_slave_rvalid
	signal arria10_hps_0_h2f_lw_axi_master_awburst                       : std_logic_vector(1 downto 0);    -- arria10_hps_0:h2f_lw_AWBURST -> mm_interconnect_2:arria10_hps_0_h2f_lw_axi_master_awburst
	signal arria10_hps_0_h2f_lw_axi_master_awuser                        : std_logic_vector(4 downto 0);    -- arria10_hps_0:h2f_lw_AWUSER -> mm_interconnect_2:arria10_hps_0_h2f_lw_axi_master_awuser
	signal arria10_hps_0_h2f_lw_axi_master_arlen                         : std_logic_vector(3 downto 0);    -- arria10_hps_0:h2f_lw_ARLEN -> mm_interconnect_2:arria10_hps_0_h2f_lw_axi_master_arlen
	signal arria10_hps_0_h2f_lw_axi_master_wstrb                         : std_logic_vector(3 downto 0);    -- arria10_hps_0:h2f_lw_WSTRB -> mm_interconnect_2:arria10_hps_0_h2f_lw_axi_master_wstrb
	signal arria10_hps_0_h2f_lw_axi_master_wready                        : std_logic;                       -- mm_interconnect_2:arria10_hps_0_h2f_lw_axi_master_wready -> arria10_hps_0:h2f_lw_WREADY
	signal arria10_hps_0_h2f_lw_axi_master_rid                           : std_logic_vector(3 downto 0);    -- mm_interconnect_2:arria10_hps_0_h2f_lw_axi_master_rid -> arria10_hps_0:h2f_lw_RID
	signal arria10_hps_0_h2f_lw_axi_master_rready                        : std_logic;                       -- arria10_hps_0:h2f_lw_RREADY -> mm_interconnect_2:arria10_hps_0_h2f_lw_axi_master_rready
	signal arria10_hps_0_h2f_lw_axi_master_awlen                         : std_logic_vector(3 downto 0);    -- arria10_hps_0:h2f_lw_AWLEN -> mm_interconnect_2:arria10_hps_0_h2f_lw_axi_master_awlen
	signal arria10_hps_0_h2f_lw_axi_master_wid                           : std_logic_vector(3 downto 0);    -- arria10_hps_0:h2f_lw_WID -> mm_interconnect_2:arria10_hps_0_h2f_lw_axi_master_wid
	signal arria10_hps_0_h2f_lw_axi_master_arcache                       : std_logic_vector(3 downto 0);    -- arria10_hps_0:h2f_lw_ARCACHE -> mm_interconnect_2:arria10_hps_0_h2f_lw_axi_master_arcache
	signal arria10_hps_0_h2f_lw_axi_master_wvalid                        : std_logic;                       -- arria10_hps_0:h2f_lw_WVALID -> mm_interconnect_2:arria10_hps_0_h2f_lw_axi_master_wvalid
	signal arria10_hps_0_h2f_lw_axi_master_araddr                        : std_logic_vector(20 downto 0);   -- arria10_hps_0:h2f_lw_ARADDR -> mm_interconnect_2:arria10_hps_0_h2f_lw_axi_master_araddr
	signal arria10_hps_0_h2f_lw_axi_master_arprot                        : std_logic_vector(2 downto 0);    -- arria10_hps_0:h2f_lw_ARPROT -> mm_interconnect_2:arria10_hps_0_h2f_lw_axi_master_arprot
	signal arria10_hps_0_h2f_lw_axi_master_awprot                        : std_logic_vector(2 downto 0);    -- arria10_hps_0:h2f_lw_AWPROT -> mm_interconnect_2:arria10_hps_0_h2f_lw_axi_master_awprot
	signal arria10_hps_0_h2f_lw_axi_master_wdata                         : std_logic_vector(31 downto 0);   -- arria10_hps_0:h2f_lw_WDATA -> mm_interconnect_2:arria10_hps_0_h2f_lw_axi_master_wdata
	signal arria10_hps_0_h2f_lw_axi_master_arvalid                       : std_logic;                       -- arria10_hps_0:h2f_lw_ARVALID -> mm_interconnect_2:arria10_hps_0_h2f_lw_axi_master_arvalid
	signal arria10_hps_0_h2f_lw_axi_master_awcache                       : std_logic_vector(3 downto 0);    -- arria10_hps_0:h2f_lw_AWCACHE -> mm_interconnect_2:arria10_hps_0_h2f_lw_axi_master_awcache
	signal arria10_hps_0_h2f_lw_axi_master_arid                          : std_logic_vector(3 downto 0);    -- arria10_hps_0:h2f_lw_ARID -> mm_interconnect_2:arria10_hps_0_h2f_lw_axi_master_arid
	signal arria10_hps_0_h2f_lw_axi_master_arlock                        : std_logic_vector(1 downto 0);    -- arria10_hps_0:h2f_lw_ARLOCK -> mm_interconnect_2:arria10_hps_0_h2f_lw_axi_master_arlock
	signal arria10_hps_0_h2f_lw_axi_master_awlock                        : std_logic_vector(1 downto 0);    -- arria10_hps_0:h2f_lw_AWLOCK -> mm_interconnect_2:arria10_hps_0_h2f_lw_axi_master_awlock
	signal arria10_hps_0_h2f_lw_axi_master_awaddr                        : std_logic_vector(20 downto 0);   -- arria10_hps_0:h2f_lw_AWADDR -> mm_interconnect_2:arria10_hps_0_h2f_lw_axi_master_awaddr
	signal arria10_hps_0_h2f_lw_axi_master_bresp                         : std_logic_vector(1 downto 0);    -- mm_interconnect_2:arria10_hps_0_h2f_lw_axi_master_bresp -> arria10_hps_0:h2f_lw_BRESP
	signal arria10_hps_0_h2f_lw_axi_master_arready                       : std_logic;                       -- mm_interconnect_2:arria10_hps_0_h2f_lw_axi_master_arready -> arria10_hps_0:h2f_lw_ARREADY
	signal arria10_hps_0_h2f_lw_axi_master_rdata                         : std_logic_vector(31 downto 0);   -- mm_interconnect_2:arria10_hps_0_h2f_lw_axi_master_rdata -> arria10_hps_0:h2f_lw_RDATA
	signal arria10_hps_0_h2f_lw_axi_master_awready                       : std_logic;                       -- mm_interconnect_2:arria10_hps_0_h2f_lw_axi_master_awready -> arria10_hps_0:h2f_lw_AWREADY
	signal arria10_hps_0_h2f_lw_axi_master_arburst                       : std_logic_vector(1 downto 0);    -- arria10_hps_0:h2f_lw_ARBURST -> mm_interconnect_2:arria10_hps_0_h2f_lw_axi_master_arburst
	signal arria10_hps_0_h2f_lw_axi_master_arsize                        : std_logic_vector(2 downto 0);    -- arria10_hps_0:h2f_lw_ARSIZE -> mm_interconnect_2:arria10_hps_0_h2f_lw_axi_master_arsize
	signal arria10_hps_0_h2f_lw_axi_master_bready                        : std_logic;                       -- arria10_hps_0:h2f_lw_BREADY -> mm_interconnect_2:arria10_hps_0_h2f_lw_axi_master_bready
	signal arria10_hps_0_h2f_lw_axi_master_rlast                         : std_logic;                       -- mm_interconnect_2:arria10_hps_0_h2f_lw_axi_master_rlast -> arria10_hps_0:h2f_lw_RLAST
	signal arria10_hps_0_h2f_lw_axi_master_wlast                         : std_logic;                       -- arria10_hps_0:h2f_lw_WLAST -> mm_interconnect_2:arria10_hps_0_h2f_lw_axi_master_wlast
	signal arria10_hps_0_h2f_lw_axi_master_rresp                         : std_logic_vector(1 downto 0);    -- mm_interconnect_2:arria10_hps_0_h2f_lw_axi_master_rresp -> arria10_hps_0:h2f_lw_RRESP
	signal arria10_hps_0_h2f_lw_axi_master_awid                          : std_logic_vector(3 downto 0);    -- arria10_hps_0:h2f_lw_AWID -> mm_interconnect_2:arria10_hps_0_h2f_lw_axi_master_awid
	signal arria10_hps_0_h2f_lw_axi_master_bid                           : std_logic_vector(3 downto 0);    -- mm_interconnect_2:arria10_hps_0_h2f_lw_axi_master_bid -> arria10_hps_0:h2f_lw_BID
	signal arria10_hps_0_h2f_lw_axi_master_bvalid                        : std_logic;                       -- mm_interconnect_2:arria10_hps_0_h2f_lw_axi_master_bvalid -> arria10_hps_0:h2f_lw_BVALID
	signal arria10_hps_0_h2f_lw_axi_master_awsize                        : std_logic_vector(2 downto 0);    -- arria10_hps_0:h2f_lw_AWSIZE -> mm_interconnect_2:arria10_hps_0_h2f_lw_axi_master_awsize
	signal arria10_hps_0_h2f_lw_axi_master_awvalid                       : std_logic;                       -- arria10_hps_0:h2f_lw_AWVALID -> mm_interconnect_2:arria10_hps_0_h2f_lw_axi_master_awvalid
	signal arria10_hps_0_h2f_lw_axi_master_aruser                        : std_logic_vector(4 downto 0);    -- arria10_hps_0:h2f_lw_ARUSER -> mm_interconnect_2:arria10_hps_0_h2f_lw_axi_master_aruser
	signal arria10_hps_0_h2f_lw_axi_master_rvalid                        : std_logic;                       -- mm_interconnect_2:arria10_hps_0_h2f_lw_axi_master_rvalid -> arria10_hps_0:h2f_lw_RVALID
	signal mm_interconnect_2_som_config_s1_chipselect                    : std_logic;                       -- mm_interconnect_2:som_config_s1_chipselect -> som_config:chipselect
	signal mm_interconnect_2_som_config_s1_readdata                      : std_logic_vector(31 downto 0);   -- som_config:readdata -> mm_interconnect_2:som_config_s1_readdata
	signal mm_interconnect_2_som_config_s1_address                       : std_logic_vector(2 downto 0);    -- mm_interconnect_2:som_config_s1_address -> som_config:address
	signal mm_interconnect_2_som_config_s1_write                         : std_logic;                       -- mm_interconnect_2:som_config_s1_write -> mm_interconnect_2_som_config_s1_write:in
	signal mm_interconnect_2_som_config_s1_writedata                     : std_logic_vector(31 downto 0);   -- mm_interconnect_2:som_config_s1_writedata -> som_config:writedata
	signal mm_clock_crossing_bridge_0_m0_waitrequest                     : std_logic;                       -- mm_interconnect_3:mm_clock_crossing_bridge_0_m0_waitrequest -> mm_clock_crossing_bridge_0:m0_waitrequest
	signal mm_clock_crossing_bridge_0_m0_readdata                        : std_logic_vector(511 downto 0);  -- mm_interconnect_3:mm_clock_crossing_bridge_0_m0_readdata -> mm_clock_crossing_bridge_0:m0_readdata
	signal mm_clock_crossing_bridge_0_m0_debugaccess                     : std_logic;                       -- mm_clock_crossing_bridge_0:m0_debugaccess -> mm_interconnect_3:mm_clock_crossing_bridge_0_m0_debugaccess
	signal mm_clock_crossing_bridge_0_m0_address                         : std_logic_vector(31 downto 0);   -- mm_clock_crossing_bridge_0:m0_address -> mm_interconnect_3:mm_clock_crossing_bridge_0_m0_address
	signal mm_clock_crossing_bridge_0_m0_read                            : std_logic;                       -- mm_clock_crossing_bridge_0:m0_read -> mm_interconnect_3:mm_clock_crossing_bridge_0_m0_read
	signal mm_clock_crossing_bridge_0_m0_byteenable                      : std_logic_vector(63 downto 0);   -- mm_clock_crossing_bridge_0:m0_byteenable -> mm_interconnect_3:mm_clock_crossing_bridge_0_m0_byteenable
	signal mm_clock_crossing_bridge_0_m0_readdatavalid                   : std_logic;                       -- mm_interconnect_3:mm_clock_crossing_bridge_0_m0_readdatavalid -> mm_clock_crossing_bridge_0:m0_readdatavalid
	signal mm_clock_crossing_bridge_0_m0_writedata                       : std_logic_vector(511 downto 0);  -- mm_clock_crossing_bridge_0:m0_writedata -> mm_interconnect_3:mm_clock_crossing_bridge_0_m0_writedata
	signal mm_clock_crossing_bridge_0_m0_write                           : std_logic;                       -- mm_clock_crossing_bridge_0:m0_write -> mm_interconnect_3:mm_clock_crossing_bridge_0_m0_write
	signal mm_clock_crossing_bridge_0_m0_burstcount                      : std_logic_vector(6 downto 0);    -- mm_clock_crossing_bridge_0:m0_burstcount -> mm_interconnect_3:mm_clock_crossing_bridge_0_m0_burstcount
	signal mm_interconnect_3_emif_0_ctrl_amm_0_readdata                  : std_logic_vector(511 downto 0);  -- emif_0:amm_readdata_0 -> mm_interconnect_3:emif_0_ctrl_amm_0_readdata
	signal emif_0_ctrl_amm_0_waitrequest                                 : std_logic;                       -- emif_0:amm_ready_0 -> emif_0_ctrl_amm_0_waitrequest:in
	signal mm_interconnect_3_emif_0_ctrl_amm_0_address                   : std_logic_vector(25 downto 0);   -- mm_interconnect_3:emif_0_ctrl_amm_0_address -> emif_0:amm_address_0
	signal mm_interconnect_3_emif_0_ctrl_amm_0_read                      : std_logic;                       -- mm_interconnect_3:emif_0_ctrl_amm_0_read -> emif_0:amm_read_0
	signal mm_interconnect_3_emif_0_ctrl_amm_0_byteenable                : std_logic_vector(63 downto 0);   -- mm_interconnect_3:emif_0_ctrl_amm_0_byteenable -> emif_0:amm_byteenable_0
	signal mm_interconnect_3_emif_0_ctrl_amm_0_readdatavalid             : std_logic;                       -- emif_0:amm_readdatavalid_0 -> mm_interconnect_3:emif_0_ctrl_amm_0_readdatavalid
	signal mm_interconnect_3_emif_0_ctrl_amm_0_write                     : std_logic;                       -- mm_interconnect_3:emif_0_ctrl_amm_0_write -> emif_0:amm_write_0
	signal mm_interconnect_3_emif_0_ctrl_amm_0_writedata                 : std_logic_vector(511 downto 0);  -- mm_interconnect_3:emif_0_ctrl_amm_0_writedata -> emif_0:amm_writedata_0
	signal mm_interconnect_3_emif_0_ctrl_amm_0_burstcount                : std_logic_vector(6 downto 0);    -- mm_interconnect_3:emif_0_ctrl_amm_0_burstcount -> emif_0:amm_burstcount_0
	signal arria10_hps_0_f2h_irq0_irq                                    : std_logic_vector(31 downto 0);   -- irq_mapper:sender_irq -> arria10_hps_0:f2h_irq_p0
	signal arria10_hps_0_f2h_irq1_irq                                    : std_logic_vector(31 downto 0);   -- irq_mapper_001:sender_irq -> arria10_hps_0:f2h_irq_p1
	signal fe_ad4020_left_line_in_valid                                  : std_logic;                       -- FE_AD4020_Left:AD4020_valid_out -> avalon_st_adapter:in_0_valid
	signal fe_ad4020_left_line_in_data                                   : std_logic_vector(31 downto 0);   -- FE_AD4020_Left:AD4020_data_out -> avalon_st_adapter:in_0_data
	signal fe_ad4020_left_line_in_channel                                : std_logic_vector(1 downto 0);    -- FE_AD4020_Left:AD4020_channel_out -> avalon_st_adapter:in_0_channel
	signal fe_ad4020_left_line_in_error                                  : std_logic_vector(1 downto 0);    -- FE_AD4020_Left:AD4020_error_out -> avalon_st_adapter:in_0_error
	signal avalon_st_adapter_out_0_valid                                 : std_logic;                       -- avalon_st_adapter:out_0_valid -> FE_AD5791_v1_Left:AD5791_valid_in
	signal avalon_st_adapter_out_0_data                                  : std_logic_vector(31 downto 0);   -- avalon_st_adapter:out_0_data -> FE_AD5791_v1_Left:AD5791_data_in
	signal avalon_st_adapter_out_0_error                                 : std_logic_vector(1 downto 0);    -- avalon_st_adapter:out_0_error -> FE_AD5791_v1_Left:AD5791_error_in
	signal fe_ad4020_right_line_in_valid                                 : std_logic;                       -- FE_AD4020_Right:AD4020_valid_out -> avalon_st_adapter_001:in_0_valid
	signal fe_ad4020_right_line_in_data                                  : std_logic_vector(31 downto 0);   -- FE_AD4020_Right:AD4020_data_out -> avalon_st_adapter_001:in_0_data
	signal fe_ad4020_right_line_in_channel                               : std_logic_vector(1 downto 0);    -- FE_AD4020_Right:AD4020_channel_out -> avalon_st_adapter_001:in_0_channel
	signal fe_ad4020_right_line_in_error                                 : std_logic_vector(1 downto 0);    -- FE_AD4020_Right:AD4020_error_out -> avalon_st_adapter_001:in_0_error
	signal avalon_st_adapter_001_out_0_valid                             : std_logic;                       -- avalon_st_adapter_001:out_0_valid -> FE_AD5791_v1_Right:AD5791_valid_in
	signal avalon_st_adapter_001_out_0_data                              : std_logic_vector(31 downto 0);   -- avalon_st_adapter_001:out_0_data -> FE_AD5791_v1_Right:AD5791_data_in
	signal avalon_st_adapter_001_out_0_error                             : std_logic_vector(1 downto 0);    -- avalon_st_adapter_001:out_0_error -> FE_AD5791_v1_Right:AD5791_error_in
	signal fe_fpga_microphone_encoder_decoder_1_mic_output_valid         : std_logic;                       -- FE_FPGA_Microphone_Encoder_Decoder_1:mic_out_valid -> avalon_st_adapter_002:in_0_valid
	signal fe_fpga_microphone_encoder_decoder_1_mic_output_data          : std_logic_vector(31 downto 0);   -- FE_FPGA_Microphone_Encoder_Decoder_1:mic_out_data -> avalon_st_adapter_002:in_0_data
	signal fe_fpga_microphone_encoder_decoder_1_mic_output_channel       : std_logic_vector(3 downto 0);    -- FE_FPGA_Microphone_Encoder_Decoder_1:mic_out_channel -> avalon_st_adapter_002:in_0_channel
	signal fe_fpga_microphone_encoder_decoder_1_mic_output_error         : std_logic_vector(1 downto 0);    -- FE_FPGA_Microphone_Encoder_Decoder_1:mic_out_error -> avalon_st_adapter_002:in_0_error
	signal avalon_st_adapter_002_out_0_valid                             : std_logic;                       -- avalon_st_adapter_002:out_0_valid -> FE_Qsys_AD1939_Audio_Blade_v1_0:AD1939_DAC1_valid
	signal avalon_st_adapter_002_out_0_data                              : std_logic_vector(31 downto 0);   -- avalon_st_adapter_002:out_0_data -> FE_Qsys_AD1939_Audio_Blade_v1_0:AD1939_DAC1_data
	signal avalon_st_adapter_002_out_0_channel                           : std_logic_vector(1 downto 0);    -- avalon_st_adapter_002:out_0_channel -> FE_Qsys_AD1939_Audio_Blade_v1_0:AD1939_DAC1_channel
	signal avalon_st_adapter_002_out_0_error                             : std_logic_vector(1 downto 0);    -- avalon_st_adapter_002:out_0_error -> FE_Qsys_AD1939_Audio_Blade_v1_0:AD1939_DAC1_error
	signal fe_fpga_microphone_encoder_decoder_0_mic_output_valid         : std_logic;                       -- FE_FPGA_Microphone_Encoder_Decoder_0:mic_out_valid -> avalon_st_adapter_003:in_0_valid
	signal fe_fpga_microphone_encoder_decoder_0_mic_output_data          : std_logic_vector(31 downto 0);   -- FE_FPGA_Microphone_Encoder_Decoder_0:mic_out_data -> avalon_st_adapter_003:in_0_data
	signal fe_fpga_microphone_encoder_decoder_0_mic_output_channel       : std_logic_vector(3 downto 0);    -- FE_FPGA_Microphone_Encoder_Decoder_0:mic_out_channel -> avalon_st_adapter_003:in_0_channel
	signal fe_fpga_microphone_encoder_decoder_0_mic_output_error         : std_logic_vector(1 downto 0);    -- FE_FPGA_Microphone_Encoder_Decoder_0:mic_out_error -> avalon_st_adapter_003:in_0_error
	signal avalon_st_adapter_003_out_0_valid                             : std_logic;                       -- avalon_st_adapter_003:out_0_valid -> FE_Qsys_AD1939_Audio_Blade_v1_0:AD1939_DAC2_valid
	signal avalon_st_adapter_003_out_0_data                              : std_logic_vector(31 downto 0);   -- avalon_st_adapter_003:out_0_data -> FE_Qsys_AD1939_Audio_Blade_v1_0:AD1939_DAC2_data
	signal avalon_st_adapter_003_out_0_channel                           : std_logic_vector(1 downto 0);    -- avalon_st_adapter_003:out_0_channel -> FE_Qsys_AD1939_Audio_Blade_v1_0:AD1939_DAC2_channel
	signal avalon_st_adapter_003_out_0_error                             : std_logic_vector(1 downto 0);    -- avalon_st_adapter_003:out_0_error -> FE_Qsys_AD1939_Audio_Blade_v1_0:AD1939_DAC2_error
	signal rst_controller_reset_out_reset                                : std_logic;                       -- rst_controller:reset_out -> [FE_Qsys_AD1939_Audio_Blade_v1_0:sys_reset, avalon_st_adapter:in_rst_0_reset, avalon_st_adapter_001:in_rst_0_reset, avalon_st_adapter_002:in_rst_0_reset, avalon_st_adapter_003:in_rst_0_reset, rst_controller_reset_out_reset:in]
	signal rst_controller_001_reset_out_reset                            : std_logic;                       -- rst_controller_001:reset_out -> [mm_interconnect_0:mux_ddr_0_reset_reset_bridge_in_reset_reset, mm_interconnect_1:mux_ddr_0_reset_reset_bridge_in_reset_reset, mm_interconnect_2:arria10_hps_0_h2f_lw_axi_reset_reset_bridge_in_reset_reset, mux_ddr_0:reset, rst_controller_001_reset_out_reset:in]
	signal rst_controller_002_reset_out_reset                            : std_logic;                       -- rst_controller_002:reset_out -> [mm_interconnect_1:arria10_hps_0_h2f_axi_reset_reset_bridge_in_reset_reset, rst_controller_002_reset_out_reset:in]
	signal emif_0_emif_usr_reset_n_reset                                 : std_logic;                       -- emif_0:emif_usr_reset_n -> emif_0_emif_usr_reset_n_reset:in
	signal arria10_hps_0_h2f_reset_reset                                 : std_logic;                       -- arria10_hps_0:h2f_rst_n -> arria10_hps_0_h2f_reset_reset:in
	signal rst_controller_003_reset_out_reset                            : std_logic;                       -- rst_controller_003:reset_out -> [mm_clock_crossing_bridge_0:m0_reset, mm_interconnect_3:mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset]
	signal rst_controller_004_reset_out_reset                            : std_logic;                       -- rst_controller_004:reset_out -> [mm_clock_crossing_bridge_0:s0_reset, mm_interconnect_0:mm_clock_crossing_bridge_0_s0_reset_reset_bridge_in_reset_reset]
	signal reset_reset_n_ports_inv                                       : std_logic;                       -- reset_reset_n:inv -> [pll_using_AD1939_MCLK:rst, rst_controller:reset_in0, rst_controller_001:reset_in0]
	signal mm_interconnect_2_som_config_s1_write_ports_inv               : std_logic;                       -- mm_interconnect_2_som_config_s1_write:inv -> som_config:write_n
	signal mm_interconnect_3_emif_0_ctrl_amm_0_inv                       : std_logic;                       -- emif_0_ctrl_amm_0_waitrequest:inv -> mm_interconnect_3:emif_0_ctrl_amm_0_waitrequest
	signal rst_controller_reset_out_reset_ports_inv                      : std_logic;                       -- rst_controller_reset_out_reset:inv -> [FE_AD4020_Left:sys_reset_n, FE_AD4020_Right:sys_reset_n, FE_AD5791_v1_Left:sys_reset_n, FE_AD5791_v1_Right:sys_reset_n, FE_AD7768_v1_0:sys_reset_n, FE_FPGA_Microphone_Encoder_Decoder_0:reset_n, FE_FPGA_Microphone_Encoder_Decoder_10:reset_n, FE_FPGA_Microphone_Encoder_Decoder_11:reset_n, FE_FPGA_Microphone_Encoder_Decoder_12:reset_n, FE_FPGA_Microphone_Encoder_Decoder_13:reset_n, FE_FPGA_Microphone_Encoder_Decoder_15:reset_n, FE_FPGA_Microphone_Encoder_Decoder_1:reset_n, FE_FPGA_Microphone_Encoder_Decoder_2:reset_n, FE_FPGA_Microphone_Encoder_Decoder_3:reset_n, FE_FPGA_Microphone_Encoder_Decoder_4:reset_n, FE_FPGA_Microphone_Encoder_Decoder_5:reset_n, FE_FPGA_Microphone_Encoder_Decoder_6:reset_n, FE_FPGA_Microphone_Encoder_Decoder_7:reset_n, FE_FPGA_Microphone_Encoder_Decoder_8:reset_n, FE_FPGA_Microphone_Encoder_Decoder_9:reset_n]
	signal rst_controller_001_reset_out_reset_ports_inv                  : std_logic;                       -- rst_controller_001_reset_out_reset:inv -> [FE_FPGA_Microphone_Encoder_Decoder_14:reset_n, arria10_hps_0:f2h_axi_rst, arria10_hps_0:f2s_sdram0_rst, arria10_hps_0:h2f_lw_axi_rst, som_config:reset_n]
	signal rst_controller_002_reset_out_reset_ports_inv                  : std_logic;                       -- rst_controller_002_reset_out_reset:inv -> arria10_hps_0:h2f_axi_rst
	signal emif_0_emif_usr_reset_n_reset_ports_inv                       : std_logic;                       -- emif_0_emif_usr_reset_n_reset:inv -> [rst_controller_002:reset_in0, rst_controller_003:reset_in0]
	signal arria10_hps_0_h2f_reset_reset_ports_inv                       : std_logic;                       -- arria10_hps_0_h2f_reset_reset:inv -> [rst_controller_002:reset_in1, rst_controller_004:reset_in0]

begin

	fe_ad4020_left : component som_system_FE_AD4020_10.som_system_pkg.FE_AD4020_v1
		generic map (
			input_clk_freq => 71000000
		)
		port map (
			AD4020_data_out    => fe_ad4020_left_line_in_data,              --           Line_In.data
			AD4020_error_out   => fe_ad4020_left_line_in_error,             --                  .error
			AD4020_valid_out   => fe_ad4020_left_line_in_valid,             --                  .valid
			AD4020_channel_out => fe_ad4020_left_line_in_channel,           --                  .channel
			AD4020_CONV_out    => ad4020_left_physical_cnv,                 -- connect_to_ad4020.cnv
			AD4020_MISO_in     => ad4020_left_physical_miso,                --                  .miso
			AD4020_MOSI_out    => ad4020_left_physical_mosi,                --                  .mosi
			AD4020_SCLK_out    => ad4020_left_physical_sclk,                --                  .sclk
			sys_reset_n        => rst_controller_reset_out_reset_ports_inv, --         sys_reset.reset_n
			sys_clk            => pll_using_ad1939_mclk_outclk0_clk,        --         sys_clock.clk
			spi_clk            => pll_using_ad1939_mclk_outclk4_clk         --           spi_clk.clk
		);

	fe_ad4020_right : component som_system_FE_AD4020_10.som_system_pkg.FE_AD4020_v1
		generic map (
			input_clk_freq => 71000000
		)
		port map (
			AD4020_data_out    => fe_ad4020_right_line_in_data,             --           Line_In.data
			AD4020_error_out   => fe_ad4020_right_line_in_error,            --                  .error
			AD4020_valid_out   => fe_ad4020_right_line_in_valid,            --                  .valid
			AD4020_channel_out => fe_ad4020_right_line_in_channel,          --                  .channel
			AD4020_CONV_out    => ad4020_right_physical_cnv,                -- connect_to_ad4020.cnv
			AD4020_MISO_in     => ad4020_right_physical_miso,               --                  .miso
			AD4020_MOSI_out    => ad4020_right_physical_mosi,               --                  .mosi
			AD4020_SCLK_out    => ad4020_right_physical_sclk,               --                  .sclk
			sys_reset_n        => rst_controller_reset_out_reset_ports_inv, --         sys_reset.reset_n
			sys_clk            => pll_using_ad1939_mclk_outclk0_clk,        --         sys_clock.clk
			spi_clk            => pll_using_ad1939_mclk_outclk4_clk         --           spi_clk.clk
		);

	fe_ad5791_v1_left : component som_system_FE_AD5791_v1_10.som_system_pkg.FE_AD5791_v1
		port map (
			AD5791_data_in    => avalon_st_adapter_out_0_data,             --          Line_Out.data
			AD5791_error_in   => avalon_st_adapter_out_0_error,            --                  .error
			AD5791_valid_in   => avalon_st_adapter_out_0_valid,            --                  .valid
			AD5791_CLR_n_out  => ad5791_left_physical_ad5791_clr_n_out,    -- connect_to_AD5791.ad5791_clr_n_out
			AD5791_LDAC_n_out => ad5791_left_physical_ad5791_ldac_n_out,   --                  .ad5791_ldac_n_out
			AD5791_MISO_out   => ad5791_left_physical_ad5791_miso_out,     --                  .ad5791_miso_out
			AD5791_MOSI_in    => ad5791_left_physical_ad5791_mosi_in,      --                  .ad5791_mosi_in
			AD5791_SCLK_out   => ad5791_left_physical_ad5791_sclk_out,     --                  .ad5791_sclk_out
			AD5791_SYNC_n_out => ad5791_left_physical_ad5791_sync_n_out,   --                  .ad5791_sync_n_out
			sys_clk           => pll_using_ad1939_mclk_outclk0_clk,        --           sys_clk.clk
			spi_clk           => pll_using_ad1939_mclk_outclk1_clk,        --           spi_clk.clk
			sys_reset_n       => rst_controller_reset_out_reset_ports_inv, --         sys_reset.reset_n
			double_spi_clk_in => pll_using_ad1939_mclk_outclk2_clk         --    double_spi_clk.clk
		);

	fe_ad5791_v1_right : component som_system_FE_AD5791_v1_10.som_system_pkg.FE_AD5791_v1
		port map (
			AD5791_data_in    => avalon_st_adapter_001_out_0_data,         --          Line_Out.data
			AD5791_error_in   => avalon_st_adapter_001_out_0_error,        --                  .error
			AD5791_valid_in   => avalon_st_adapter_001_out_0_valid,        --                  .valid
			AD5791_CLR_n_out  => ad5791_right_physical_ad5791_clr_n_out,   -- connect_to_AD5791.ad5791_clr_n_out
			AD5791_LDAC_n_out => ad5791_right_physical_ad5791_ldac_n_out,  --                  .ad5791_ldac_n_out
			AD5791_MISO_out   => ad5791_right_physical_ad5791_miso_out,    --                  .ad5791_miso_out
			AD5791_MOSI_in    => ad5791_right_physical_ad5791_mosi_in,     --                  .ad5791_mosi_in
			AD5791_SCLK_out   => ad5791_right_physical_ad5791_sclk_out,    --                  .ad5791_sclk_out
			AD5791_SYNC_n_out => ad5791_right_physical_ad5791_sync_n_out,  --                  .ad5791_sync_n_out
			sys_clk           => pll_using_ad1939_mclk_outclk0_clk,        --           sys_clk.clk
			spi_clk           => pll_using_ad1939_mclk_outclk1_clk,        --           spi_clk.clk
			sys_reset_n       => rst_controller_reset_out_reset_ports_inv, --         sys_reset.reset_n
			double_spi_clk_in => pll_using_ad1939_mclk_outclk2_clk         --    double_spi_clk.clk
		);

	fe_ad7768_v1_0 : component som_system_FE_AD7768_v1_10.som_system_pkg.FE_AD7768_v1
		generic map (
			n_channels => 4
		)
		port map (
			sys_clk            => pll_using_ad1939_mclk_outclk0_clk,        --         sys_clk.clk
			AD7768_DOUT_in     => ad7768_physical_ad7768_dout_in,           -- AD7768_physical.ad7768_dout_in
			AD7768_DRDY_in     => ad7768_physical_ad7768_drdy_in,           --                .ad7768_drdy_in
			AD7768_DCLK_in     => ad7768_physical_ad7768_dclk_in,           --                .ad7768_dclk_in
			AD7768_data_out    => open,                                     --        data_out.data
			AD7768_valid_out   => open,                                     --                .valid
			AD7768_error_out   => open,                                     --                .error
			AD7768_channel_out => open,                                     --                .channel
			sys_reset_n        => rst_controller_reset_out_reset_ports_inv  --       sys_reset.reset_n
		);

	fe_fpga_microphone_encoder_decoder_0 : component som_system_FE_FPGA_Microphone_Encoder_Decoder_10.som_system_pkg.FE_FPGA_Microphone_Encoder_Decoder
		generic map (
			avalon_data_width => 32,
			mic_data_width    => 24,
			bme_data_width    => 96,
			rgb_data_width    => 16,
			cfg_data_width    => 16,
			ch_width          => 4,
			n_mics            => 16
		)
		port map (
			reset_n         => rst_controller_reset_out_reset_ports_inv,                --           reset.reset_n
			serial_data_in  => mic_array0_physical_serial_data_in,                      --  RJ45_Interface.serial_data_in
			serial_data_out => mic_array0_physical_serial_data_out,                     --                .serial_data_out
			serial_clk_out  => mic_array0_physical_serial_clk_out,                      --                .serial_clk_out
			sys_clk         => pll_using_ad1939_mclk_outclk0_clk,                       --         sys_clk.clk
			busy_out        => mic_array0_control_busy_out,                             -- control_conduit.busy_out
			bme_out_data    => open,                                                    --      bme_output.data
			bme_out_error   => open,                                                    --                .error
			bme_out_valid   => open,                                                    --                .valid
			mic_out_channel => fe_fpga_microphone_encoder_decoder_0_mic_output_channel, --      mic_output.channel
			mic_out_data    => fe_fpga_microphone_encoder_decoder_0_mic_output_data,    --                .data
			mic_out_error   => fe_fpga_microphone_encoder_decoder_0_mic_output_error,   --                .error
			mic_out_valid   => fe_fpga_microphone_encoder_decoder_0_mic_output_valid,   --                .valid
			cfg_input_data  => open,                                                    --       cfg_input.data
			cfg_input_error => open,                                                    --                .error
			cfg_input_valid => open,                                                    --                .valid
			rgb_input_data  => open,                                                    --       rgb_input.data
			rgb_input_error => open,                                                    --                .error
			rgb_input_valid => open,                                                    --                .valid
			serial_clk      => pll_using_ad1939_mclk_outclk3_clk                        --      serial_clk.clk
		);

	fe_fpga_microphone_encoder_decoder_1 : component som_system_FE_FPGA_Microphone_Encoder_Decoder_10.som_system_pkg.FE_FPGA_Microphone_Encoder_Decoder
		generic map (
			avalon_data_width => 32,
			mic_data_width    => 24,
			bme_data_width    => 96,
			rgb_data_width    => 16,
			cfg_data_width    => 16,
			ch_width          => 4,
			n_mics            => 16
		)
		port map (
			reset_n         => rst_controller_reset_out_reset_ports_inv,                --           reset.reset_n
			serial_data_in  => mic_array1_physical_serial_data_in,                      --  RJ45_Interface.serial_data_in
			serial_data_out => mic_array1_physical_serial_data_out,                     --                .serial_data_out
			serial_clk_out  => mic_array1_physical_serial_clk_out,                      --                .serial_clk_out
			sys_clk         => pll_using_ad1939_mclk_outclk0_clk,                       --         sys_clk.clk
			busy_out        => mic_array1_control_busy_out,                             -- control_conduit.busy_out
			bme_out_data    => open,                                                    --      bme_output.data
			bme_out_error   => open,                                                    --                .error
			bme_out_valid   => open,                                                    --                .valid
			mic_out_channel => fe_fpga_microphone_encoder_decoder_1_mic_output_channel, --      mic_output.channel
			mic_out_data    => fe_fpga_microphone_encoder_decoder_1_mic_output_data,    --                .data
			mic_out_error   => fe_fpga_microphone_encoder_decoder_1_mic_output_error,   --                .error
			mic_out_valid   => fe_fpga_microphone_encoder_decoder_1_mic_output_valid,   --                .valid
			cfg_input_data  => open,                                                    --       cfg_input.data
			cfg_input_error => open,                                                    --                .error
			cfg_input_valid => open,                                                    --                .valid
			rgb_input_data  => open,                                                    --       rgb_input.data
			rgb_input_error => open,                                                    --                .error
			rgb_input_valid => open,                                                    --                .valid
			serial_clk      => pll_using_ad1939_mclk_outclk3_clk                        --      serial_clk.clk
		);

	fe_fpga_microphone_encoder_decoder_10 : component som_system_FE_FPGA_Microphone_Encoder_Decoder_10.som_system_pkg.FE_FPGA_Microphone_Encoder_Decoder
		generic map (
			avalon_data_width => 32,
			mic_data_width    => 24,
			bme_data_width    => 96,
			rgb_data_width    => 16,
			cfg_data_width    => 16,
			ch_width          => 4,
			n_mics            => 16
		)
		port map (
			reset_n         => rst_controller_reset_out_reset_ports_inv, --           reset.reset_n
			serial_data_in  => mic_array10_physical_serial_data_in,      --  RJ45_Interface.serial_data_in
			serial_data_out => mic_array10_physical_serial_data_out,     --                .serial_data_out
			serial_clk_out  => mic_array10_physical_serial_clk_out,      --                .serial_clk_out
			sys_clk         => pll_using_ad1939_mclk_outclk0_clk,        --         sys_clk.clk
			busy_out        => mic_array10_control_busy_out,             -- control_conduit.busy_out
			bme_out_data    => open,                                     --      bme_output.data
			bme_out_error   => open,                                     --                .error
			bme_out_valid   => open,                                     --                .valid
			mic_out_channel => open,                                     --      mic_output.channel
			mic_out_data    => open,                                     --                .data
			mic_out_error   => open,                                     --                .error
			mic_out_valid   => open,                                     --                .valid
			cfg_input_data  => open,                                     --       cfg_input.data
			cfg_input_error => open,                                     --                .error
			cfg_input_valid => open,                                     --                .valid
			rgb_input_data  => open,                                     --       rgb_input.data
			rgb_input_error => open,                                     --                .error
			rgb_input_valid => open,                                     --                .valid
			serial_clk      => pll_using_ad1939_mclk_outclk3_clk         --      serial_clk.clk
		);

	fe_fpga_microphone_encoder_decoder_11 : component som_system_FE_FPGA_Microphone_Encoder_Decoder_10.som_system_pkg.FE_FPGA_Microphone_Encoder_Decoder
		generic map (
			avalon_data_width => 32,
			mic_data_width    => 24,
			bme_data_width    => 96,
			rgb_data_width    => 16,
			cfg_data_width    => 16,
			ch_width          => 4,
			n_mics            => 16
		)
		port map (
			reset_n         => rst_controller_reset_out_reset_ports_inv, --           reset.reset_n
			serial_data_in  => mic_array11_physical_serial_data_in,      --  RJ45_Interface.serial_data_in
			serial_data_out => mic_array11_physical_serial_data_out,     --                .serial_data_out
			serial_clk_out  => mic_array11_physical_serial_clk_out,      --                .serial_clk_out
			sys_clk         => pll_using_ad1939_mclk_outclk0_clk,        --         sys_clk.clk
			busy_out        => mic_array11_control_busy_out,             -- control_conduit.busy_out
			bme_out_data    => open,                                     --      bme_output.data
			bme_out_error   => open,                                     --                .error
			bme_out_valid   => open,                                     --                .valid
			mic_out_channel => open,                                     --      mic_output.channel
			mic_out_data    => open,                                     --                .data
			mic_out_error   => open,                                     --                .error
			mic_out_valid   => open,                                     --                .valid
			cfg_input_data  => open,                                     --       cfg_input.data
			cfg_input_error => open,                                     --                .error
			cfg_input_valid => open,                                     --                .valid
			rgb_input_data  => open,                                     --       rgb_input.data
			rgb_input_error => open,                                     --                .error
			rgb_input_valid => open,                                     --                .valid
			serial_clk      => pll_using_ad1939_mclk_outclk3_clk         --      serial_clk.clk
		);

	fe_fpga_microphone_encoder_decoder_12 : component som_system_FE_FPGA_Microphone_Encoder_Decoder_10.som_system_pkg.FE_FPGA_Microphone_Encoder_Decoder
		generic map (
			avalon_data_width => 32,
			mic_data_width    => 24,
			bme_data_width    => 96,
			rgb_data_width    => 16,
			cfg_data_width    => 16,
			ch_width          => 4,
			n_mics            => 16
		)
		port map (
			reset_n         => rst_controller_reset_out_reset_ports_inv, --           reset.reset_n
			serial_data_in  => mic_array12_physical_serial_data_in,      --  RJ45_Interface.serial_data_in
			serial_data_out => mic_array12_physical_serial_data_out,     --                .serial_data_out
			serial_clk_out  => mic_array12_physical_serial_clk_out,      --                .serial_clk_out
			sys_clk         => pll_using_ad1939_mclk_outclk0_clk,        --         sys_clk.clk
			busy_out        => mic_array12_control_busy_out,             -- control_conduit.busy_out
			bme_out_data    => open,                                     --      bme_output.data
			bme_out_error   => open,                                     --                .error
			bme_out_valid   => open,                                     --                .valid
			mic_out_channel => open,                                     --      mic_output.channel
			mic_out_data    => open,                                     --                .data
			mic_out_error   => open,                                     --                .error
			mic_out_valid   => open,                                     --                .valid
			cfg_input_data  => open,                                     --       cfg_input.data
			cfg_input_error => open,                                     --                .error
			cfg_input_valid => open,                                     --                .valid
			rgb_input_data  => open,                                     --       rgb_input.data
			rgb_input_error => open,                                     --                .error
			rgb_input_valid => open,                                     --                .valid
			serial_clk      => pll_using_ad1939_mclk_outclk3_clk         --      serial_clk.clk
		);

	fe_fpga_microphone_encoder_decoder_13 : component som_system_FE_FPGA_Microphone_Encoder_Decoder_10.som_system_pkg.FE_FPGA_Microphone_Encoder_Decoder
		generic map (
			avalon_data_width => 32,
			mic_data_width    => 24,
			bme_data_width    => 96,
			rgb_data_width    => 16,
			cfg_data_width    => 16,
			ch_width          => 4,
			n_mics            => 16
		)
		port map (
			reset_n         => rst_controller_reset_out_reset_ports_inv, --           reset.reset_n
			serial_data_in  => mic_array13_physical_serial_data_in,      --  RJ45_Interface.serial_data_in
			serial_data_out => mic_array13_physical_serial_data_out,     --                .serial_data_out
			serial_clk_out  => mic_array13_physical_serial_clk_out,      --                .serial_clk_out
			sys_clk         => pll_using_ad1939_mclk_outclk0_clk,        --         sys_clk.clk
			busy_out        => mic_array13_control_busy_out,             -- control_conduit.busy_out
			bme_out_data    => open,                                     --      bme_output.data
			bme_out_error   => open,                                     --                .error
			bme_out_valid   => open,                                     --                .valid
			mic_out_channel => open,                                     --      mic_output.channel
			mic_out_data    => open,                                     --                .data
			mic_out_error   => open,                                     --                .error
			mic_out_valid   => open,                                     --                .valid
			cfg_input_data  => open,                                     --       cfg_input.data
			cfg_input_error => open,                                     --                .error
			cfg_input_valid => open,                                     --                .valid
			rgb_input_data  => open,                                     --       rgb_input.data
			rgb_input_error => open,                                     --                .error
			rgb_input_valid => open,                                     --                .valid
			serial_clk      => pll_using_ad1939_mclk_outclk3_clk         --      serial_clk.clk
		);

	fe_fpga_microphone_encoder_decoder_14 : component som_system_FE_FPGA_Microphone_Encoder_Decoder_10.som_system_pkg.FE_FPGA_Microphone_Encoder_Decoder
		generic map (
			avalon_data_width => 32,
			mic_data_width    => 24,
			bme_data_width    => 96,
			rgb_data_width    => 16,
			cfg_data_width    => 16,
			ch_width          => 4,
			n_mics            => 16
		)
		port map (
			reset_n         => rst_controller_001_reset_out_reset_ports_inv, --           reset.reset_n
			serial_data_in  => mic_array14_physical_serial_data_in,          --  RJ45_Interface.serial_data_in
			serial_data_out => mic_array14_physical_serial_data_out,         --                .serial_data_out
			serial_clk_out  => mic_array14_physical_serial_clk_out,          --                .serial_clk_out
			sys_clk         => clk_100_clk,                                  --         sys_clk.clk
			busy_out        => mic_array14_control_busy_out,                 -- control_conduit.busy_out
			bme_out_data    => open,                                         --      bme_output.data
			bme_out_error   => open,                                         --                .error
			bme_out_valid   => open,                                         --                .valid
			mic_out_channel => open,                                         --      mic_output.channel
			mic_out_data    => open,                                         --                .data
			mic_out_error   => open,                                         --                .error
			mic_out_valid   => open,                                         --                .valid
			cfg_input_data  => open,                                         --       cfg_input.data
			cfg_input_error => open,                                         --                .error
			cfg_input_valid => open,                                         --                .valid
			rgb_input_data  => open,                                         --       rgb_input.data
			rgb_input_error => open,                                         --                .error
			rgb_input_valid => open,                                         --                .valid
			serial_clk      => pll_using_ad1939_mclk_outclk3_clk             --      serial_clk.clk
		);

	fe_fpga_microphone_encoder_decoder_15 : component som_system_FE_FPGA_Microphone_Encoder_Decoder_10.som_system_pkg.FE_FPGA_Microphone_Encoder_Decoder
		generic map (
			avalon_data_width => 32,
			mic_data_width    => 24,
			bme_data_width    => 96,
			rgb_data_width    => 16,
			cfg_data_width    => 16,
			ch_width          => 4,
			n_mics            => 16
		)
		port map (
			reset_n         => rst_controller_reset_out_reset_ports_inv, --           reset.reset_n
			serial_data_in  => mic_array15_physical_serial_data_in,      --  RJ45_Interface.serial_data_in
			serial_data_out => mic_array15_physical_serial_data_out,     --                .serial_data_out
			serial_clk_out  => mic_array15_physical_serial_clk_out,      --                .serial_clk_out
			sys_clk         => pll_using_ad1939_mclk_outclk0_clk,        --         sys_clk.clk
			busy_out        => mic_array15_control_busy_out,             -- control_conduit.busy_out
			bme_out_data    => open,                                     --      bme_output.data
			bme_out_error   => open,                                     --                .error
			bme_out_valid   => open,                                     --                .valid
			mic_out_channel => open,                                     --      mic_output.channel
			mic_out_data    => open,                                     --                .data
			mic_out_error   => open,                                     --                .error
			mic_out_valid   => open,                                     --                .valid
			cfg_input_data  => open,                                     --       cfg_input.data
			cfg_input_error => open,                                     --                .error
			cfg_input_valid => open,                                     --                .valid
			rgb_input_data  => open,                                     --       rgb_input.data
			rgb_input_error => open,                                     --                .error
			rgb_input_valid => open,                                     --                .valid
			serial_clk      => pll_using_ad1939_mclk_outclk3_clk         --      serial_clk.clk
		);

	fe_fpga_microphone_encoder_decoder_2 : component som_system_FE_FPGA_Microphone_Encoder_Decoder_10.som_system_pkg.FE_FPGA_Microphone_Encoder_Decoder
		generic map (
			avalon_data_width => 32,
			mic_data_width    => 24,
			bme_data_width    => 96,
			rgb_data_width    => 16,
			cfg_data_width    => 16,
			ch_width          => 4,
			n_mics            => 16
		)
		port map (
			reset_n         => rst_controller_reset_out_reset_ports_inv, --           reset.reset_n
			serial_data_in  => mic_array2_physical_serial_data_in,       --  RJ45_Interface.serial_data_in
			serial_data_out => mic_array2_physical_serial_data_out,      --                .serial_data_out
			serial_clk_out  => mic_array2_physical_serial_clk_out,       --                .serial_clk_out
			sys_clk         => pll_using_ad1939_mclk_outclk0_clk,        --         sys_clk.clk
			busy_out        => mic_array2_control_busy_out,              -- control_conduit.busy_out
			bme_out_data    => open,                                     --      bme_output.data
			bme_out_error   => open,                                     --                .error
			bme_out_valid   => open,                                     --                .valid
			mic_out_channel => open,                                     --      mic_output.channel
			mic_out_data    => open,                                     --                .data
			mic_out_error   => open,                                     --                .error
			mic_out_valid   => open,                                     --                .valid
			cfg_input_data  => open,                                     --       cfg_input.data
			cfg_input_error => open,                                     --                .error
			cfg_input_valid => open,                                     --                .valid
			rgb_input_data  => open,                                     --       rgb_input.data
			rgb_input_error => open,                                     --                .error
			rgb_input_valid => open,                                     --                .valid
			serial_clk      => pll_using_ad1939_mclk_outclk3_clk         --      serial_clk.clk
		);

	fe_fpga_microphone_encoder_decoder_3 : component som_system_FE_FPGA_Microphone_Encoder_Decoder_10.som_system_pkg.FE_FPGA_Microphone_Encoder_Decoder
		generic map (
			avalon_data_width => 32,
			mic_data_width    => 24,
			bme_data_width    => 96,
			rgb_data_width    => 16,
			cfg_data_width    => 16,
			ch_width          => 4,
			n_mics            => 16
		)
		port map (
			reset_n         => rst_controller_reset_out_reset_ports_inv, --           reset.reset_n
			serial_data_in  => mic_array3_physical_serial_data_in,       --  RJ45_Interface.serial_data_in
			serial_data_out => mic_array3_physical_serial_data_out,      --                .serial_data_out
			serial_clk_out  => mic_array3_physical_serial_clk_out,       --                .serial_clk_out
			sys_clk         => pll_using_ad1939_mclk_outclk0_clk,        --         sys_clk.clk
			busy_out        => mic_array3_control_busy_out,              -- control_conduit.busy_out
			bme_out_data    => open,                                     --      bme_output.data
			bme_out_error   => open,                                     --                .error
			bme_out_valid   => open,                                     --                .valid
			mic_out_channel => open,                                     --      mic_output.channel
			mic_out_data    => open,                                     --                .data
			mic_out_error   => open,                                     --                .error
			mic_out_valid   => open,                                     --                .valid
			cfg_input_data  => open,                                     --       cfg_input.data
			cfg_input_error => open,                                     --                .error
			cfg_input_valid => open,                                     --                .valid
			rgb_input_data  => open,                                     --       rgb_input.data
			rgb_input_error => open,                                     --                .error
			rgb_input_valid => open,                                     --                .valid
			serial_clk      => pll_using_ad1939_mclk_outclk3_clk         --      serial_clk.clk
		);

	fe_fpga_microphone_encoder_decoder_4 : component som_system_FE_FPGA_Microphone_Encoder_Decoder_10.som_system_pkg.FE_FPGA_Microphone_Encoder_Decoder
		generic map (
			avalon_data_width => 32,
			mic_data_width    => 24,
			bme_data_width    => 96,
			rgb_data_width    => 16,
			cfg_data_width    => 16,
			ch_width          => 4,
			n_mics            => 16
		)
		port map (
			reset_n         => rst_controller_reset_out_reset_ports_inv, --           reset.reset_n
			serial_data_in  => mic_array4_physical_serial_data_in,       --  RJ45_Interface.serial_data_in
			serial_data_out => mic_array4_physical_serial_data_out,      --                .serial_data_out
			serial_clk_out  => mic_array4_physical_serial_clk_out,       --                .serial_clk_out
			sys_clk         => pll_using_ad1939_mclk_outclk0_clk,        --         sys_clk.clk
			busy_out        => mic_array4_control_busy_out,              -- control_conduit.busy_out
			bme_out_data    => open,                                     --      bme_output.data
			bme_out_error   => open,                                     --                .error
			bme_out_valid   => open,                                     --                .valid
			mic_out_channel => open,                                     --      mic_output.channel
			mic_out_data    => open,                                     --                .data
			mic_out_error   => open,                                     --                .error
			mic_out_valid   => open,                                     --                .valid
			cfg_input_data  => open,                                     --       cfg_input.data
			cfg_input_error => open,                                     --                .error
			cfg_input_valid => open,                                     --                .valid
			rgb_input_data  => open,                                     --       rgb_input.data
			rgb_input_error => open,                                     --                .error
			rgb_input_valid => open,                                     --                .valid
			serial_clk      => pll_using_ad1939_mclk_outclk3_clk         --      serial_clk.clk
		);

	fe_fpga_microphone_encoder_decoder_5 : component som_system_FE_FPGA_Microphone_Encoder_Decoder_10.som_system_pkg.FE_FPGA_Microphone_Encoder_Decoder
		generic map (
			avalon_data_width => 32,
			mic_data_width    => 24,
			bme_data_width    => 96,
			rgb_data_width    => 16,
			cfg_data_width    => 16,
			ch_width          => 4,
			n_mics            => 16
		)
		port map (
			reset_n         => rst_controller_reset_out_reset_ports_inv, --           reset.reset_n
			serial_data_in  => mic_array5_physical_serial_data_in,       --  RJ45_Interface.serial_data_in
			serial_data_out => mic_array5_physical_serial_data_out,      --                .serial_data_out
			serial_clk_out  => mic_array5_physical_serial_clk_out,       --                .serial_clk_out
			sys_clk         => pll_using_ad1939_mclk_outclk0_clk,        --         sys_clk.clk
			busy_out        => mic_array5_control_busy_out,              -- control_conduit.busy_out
			bme_out_data    => open,                                     --      bme_output.data
			bme_out_error   => open,                                     --                .error
			bme_out_valid   => open,                                     --                .valid
			mic_out_channel => open,                                     --      mic_output.channel
			mic_out_data    => open,                                     --                .data
			mic_out_error   => open,                                     --                .error
			mic_out_valid   => open,                                     --                .valid
			cfg_input_data  => open,                                     --       cfg_input.data
			cfg_input_error => open,                                     --                .error
			cfg_input_valid => open,                                     --                .valid
			rgb_input_data  => open,                                     --       rgb_input.data
			rgb_input_error => open,                                     --                .error
			rgb_input_valid => open,                                     --                .valid
			serial_clk      => pll_using_ad1939_mclk_outclk3_clk         --      serial_clk.clk
		);

	fe_fpga_microphone_encoder_decoder_6 : component som_system_FE_FPGA_Microphone_Encoder_Decoder_10.som_system_pkg.FE_FPGA_Microphone_Encoder_Decoder
		generic map (
			avalon_data_width => 32,
			mic_data_width    => 24,
			bme_data_width    => 96,
			rgb_data_width    => 16,
			cfg_data_width    => 16,
			ch_width          => 4,
			n_mics            => 16
		)
		port map (
			reset_n         => rst_controller_reset_out_reset_ports_inv, --           reset.reset_n
			serial_data_in  => mic_array6_physical_serial_data_in,       --  RJ45_Interface.serial_data_in
			serial_data_out => mic_array6_physical_serial_data_out,      --                .serial_data_out
			serial_clk_out  => mic_array6_physical_serial_clk_out,       --                .serial_clk_out
			sys_clk         => pll_using_ad1939_mclk_outclk0_clk,        --         sys_clk.clk
			busy_out        => mic_array6_physical_1_busy_out,           -- control_conduit.busy_out
			bme_out_data    => open,                                     --      bme_output.data
			bme_out_error   => open,                                     --                .error
			bme_out_valid   => open,                                     --                .valid
			mic_out_channel => open,                                     --      mic_output.channel
			mic_out_data    => open,                                     --                .data
			mic_out_error   => open,                                     --                .error
			mic_out_valid   => open,                                     --                .valid
			cfg_input_data  => open,                                     --       cfg_input.data
			cfg_input_error => open,                                     --                .error
			cfg_input_valid => open,                                     --                .valid
			rgb_input_data  => open,                                     --       rgb_input.data
			rgb_input_error => open,                                     --                .error
			rgb_input_valid => open,                                     --                .valid
			serial_clk      => pll_using_ad1939_mclk_outclk3_clk         --      serial_clk.clk
		);

	fe_fpga_microphone_encoder_decoder_7 : component som_system_FE_FPGA_Microphone_Encoder_Decoder_10.som_system_pkg.FE_FPGA_Microphone_Encoder_Decoder
		generic map (
			avalon_data_width => 32,
			mic_data_width    => 24,
			bme_data_width    => 96,
			rgb_data_width    => 16,
			cfg_data_width    => 16,
			ch_width          => 4,
			n_mics            => 16
		)
		port map (
			reset_n         => rst_controller_reset_out_reset_ports_inv, --           reset.reset_n
			serial_data_in  => mic_array7_physical_serial_data_in,       --  RJ45_Interface.serial_data_in
			serial_data_out => mic_array7_physical_serial_data_out,      --                .serial_data_out
			serial_clk_out  => mic_array7_physical_serial_clk_out,       --                .serial_clk_out
			sys_clk         => pll_using_ad1939_mclk_outclk0_clk,        --         sys_clk.clk
			busy_out        => mic_array7_control_busy_out,              -- control_conduit.busy_out
			bme_out_data    => open,                                     --      bme_output.data
			bme_out_error   => open,                                     --                .error
			bme_out_valid   => open,                                     --                .valid
			mic_out_channel => open,                                     --      mic_output.channel
			mic_out_data    => open,                                     --                .data
			mic_out_error   => open,                                     --                .error
			mic_out_valid   => open,                                     --                .valid
			cfg_input_data  => open,                                     --       cfg_input.data
			cfg_input_error => open,                                     --                .error
			cfg_input_valid => open,                                     --                .valid
			rgb_input_data  => open,                                     --       rgb_input.data
			rgb_input_error => open,                                     --                .error
			rgb_input_valid => open,                                     --                .valid
			serial_clk      => pll_using_ad1939_mclk_outclk3_clk         --      serial_clk.clk
		);

	fe_fpga_microphone_encoder_decoder_8 : component som_system_FE_FPGA_Microphone_Encoder_Decoder_10.som_system_pkg.FE_FPGA_Microphone_Encoder_Decoder
		generic map (
			avalon_data_width => 32,
			mic_data_width    => 24,
			bme_data_width    => 96,
			rgb_data_width    => 16,
			cfg_data_width    => 16,
			ch_width          => 4,
			n_mics            => 16
		)
		port map (
			reset_n         => rst_controller_reset_out_reset_ports_inv, --           reset.reset_n
			serial_data_in  => mic_array8_physical_serial_data_in,       --  RJ45_Interface.serial_data_in
			serial_data_out => mic_array8_physical_serial_data_out,      --                .serial_data_out
			serial_clk_out  => mic_array8_physical_serial_clk_out,       --                .serial_clk_out
			sys_clk         => pll_using_ad1939_mclk_outclk0_clk,        --         sys_clk.clk
			busy_out        => mic_array8_control_busy_out,              -- control_conduit.busy_out
			bme_out_data    => open,                                     --      bme_output.data
			bme_out_error   => open,                                     --                .error
			bme_out_valid   => open,                                     --                .valid
			mic_out_channel => open,                                     --      mic_output.channel
			mic_out_data    => open,                                     --                .data
			mic_out_error   => open,                                     --                .error
			mic_out_valid   => open,                                     --                .valid
			cfg_input_data  => open,                                     --       cfg_input.data
			cfg_input_error => open,                                     --                .error
			cfg_input_valid => open,                                     --                .valid
			rgb_input_data  => open,                                     --       rgb_input.data
			rgb_input_error => open,                                     --                .error
			rgb_input_valid => open,                                     --                .valid
			serial_clk      => pll_using_ad1939_mclk_outclk3_clk         --      serial_clk.clk
		);

	fe_fpga_microphone_encoder_decoder_9 : component som_system_FE_FPGA_Microphone_Encoder_Decoder_10.som_system_pkg.FE_FPGA_Microphone_Encoder_Decoder
		generic map (
			avalon_data_width => 32,
			mic_data_width    => 24,
			bme_data_width    => 96,
			rgb_data_width    => 16,
			cfg_data_width    => 16,
			ch_width          => 4,
			n_mics            => 16
		)
		port map (
			reset_n         => rst_controller_reset_out_reset_ports_inv, --           reset.reset_n
			serial_data_in  => mic_array9_physical_serial_data_in,       --  RJ45_Interface.serial_data_in
			serial_data_out => mic_array9_physical_serial_data_out,      --                .serial_data_out
			serial_clk_out  => mic_array9_physical_serial_clk_out,       --                .serial_clk_out
			sys_clk         => pll_using_ad1939_mclk_outclk0_clk,        --         sys_clk.clk
			busy_out        => mic_array9_control_busy_out,              -- control_conduit.busy_out
			bme_out_data    => open,                                     --      bme_output.data
			bme_out_error   => open,                                     --                .error
			bme_out_valid   => open,                                     --                .valid
			mic_out_channel => open,                                     --      mic_output.channel
			mic_out_data    => open,                                     --                .data
			mic_out_error   => open,                                     --                .error
			mic_out_valid   => open,                                     --                .valid
			cfg_input_data  => open,                                     --       cfg_input.data
			cfg_input_error => open,                                     --                .error
			cfg_input_valid => open,                                     --                .valid
			rgb_input_data  => open,                                     --       rgb_input.data
			rgb_input_error => open,                                     --                .error
			rgb_input_valid => open,                                     --                .valid
			serial_clk      => pll_using_ad1939_mclk_outclk3_clk         --      serial_clk.clk
		);

	fe_qsys_ad1939_audio_blade_v1_0 : component som_system_FE_Qsys_AD1939_Audio_Blade_v1_10.som_system_pkg.AD1939_hps_audio_blade
		port map (
			AD1939_ADC2_data    => open,                                --           Line_In.data
			AD1939_ADC2_channel => open,                                --                  .channel
			AD1939_ADC2_valid   => open,                                --                  .valid
			AD1939_ADC2_error   => open,                                --                  .error
			AD1939_ADC1_channel => open,                                --     Microphone_In.channel
			AD1939_ADC1_data    => open,                                --                  .data
			AD1939_ADC1_error   => open,                                --                  .error
			AD1939_ADC1_valid   => open,                                --                  .valid
			AD1939_DAC2_channel => avalon_st_adapter_003_out_0_channel, --          Line_Out.channel
			AD1939_DAC2_data    => avalon_st_adapter_003_out_0_data,    --                  .data
			AD1939_DAC2_error   => avalon_st_adapter_003_out_0_error,   --                  .error
			AD1939_DAC2_valid   => avalon_st_adapter_003_out_0_valid,   --                  .valid
			AD1939_DAC1_channel => avalon_st_adapter_002_out_0_channel, --     Headphone_Out.channel
			AD1939_DAC1_data    => avalon_st_adapter_002_out_0_data,    --                  .data
			AD1939_DAC1_error   => avalon_st_adapter_002_out_0_error,   --                  .error
			AD1939_DAC1_valid   => avalon_st_adapter_002_out_0_valid,   --                  .valid
			sys_clk             => pll_using_ad1939_mclk_outclk0_clk,   --           sys_clk.clk
			sys_reset           => rst_controller_reset_out_reset,      --         sys_reset.reset
			AD1939_ADC_ASDATA1  => ad1939_physical_ad1939_adc_asdata1,  -- connect_to_AD1939.ad1939_adc_asdata1
			AD1939_ADC_ASDATA2  => ad1939_physical_ad1939_adc_asdata2,  --                  .ad1939_adc_asdata2
			AD1939_DAC_DSDATA1  => ad1939_physical_ad1939_dac_dsdata1,  --                  .ad1939_dac_dsdata1
			AD1939_DAC_DSDATA2  => ad1939_physical_ad1939_dac_dsdata2,  --                  .ad1939_dac_dsdata2
			AD1939_DAC_DBCLK    => ad1939_physical_ad1939_dac_dbclk,    --                  .ad1939_dac_dbclk
			AD1939_DAC_DLRCLK   => ad1939_physical_ad1939_dac_dlrclk,   --                  .ad1939_dac_dlrclk
			AD1939_ADC_ALRCLK   => ad1939_alrclk_clk,                   --        clk_alrclk.clk
			AD1939_ADC_ABCLK    => ad1939_abclk_clk                     --         clk_abclk.clk
		);

	arria10_hps_0 : component som_system_altera_arria10_hps_180.som_system_pkg.som_system_altera_arria10_hps_180_zmlrihi
		generic map (
			F2S_Width => 6,
			S2F_Width => 6
		)
		port map (
			h2f_rst_n                 => arria10_hps_0_h2f_reset_reset,                     --         h2f_reset.reset_n
			h2f_cold_rst_n            => hps_0_h2f_reset_reset_n,                           --    h2f_cold_reset.reset_n
			s2f_user0_clk             => open,                                              --   h2f_user0_clock.clk
			emif_emif_to_hps          => emif_a10_hps_0_hps_emif_conduit_end_emif_to_hps,   --              emif.emif_to_hps
			emif_hps_to_emif          => arria10_hps_0_emif_hps_to_emif,                    --                  .hps_to_emif
			emif_emif_to_gp           => emif_a10_hps_0_hps_emif_conduit_end_emif_to_gp(0), --                  .emif_to_gp
			emif_gp_to_emif           => arria10_hps_0_emif_gp_to_emif,                     --                  .gp_to_emif
			f2h_axi_clk               => clk_100_clk,                                       --     f2h_axi_clock.clk
			f2h_axi_rst               => rst_controller_001_reset_out_reset_ports_inv,      --     f2h_axi_reset.reset_n
			f2h_AWID                  => open,                                              --     f2h_axi_slave.awid
			f2h_AWADDR                => open,                                              --                  .awaddr
			f2h_AWLEN                 => open,                                              --                  .awlen
			f2h_AWSIZE                => open,                                              --                  .awsize
			f2h_AWBURST               => open,                                              --                  .awburst
			f2h_AWLOCK                => open,                                              --                  .awlock
			f2h_AWCACHE               => open,                                              --                  .awcache
			f2h_AWPROT                => open,                                              --                  .awprot
			f2h_AWVALID               => open,                                              --                  .awvalid
			f2h_AWREADY               => open,                                              --                  .awready
			f2h_AWUSER                => open,                                              --                  .awuser
			f2h_WID                   => open,                                              --                  .wid
			f2h_WDATA                 => open,                                              --                  .wdata
			f2h_WSTRB                 => open,                                              --                  .wstrb
			f2h_WLAST                 => open,                                              --                  .wlast
			f2h_WVALID                => open,                                              --                  .wvalid
			f2h_WREADY                => open,                                              --                  .wready
			f2h_BID                   => open,                                              --                  .bid
			f2h_BRESP                 => open,                                              --                  .bresp
			f2h_BVALID                => open,                                              --                  .bvalid
			f2h_BREADY                => open,                                              --                  .bready
			f2h_ARID                  => open,                                              --                  .arid
			f2h_ARADDR                => open,                                              --                  .araddr
			f2h_ARLEN                 => open,                                              --                  .arlen
			f2h_ARSIZE                => open,                                              --                  .arsize
			f2h_ARBURST               => open,                                              --                  .arburst
			f2h_ARLOCK                => open,                                              --                  .arlock
			f2h_ARCACHE               => open,                                              --                  .arcache
			f2h_ARPROT                => open,                                              --                  .arprot
			f2h_ARVALID               => open,                                              --                  .arvalid
			f2h_ARREADY               => open,                                              --                  .arready
			f2h_ARUSER                => open,                                              --                  .aruser
			f2h_RID                   => open,                                              --                  .rid
			f2h_RDATA                 => open,                                              --                  .rdata
			f2h_RRESP                 => open,                                              --                  .rresp
			f2h_RLAST                 => open,                                              --                  .rlast
			f2h_RVALID                => open,                                              --                  .rvalid
			f2h_RREADY                => open,                                              --                  .rready
			h2f_lw_axi_clk            => clk_100_clk,                                       --  h2f_lw_axi_clock.clk
			h2f_lw_axi_rst            => rst_controller_001_reset_out_reset_ports_inv,      --  h2f_lw_axi_reset.reset_n
			h2f_lw_AWID               => arria10_hps_0_h2f_lw_axi_master_awid,              -- h2f_lw_axi_master.awid
			h2f_lw_AWADDR             => arria10_hps_0_h2f_lw_axi_master_awaddr,            --                  .awaddr
			h2f_lw_AWLEN              => arria10_hps_0_h2f_lw_axi_master_awlen,             --                  .awlen
			h2f_lw_AWSIZE             => arria10_hps_0_h2f_lw_axi_master_awsize,            --                  .awsize
			h2f_lw_AWBURST            => arria10_hps_0_h2f_lw_axi_master_awburst,           --                  .awburst
			h2f_lw_AWLOCK             => arria10_hps_0_h2f_lw_axi_master_awlock,            --                  .awlock
			h2f_lw_AWCACHE            => arria10_hps_0_h2f_lw_axi_master_awcache,           --                  .awcache
			h2f_lw_AWPROT             => arria10_hps_0_h2f_lw_axi_master_awprot,            --                  .awprot
			h2f_lw_AWVALID            => arria10_hps_0_h2f_lw_axi_master_awvalid,           --                  .awvalid
			h2f_lw_AWREADY            => arria10_hps_0_h2f_lw_axi_master_awready,           --                  .awready
			h2f_lw_AWUSER             => arria10_hps_0_h2f_lw_axi_master_awuser,            --                  .awuser
			h2f_lw_WID                => arria10_hps_0_h2f_lw_axi_master_wid,               --                  .wid
			h2f_lw_WDATA              => arria10_hps_0_h2f_lw_axi_master_wdata,             --                  .wdata
			h2f_lw_WSTRB              => arria10_hps_0_h2f_lw_axi_master_wstrb,             --                  .wstrb
			h2f_lw_WLAST              => arria10_hps_0_h2f_lw_axi_master_wlast,             --                  .wlast
			h2f_lw_WVALID             => arria10_hps_0_h2f_lw_axi_master_wvalid,            --                  .wvalid
			h2f_lw_WREADY             => arria10_hps_0_h2f_lw_axi_master_wready,            --                  .wready
			h2f_lw_BID                => arria10_hps_0_h2f_lw_axi_master_bid,               --                  .bid
			h2f_lw_BRESP              => arria10_hps_0_h2f_lw_axi_master_bresp,             --                  .bresp
			h2f_lw_BVALID             => arria10_hps_0_h2f_lw_axi_master_bvalid,            --                  .bvalid
			h2f_lw_BREADY             => arria10_hps_0_h2f_lw_axi_master_bready,            --                  .bready
			h2f_lw_ARID               => arria10_hps_0_h2f_lw_axi_master_arid,              --                  .arid
			h2f_lw_ARADDR             => arria10_hps_0_h2f_lw_axi_master_araddr,            --                  .araddr
			h2f_lw_ARLEN              => arria10_hps_0_h2f_lw_axi_master_arlen,             --                  .arlen
			h2f_lw_ARSIZE             => arria10_hps_0_h2f_lw_axi_master_arsize,            --                  .arsize
			h2f_lw_ARBURST            => arria10_hps_0_h2f_lw_axi_master_arburst,           --                  .arburst
			h2f_lw_ARLOCK             => arria10_hps_0_h2f_lw_axi_master_arlock,            --                  .arlock
			h2f_lw_ARCACHE            => arria10_hps_0_h2f_lw_axi_master_arcache,           --                  .arcache
			h2f_lw_ARPROT             => arria10_hps_0_h2f_lw_axi_master_arprot,            --                  .arprot
			h2f_lw_ARVALID            => arria10_hps_0_h2f_lw_axi_master_arvalid,           --                  .arvalid
			h2f_lw_ARREADY            => arria10_hps_0_h2f_lw_axi_master_arready,           --                  .arready
			h2f_lw_ARUSER             => arria10_hps_0_h2f_lw_axi_master_aruser,            --                  .aruser
			h2f_lw_RID                => arria10_hps_0_h2f_lw_axi_master_rid,               --                  .rid
			h2f_lw_RDATA              => arria10_hps_0_h2f_lw_axi_master_rdata,             --                  .rdata
			h2f_lw_RRESP              => arria10_hps_0_h2f_lw_axi_master_rresp,             --                  .rresp
			h2f_lw_RLAST              => arria10_hps_0_h2f_lw_axi_master_rlast,             --                  .rlast
			h2f_lw_RVALID             => arria10_hps_0_h2f_lw_axi_master_rvalid,            --                  .rvalid
			h2f_lw_RREADY             => arria10_hps_0_h2f_lw_axi_master_rready,            --                  .rready
			h2f_axi_clk               => axi_clk_bridge_in_clk_clk,                         --     h2f_axi_clock.clk
			h2f_axi_rst               => rst_controller_002_reset_out_reset_ports_inv,      --     h2f_axi_reset.reset_n
			h2f_AWID                  => arria10_hps_0_h2f_axi_master_awid,                 --    h2f_axi_master.awid
			h2f_AWADDR                => arria10_hps_0_h2f_axi_master_awaddr,               --                  .awaddr
			h2f_AWLEN                 => arria10_hps_0_h2f_axi_master_awlen,                --                  .awlen
			h2f_AWSIZE                => arria10_hps_0_h2f_axi_master_awsize,               --                  .awsize
			h2f_AWBURST               => arria10_hps_0_h2f_axi_master_awburst,              --                  .awburst
			h2f_AWLOCK                => arria10_hps_0_h2f_axi_master_awlock,               --                  .awlock
			h2f_AWCACHE               => arria10_hps_0_h2f_axi_master_awcache,              --                  .awcache
			h2f_AWPROT                => arria10_hps_0_h2f_axi_master_awprot,               --                  .awprot
			h2f_AWVALID               => arria10_hps_0_h2f_axi_master_awvalid,              --                  .awvalid
			h2f_AWREADY               => arria10_hps_0_h2f_axi_master_awready,              --                  .awready
			h2f_AWUSER                => arria10_hps_0_h2f_axi_master_awuser,               --                  .awuser
			h2f_WID                   => arria10_hps_0_h2f_axi_master_wid,                  --                  .wid
			h2f_WDATA                 => arria10_hps_0_h2f_axi_master_wdata,                --                  .wdata
			h2f_WSTRB                 => arria10_hps_0_h2f_axi_master_wstrb,                --                  .wstrb
			h2f_WLAST                 => arria10_hps_0_h2f_axi_master_wlast,                --                  .wlast
			h2f_WVALID                => arria10_hps_0_h2f_axi_master_wvalid,               --                  .wvalid
			h2f_WREADY                => arria10_hps_0_h2f_axi_master_wready,               --                  .wready
			h2f_BID                   => arria10_hps_0_h2f_axi_master_bid,                  --                  .bid
			h2f_BRESP                 => arria10_hps_0_h2f_axi_master_bresp,                --                  .bresp
			h2f_BVALID                => arria10_hps_0_h2f_axi_master_bvalid,               --                  .bvalid
			h2f_BREADY                => arria10_hps_0_h2f_axi_master_bready,               --                  .bready
			h2f_ARID                  => arria10_hps_0_h2f_axi_master_arid,                 --                  .arid
			h2f_ARADDR                => arria10_hps_0_h2f_axi_master_araddr,               --                  .araddr
			h2f_ARLEN                 => arria10_hps_0_h2f_axi_master_arlen,                --                  .arlen
			h2f_ARSIZE                => arria10_hps_0_h2f_axi_master_arsize,               --                  .arsize
			h2f_ARBURST               => arria10_hps_0_h2f_axi_master_arburst,              --                  .arburst
			h2f_ARLOCK                => arria10_hps_0_h2f_axi_master_arlock,               --                  .arlock
			h2f_ARCACHE               => arria10_hps_0_h2f_axi_master_arcache,              --                  .arcache
			h2f_ARPROT                => arria10_hps_0_h2f_axi_master_arprot,               --                  .arprot
			h2f_ARVALID               => arria10_hps_0_h2f_axi_master_arvalid,              --                  .arvalid
			h2f_ARREADY               => arria10_hps_0_h2f_axi_master_arready,              --                  .arready
			h2f_ARUSER                => arria10_hps_0_h2f_axi_master_aruser,               --                  .aruser
			h2f_RID                   => arria10_hps_0_h2f_axi_master_rid,                  --                  .rid
			h2f_RDATA                 => arria10_hps_0_h2f_axi_master_rdata,                --                  .rdata
			h2f_RRESP                 => arria10_hps_0_h2f_axi_master_rresp,                --                  .rresp
			h2f_RLAST                 => arria10_hps_0_h2f_axi_master_rlast,                --                  .rlast
			h2f_RVALID                => arria10_hps_0_h2f_axi_master_rvalid,               --                  .rvalid
			h2f_RREADY                => arria10_hps_0_h2f_axi_master_rready,               --                  .rready
			f2sdram0_clk              => clk_100_clk,                                       --    f2sdram0_clock.clk
			f2s_sdram0_rst            => rst_controller_001_reset_out_reset_ports_inv,      --    f2sdram0_reset.reset_n
			f2sdram0_ARADDR           => open,                                              --     f2sdram0_data.araddr
			f2sdram0_ARBURST          => open,                                              --                  .arburst
			f2sdram0_ARCACHE          => open,                                              --                  .arcache
			f2sdram0_ARID             => open,                                              --                  .arid
			f2sdram0_ARLEN            => open,                                              --                  .arlen
			f2sdram0_ARLOCK           => open,                                              --                  .arlock
			f2sdram0_ARPROT           => open,                                              --                  .arprot
			f2sdram0_ARREADY          => open,                                              --                  .arready
			f2sdram0_ARSIZE           => open,                                              --                  .arsize
			f2sdram0_ARUSER           => open,                                              --                  .aruser
			f2sdram0_ARVALID          => open,                                              --                  .arvalid
			f2sdram0_AWADDR           => open,                                              --                  .awaddr
			f2sdram0_AWBURST          => open,                                              --                  .awburst
			f2sdram0_AWCACHE          => open,                                              --                  .awcache
			f2sdram0_AWID             => open,                                              --                  .awid
			f2sdram0_AWLEN            => open,                                              --                  .awlen
			f2sdram0_AWLOCK           => open,                                              --                  .awlock
			f2sdram0_AWPROT           => open,                                              --                  .awprot
			f2sdram0_AWREADY          => open,                                              --                  .awready
			f2sdram0_AWSIZE           => open,                                              --                  .awsize
			f2sdram0_AWUSER           => open,                                              --                  .awuser
			f2sdram0_AWVALID          => open,                                              --                  .awvalid
			f2sdram0_WDATA            => open,                                              --                  .wdata
			f2sdram0_WID              => open,                                              --                  .wid
			f2sdram0_WLAST            => open,                                              --                  .wlast
			f2sdram0_WREADY           => open,                                              --                  .wready
			f2sdram0_WSTRB            => open,                                              --                  .wstrb
			f2sdram0_WVALID           => open,                                              --                  .wvalid
			f2sdram0_BID              => open,                                              --                  .bid
			f2sdram0_BREADY           => open,                                              --                  .bready
			f2sdram0_BRESP            => open,                                              --                  .bresp
			f2sdram0_BVALID           => open,                                              --                  .bvalid
			f2sdram0_RDATA            => open,                                              --                  .rdata
			f2sdram0_RID              => open,                                              --                  .rid
			f2sdram0_RLAST            => open,                                              --                  .rlast
			f2sdram0_RREADY           => open,                                              --                  .rready
			f2sdram0_RRESP            => open,                                              --                  .rresp
			f2sdram0_RVALID           => open,                                              --                  .rvalid
			f2h_irq_p0                => arria10_hps_0_f2h_irq0_irq,                        --          f2h_irq0.irq
			f2h_irq_p1                => arria10_hps_0_f2h_irq1_irq,                        --          f2h_irq1.irq
			spim0_mosi_o              => hps_spim0_mosi_o,                                  --             spim0.mosi_o
			spim0_miso_i              => hps_spim0_miso_i,                                  --                  .miso_i
			spim0_ss_in_n             => hps_spim0_ss_in_n,                                 --                  .ss_in_n
			spim0_mosi_oe             => hps_spim0_mosi_oe,                                 --                  .mosi_oe
			spim0_ss0_n_o             => hps_spim0_ss0_n_o,                                 --                  .ss0_n_o
			spim0_ss1_n_o             => hps_spim0_ss1_n_o,                                 --                  .ss1_n_o
			spim0_ss2_n_o             => hps_spim0_ss2_n_o,                                 --                  .ss2_n_o
			spim0_ss3_n_o             => hps_spim0_ss3_n_o,                                 --                  .ss3_n_o
			spim0_sclk_out            => hps_spim0_sclk_out_clk,                            --    spim0_sclk_out.clk
			i2c1_scl_i                => hps_i2c1_scl_in_clk,                               --       i2c1_scl_in.clk
			i2c1_scl_oe               => hps_i2c1_clk_clk,                                  --          i2c1_clk.clk
			i2c1_sda_i                => hps_i2c1_sda_i,                                    --              i2c1.sda_i
			i2c1_sda_oe               => hps_i2c1_sda_oe,                                   --                  .sda_oe
			hps_io_phery_emac1_TX_CLK => hps_io_hps_io_phery_emac1_TX_CLK,                  --            hps_io.hps_io_phery_emac1_TX_CLK
			hps_io_phery_emac1_TXD0   => hps_io_hps_io_phery_emac1_TXD0,                    --                  .hps_io_phery_emac1_TXD0
			hps_io_phery_emac1_TXD1   => hps_io_hps_io_phery_emac1_TXD1,                    --                  .hps_io_phery_emac1_TXD1
			hps_io_phery_emac1_TXD2   => hps_io_hps_io_phery_emac1_TXD2,                    --                  .hps_io_phery_emac1_TXD2
			hps_io_phery_emac1_TXD3   => hps_io_hps_io_phery_emac1_TXD3,                    --                  .hps_io_phery_emac1_TXD3
			hps_io_phery_emac1_RX_CTL => hps_io_hps_io_phery_emac1_RX_CTL,                  --                  .hps_io_phery_emac1_RX_CTL
			hps_io_phery_emac1_TX_CTL => hps_io_hps_io_phery_emac1_TX_CTL,                  --                  .hps_io_phery_emac1_TX_CTL
			hps_io_phery_emac1_RX_CLK => hps_io_hps_io_phery_emac1_RX_CLK,                  --                  .hps_io_phery_emac1_RX_CLK
			hps_io_phery_emac1_RXD0   => hps_io_hps_io_phery_emac1_RXD0,                    --                  .hps_io_phery_emac1_RXD0
			hps_io_phery_emac1_RXD1   => hps_io_hps_io_phery_emac1_RXD1,                    --                  .hps_io_phery_emac1_RXD1
			hps_io_phery_emac1_RXD2   => hps_io_hps_io_phery_emac1_RXD2,                    --                  .hps_io_phery_emac1_RXD2
			hps_io_phery_emac1_RXD3   => hps_io_hps_io_phery_emac1_RXD3,                    --                  .hps_io_phery_emac1_RXD3
			hps_io_phery_emac1_MDIO   => hps_io_hps_io_phery_emac1_MDIO,                    --                  .hps_io_phery_emac1_MDIO
			hps_io_phery_emac1_MDC    => hps_io_hps_io_phery_emac1_MDC,                     --                  .hps_io_phery_emac1_MDC
			hps_io_phery_sdmmc_CMD    => hps_io_hps_io_phery_sdmmc_CMD,                     --                  .hps_io_phery_sdmmc_CMD
			hps_io_phery_sdmmc_D0     => hps_io_hps_io_phery_sdmmc_D0,                      --                  .hps_io_phery_sdmmc_D0
			hps_io_phery_sdmmc_D1     => hps_io_hps_io_phery_sdmmc_D1,                      --                  .hps_io_phery_sdmmc_D1
			hps_io_phery_sdmmc_D2     => hps_io_hps_io_phery_sdmmc_D2,                      --                  .hps_io_phery_sdmmc_D2
			hps_io_phery_sdmmc_D3     => hps_io_hps_io_phery_sdmmc_D3,                      --                  .hps_io_phery_sdmmc_D3
			hps_io_phery_sdmmc_CCLK   => hps_io_hps_io_phery_sdmmc_CCLK,                    --                  .hps_io_phery_sdmmc_CCLK
			hps_io_phery_usb1_DATA0   => hps_io_hps_io_phery_usb1_DATA0,                    --                  .hps_io_phery_usb1_DATA0
			hps_io_phery_usb1_DATA1   => hps_io_hps_io_phery_usb1_DATA1,                    --                  .hps_io_phery_usb1_DATA1
			hps_io_phery_usb1_DATA2   => hps_io_hps_io_phery_usb1_DATA2,                    --                  .hps_io_phery_usb1_DATA2
			hps_io_phery_usb1_DATA3   => hps_io_hps_io_phery_usb1_DATA3,                    --                  .hps_io_phery_usb1_DATA3
			hps_io_phery_usb1_DATA4   => hps_io_hps_io_phery_usb1_DATA4,                    --                  .hps_io_phery_usb1_DATA4
			hps_io_phery_usb1_DATA5   => hps_io_hps_io_phery_usb1_DATA5,                    --                  .hps_io_phery_usb1_DATA5
			hps_io_phery_usb1_DATA6   => hps_io_hps_io_phery_usb1_DATA6,                    --                  .hps_io_phery_usb1_DATA6
			hps_io_phery_usb1_DATA7   => hps_io_hps_io_phery_usb1_DATA7,                    --                  .hps_io_phery_usb1_DATA7
			hps_io_phery_usb1_CLK     => hps_io_hps_io_phery_usb1_CLK,                      --                  .hps_io_phery_usb1_CLK
			hps_io_phery_usb1_STP     => hps_io_hps_io_phery_usb1_STP,                      --                  .hps_io_phery_usb1_STP
			hps_io_phery_usb1_DIR     => hps_io_hps_io_phery_usb1_DIR,                      --                  .hps_io_phery_usb1_DIR
			hps_io_phery_usb1_NXT     => hps_io_hps_io_phery_usb1_NXT,                      --                  .hps_io_phery_usb1_NXT
			hps_io_phery_uart1_RX     => hps_io_hps_io_phery_uart1_RX,                      --                  .hps_io_phery_uart1_RX
			hps_io_phery_uart1_TX     => hps_io_hps_io_phery_uart1_TX,                      --                  .hps_io_phery_uart1_TX
			hps_io_phery_i2c0_SDA     => hps_io_hps_io_phery_i2c0_SDA,                      --                  .hps_io_phery_i2c0_SDA
			hps_io_phery_i2c0_SCL     => hps_io_hps_io_phery_i2c0_SCL,                      --                  .hps_io_phery_i2c0_SCL
			hps_io_gpio_gpio2_io6     => hps_io_hps_io_gpio_gpio2_io6,                      --                  .hps_io_gpio_gpio2_io6
			hps_io_gpio_gpio2_io8     => hps_io_hps_io_gpio_gpio2_io8,                      --                  .hps_io_gpio_gpio2_io8
			hps_io_gpio_gpio0_io0     => hps_io_hps_io_gpio_gpio0_io0,                      --                  .hps_io_gpio_gpio0_io0
			hps_io_gpio_gpio0_io1     => hps_io_hps_io_gpio_gpio0_io1,                      --                  .hps_io_gpio_gpio0_io1
			hps_io_gpio_gpio0_io6     => hps_io_hps_io_gpio_gpio0_io6,                      --                  .hps_io_gpio_gpio0_io6
			hps_io_gpio_gpio0_io11    => hps_io_hps_io_gpio_gpio0_io11,                     --                  .hps_io_gpio_gpio0_io11
			hps_io_gpio_gpio1_io12    => hps_io_hps_io_gpio_gpio1_io12,                     --                  .hps_io_gpio_gpio1_io12
			hps_io_gpio_gpio1_io13    => hps_io_hps_io_gpio_gpio1_io13,                     --                  .hps_io_gpio_gpio1_io13
			hps_io_gpio_gpio1_io14    => hps_io_hps_io_gpio_gpio1_io14,                     --                  .hps_io_gpio_gpio1_io14
			hps_io_gpio_gpio1_io15    => hps_io_hps_io_gpio_gpio1_io15,                     --                  .hps_io_gpio_gpio1_io15
			hps_io_gpio_gpio1_io16    => hps_io_hps_io_gpio_gpio1_io16,                     --                  .hps_io_gpio_gpio1_io16
			hps_io_gpio_gpio1_io17    => hps_io_hps_io_gpio_gpio1_io17,                     --                  .hps_io_gpio_gpio1_io17
			hps_io_gpio_gpio1_io18    => hps_io_hps_io_gpio_gpio1_io18,                     --                  .hps_io_gpio_gpio1_io18
			hps_io_gpio_gpio1_io19    => hps_io_hps_io_gpio_gpio1_io19,                     --                  .hps_io_gpio_gpio1_io19
			hps_io_gpio_gpio1_io20    => hps_io_hps_io_gpio_gpio1_io20,                     --                  .hps_io_gpio_gpio1_io20
			hps_io_gpio_gpio1_io21    => hps_io_hps_io_gpio_gpio1_io21,                     --                  .hps_io_gpio_gpio1_io21
			hps_io_gpio_gpio1_io22    => hps_io_hps_io_gpio_gpio1_io22,                     --                  .hps_io_gpio_gpio1_io22
			hps_io_gpio_gpio1_io23    => hps_io_hps_io_gpio_gpio1_io23                      --                  .hps_io_gpio_gpio1_io23
		);

	emif_0 : component som_system_altera_emif_180.som_system_pkg.som_system_altera_emif_180_brz44ly
		port map (
			emif_usr_reset_n    => emif_0_emif_usr_reset_n_reset,                     --            emif_usr_reset_n.reset_n
			emif_usr_clk        => emif_0_emif_usr_clk_clk,                           --                emif_usr_clk.clk
			global_reset_n      => emif_0_global_reset_n_reset_n,                     --              global_reset_n.reset_n
			pll_ref_clk         => emif_0_pll_ref_clk_clk,                            --                 pll_ref_clk.clk
			oct_rzqin           => emif_0_oct_oct_rzqin,                              --                         oct.oct_rzqin
			mem_ck              => emif_0_mem_mem_ck,                                 --                         mem.mem_ck
			mem_ck_n            => emif_0_mem_mem_ck_n,                               --                            .mem_ck_n
			mem_a               => emif_0_mem_mem_a,                                  --                            .mem_a
			mem_act_n           => emif_0_mem_mem_act_n,                              --                            .mem_act_n
			mem_ba              => emif_0_mem_mem_ba,                                 --                            .mem_ba
			mem_bg              => emif_0_mem_mem_bg,                                 --                            .mem_bg
			mem_cke             => emif_0_mem_mem_cke,                                --                            .mem_cke
			mem_cs_n            => emif_0_mem_mem_cs_n,                               --                            .mem_cs_n
			mem_odt             => emif_0_mem_mem_odt,                                --                            .mem_odt
			mem_reset_n         => emif_0_mem_mem_reset_n,                            --                            .mem_reset_n
			mem_par             => emif_0_mem_mem_par,                                --                            .mem_par
			mem_alert_n         => emif_0_mem_mem_alert_n,                            --                            .mem_alert_n
			mem_dqs             => emif_0_mem_mem_dqs,                                --                            .mem_dqs
			mem_dqs_n           => emif_0_mem_mem_dqs_n,                              --                            .mem_dqs_n
			mem_dq              => emif_0_mem_mem_dq,                                 --                            .mem_dq
			mem_dbi_n           => emif_0_mem_mem_dbi_n,                              --                            .mem_dbi_n
			local_cal_success   => emif_0_status_local_cal_success,                   --                      status.local_cal_success
			local_cal_fail      => emif_0_status_local_cal_fail,                      --                            .local_cal_fail
			amm_ready_0         => emif_0_ctrl_amm_0_waitrequest,                     --                  ctrl_amm_0.waitrequest_n
			amm_read_0          => mm_interconnect_3_emif_0_ctrl_amm_0_read,          --                            .read
			amm_write_0         => mm_interconnect_3_emif_0_ctrl_amm_0_write,         --                            .write
			amm_address_0       => mm_interconnect_3_emif_0_ctrl_amm_0_address,       --                            .address
			amm_readdata_0      => mm_interconnect_3_emif_0_ctrl_amm_0_readdata,      --                            .readdata
			amm_writedata_0     => mm_interconnect_3_emif_0_ctrl_amm_0_writedata,     --                            .writedata
			amm_burstcount_0    => mm_interconnect_3_emif_0_ctrl_amm_0_burstcount,    --                            .burstcount
			amm_byteenable_0    => mm_interconnect_3_emif_0_ctrl_amm_0_byteenable,    --                            .byteenable
			amm_readdatavalid_0 => mm_interconnect_3_emif_0_ctrl_amm_0_readdatavalid, --                            .readdatavalid
			pll_extra_clk_0     => emif_0_pll_extra_clk_0_pll_extra_clk_0,            -- pll_extra_clk_0_conduit_end.pll_extra_clk_0
			pll_locked          => emif_0_pll_locked_pll_locked                       --      pll_locked_conduit_end.pll_locked
		);

	emif_a10_hps_0 : component som_system_altera_emif_a10_hps_180.som_system_pkg.som_system_altera_emif_a10_hps_180_uhly6ia
		port map (
			global_reset_n => emif_a10_hps_0_global_reset_reset_sink_reset_n,  -- global_reset_reset_sink.reset_n
			pll_ref_clk    => ddr_ref_clk_clk,                                 --  pll_ref_clk_clock_sink.clk
			oct_rzqin      => oct_oct_rzqin,                                   --         oct_conduit_end.oct_rzqin
			mem_ck         => mem_mem_ck,                                      --         mem_conduit_end.mem_ck
			mem_ck_n       => mem_mem_ck_n,                                    --                        .mem_ck_n
			mem_a          => mem_mem_a,                                       --                        .mem_a
			mem_act_n      => mem_mem_act_n,                                   --                        .mem_act_n
			mem_ba         => mem_mem_ba,                                      --                        .mem_ba
			mem_bg         => mem_mem_bg,                                      --                        .mem_bg
			mem_cke        => mem_mem_cke,                                     --                        .mem_cke
			mem_cs_n       => mem_mem_cs_n,                                    --                        .mem_cs_n
			mem_odt        => mem_mem_odt,                                     --                        .mem_odt
			mem_reset_n    => mem_mem_reset_n,                                 --                        .mem_reset_n
			mem_par        => mem_mem_par,                                     --                        .mem_par
			mem_alert_n    => mem_mem_alert_n,                                 --                        .mem_alert_n
			mem_dqs        => mem_mem_dqs,                                     --                        .mem_dqs
			mem_dqs_n      => mem_mem_dqs_n,                                   --                        .mem_dqs_n
			mem_dq         => mem_mem_dq,                                      --                        .mem_dq
			mem_dbi_n      => mem_mem_dbi_n,                                   --                        .mem_dbi_n
			hps_to_emif    => arria10_hps_0_emif_hps_to_emif,                  --    hps_emif_conduit_end.hps_to_emif
			emif_to_hps    => emif_a10_hps_0_hps_emif_conduit_end_emif_to_hps, --                        .emif_to_hps
			hps_to_emif_gp => arria10_hps_0_emif_gp_to_emif,                   --                        .gp_to_emif
			emif_to_hps_gp => emif_a10_hps_0_hps_emif_conduit_end_emif_to_gp   --                        .emif_to_gp
		);

	mm_clock_crossing_bridge_0 : component som_system_altera_avalon_mm_clock_crossing_bridge_180.som_system_pkg.altera_avalon_mm_clock_crossing_bridge
		generic map (
			DATA_WIDTH          => 512,
			SYMBOL_WIDTH        => 8,
			HDL_ADDR_WIDTH      => 32,
			BURSTCOUNT_WIDTH    => 7,
			COMMAND_FIFO_DEPTH  => 128,
			RESPONSE_FIFO_DEPTH => 128,
			MASTER_SYNC_DEPTH   => 2,
			SLAVE_SYNC_DEPTH    => 2
		)
		port map (
			m0_clk           => emif_0_emif_usr_clk_clk,                                       --   m0_clk.clk
			m0_reset         => rst_controller_003_reset_out_reset,                            -- m0_reset.reset
			s0_clk           => axi_clk_bridge_in_clk_clk,                                     --   s0_clk.clk
			s0_reset         => rst_controller_004_reset_out_reset,                            -- s0_reset.reset
			s0_waitrequest   => mm_interconnect_0_mm_clock_crossing_bridge_0_s0_waitrequest,   --       s0.waitrequest
			s0_readdata      => mm_interconnect_0_mm_clock_crossing_bridge_0_s0_readdata,      --         .readdata
			s0_readdatavalid => mm_interconnect_0_mm_clock_crossing_bridge_0_s0_readdatavalid, --         .readdatavalid
			s0_burstcount    => mm_interconnect_0_mm_clock_crossing_bridge_0_s0_burstcount,    --         .burstcount
			s0_writedata     => mm_interconnect_0_mm_clock_crossing_bridge_0_s0_writedata,     --         .writedata
			s0_address       => mm_interconnect_0_mm_clock_crossing_bridge_0_s0_address,       --         .address
			s0_write         => mm_interconnect_0_mm_clock_crossing_bridge_0_s0_write,         --         .write
			s0_read          => mm_interconnect_0_mm_clock_crossing_bridge_0_s0_read,          --         .read
			s0_byteenable    => mm_interconnect_0_mm_clock_crossing_bridge_0_s0_byteenable,    --         .byteenable
			s0_debugaccess   => mm_interconnect_0_mm_clock_crossing_bridge_0_s0_debugaccess,   --         .debugaccess
			m0_waitrequest   => mm_clock_crossing_bridge_0_m0_waitrequest,                     --       m0.waitrequest
			m0_readdata      => mm_clock_crossing_bridge_0_m0_readdata,                        --         .readdata
			m0_readdatavalid => mm_clock_crossing_bridge_0_m0_readdatavalid,                   --         .readdatavalid
			m0_burstcount    => mm_clock_crossing_bridge_0_m0_burstcount,                      --         .burstcount
			m0_writedata     => mm_clock_crossing_bridge_0_m0_writedata,                       --         .writedata
			m0_address       => mm_clock_crossing_bridge_0_m0_address,                         --         .address
			m0_write         => mm_clock_crossing_bridge_0_m0_write,                           --         .write
			m0_read          => mm_clock_crossing_bridge_0_m0_read,                            --         .read
			m0_byteenable    => mm_clock_crossing_bridge_0_m0_byteenable,                      --         .byteenable
			m0_debugaccess   => mm_clock_crossing_bridge_0_m0_debugaccess                      --         .debugaccess
		);

	mux_ddr_0 : component som_system_mux_ddr_10.som_system_pkg.mux_ddr
		port map (
			reset                                => rst_controller_001_reset_out_reset,                   --             reset.reset
			clock                                => clk_100_clk,                                          --        clock_sink.clk
			hps_master_araddr                    => mux_ddr_0_altera_axi_master_araddr,                   -- altera_axi_master.araddr
			hps_master_arburst                   => mux_ddr_0_altera_axi_master_arburst,                  --                  .arburst
			hps_master_arcache                   => mux_ddr_0_altera_axi_master_arcache,                  --                  .arcache
			hps_master_arid                      => mux_ddr_0_altera_axi_master_arid,                     --                  .arid
			hps_master_arlen                     => mux_ddr_0_altera_axi_master_arlen,                    --                  .arlen
			hps_master_arlock                    => mux_ddr_0_altera_axi_master_arlock,                   --                  .arlock
			hps_master_arprot                    => mux_ddr_0_altera_axi_master_arprot,                   --                  .arprot
			hps_master_arready                   => mux_ddr_0_altera_axi_master_arready,                  --                  .arready
			hps_master_arsize                    => mux_ddr_0_altera_axi_master_arsize,                   --                  .arsize
			hps_master_aruser                    => mux_ddr_0_altera_axi_master_aruser,                   --                  .aruser
			hps_master_arvalid                   => mux_ddr_0_altera_axi_master_arvalid,                  --                  .arvalid
			hps_master_awaddr                    => mux_ddr_0_altera_axi_master_awaddr,                   --                  .awaddr
			hps_master_awburst                   => mux_ddr_0_altera_axi_master_awburst,                  --                  .awburst
			hps_master_awcache                   => mux_ddr_0_altera_axi_master_awcache,                  --                  .awcache
			hps_master_awid                      => mux_ddr_0_altera_axi_master_awid,                     --                  .awid
			hps_master_awlen                     => mux_ddr_0_altera_axi_master_awlen,                    --                  .awlen
			hps_master_awlock                    => mux_ddr_0_altera_axi_master_awlock,                   --                  .awlock
			hps_master_awprot                    => mux_ddr_0_altera_axi_master_awprot,                   --                  .awprot
			hps_master_awready                   => mux_ddr_0_altera_axi_master_awready,                  --                  .awready
			hps_master_awsize                    => mux_ddr_0_altera_axi_master_awsize,                   --                  .awsize
			hps_master_awuser                    => mux_ddr_0_altera_axi_master_awuser,                   --                  .awuser
			hps_master_awvalid                   => mux_ddr_0_altera_axi_master_awvalid,                  --                  .awvalid
			hps_master_bid                       => mux_ddr_0_altera_axi_master_bid,                      --                  .bid
			hps_master_bready                    => mux_ddr_0_altera_axi_master_bready,                   --                  .bready
			hps_master_bresp                     => mux_ddr_0_altera_axi_master_bresp,                    --                  .bresp
			hps_master_bvalid                    => mux_ddr_0_altera_axi_master_bvalid,                   --                  .bvalid
			hps_master_rdata                     => mux_ddr_0_altera_axi_master_rdata,                    --                  .rdata
			hps_master_rid                       => mux_ddr_0_altera_axi_master_rid,                      --                  .rid
			hps_master_rlast                     => mux_ddr_0_altera_axi_master_rlast,                    --                  .rlast
			hps_master_rready                    => mux_ddr_0_altera_axi_master_rready,                   --                  .rready
			hps_master_rresp                     => mux_ddr_0_altera_axi_master_rresp,                    --                  .rresp
			hps_master_rvalid                    => mux_ddr_0_altera_axi_master_rvalid,                   --                  .rvalid
			hps_master_wdata                     => mux_ddr_0_altera_axi_master_wdata,                    --                  .wdata
			hps_master_wid                       => mux_ddr_0_altera_axi_master_wid,                      --                  .wid
			hps_master_wlast                     => mux_ddr_0_altera_axi_master_wlast,                    --                  .wlast
			hps_master_wready                    => mux_ddr_0_altera_axi_master_wready,                   --                  .wready
			hps_master_wstrb                     => mux_ddr_0_altera_axi_master_wstrb,                    --                  .wstrb
			hps_master_wvalid                    => mux_ddr_0_altera_axi_master_wvalid,                   --                  .wvalid
			arria10_hps_0_h2f_axi_master_awid    => mm_interconnect_1_mux_ddr_0_altera_axi_slave_awid,    --  altera_axi_slave.awid
			arria10_hps_0_h2f_axi_master_awaddr  => mm_interconnect_1_mux_ddr_0_altera_axi_slave_awaddr,  --                  .awaddr
			arria10_hps_0_h2f_axi_master_awlen   => mm_interconnect_1_mux_ddr_0_altera_axi_slave_awlen,   --                  .awlen
			arria10_hps_0_h2f_axi_master_awsize  => mm_interconnect_1_mux_ddr_0_altera_axi_slave_awsize,  --                  .awsize
			arria10_hps_0_h2f_axi_master_awburst => mm_interconnect_1_mux_ddr_0_altera_axi_slave_awburst, --                  .awburst
			arria10_hps_0_h2f_axi_master_awlock  => mm_interconnect_1_mux_ddr_0_altera_axi_slave_awlock,  --                  .awlock
			arria10_hps_0_h2f_axi_master_awcache => mm_interconnect_1_mux_ddr_0_altera_axi_slave_awcache, --                  .awcache
			arria10_hps_0_h2f_axi_master_awprot  => mm_interconnect_1_mux_ddr_0_altera_axi_slave_awprot,  --                  .awprot
			arria10_hps_0_h2f_axi_master_awvalid => mm_interconnect_1_mux_ddr_0_altera_axi_slave_awvalid, --                  .awvalid
			arria10_hps_0_h2f_axi_master_awready => mm_interconnect_1_mux_ddr_0_altera_axi_slave_awready, --                  .awready
			arria10_hps_0_h2f_axi_master_awuser  => mm_interconnect_1_mux_ddr_0_altera_axi_slave_awuser,  --                  .awuser
			arria10_hps_0_h2f_axi_master_wid     => mm_interconnect_1_mux_ddr_0_altera_axi_slave_wid,     --                  .wid
			arria10_hps_0_h2f_axi_master_wdata   => mm_interconnect_1_mux_ddr_0_altera_axi_slave_wdata,   --                  .wdata
			arria10_hps_0_h2f_axi_master_wstrb   => mm_interconnect_1_mux_ddr_0_altera_axi_slave_wstrb,   --                  .wstrb
			arria10_hps_0_h2f_axi_master_wlast   => mm_interconnect_1_mux_ddr_0_altera_axi_slave_wlast,   --                  .wlast
			arria10_hps_0_h2f_axi_master_wvalid  => mm_interconnect_1_mux_ddr_0_altera_axi_slave_wvalid,  --                  .wvalid
			arria10_hps_0_h2f_axi_master_wready  => mm_interconnect_1_mux_ddr_0_altera_axi_slave_wready,  --                  .wready
			arria10_hps_0_h2f_axi_master_bid     => mm_interconnect_1_mux_ddr_0_altera_axi_slave_bid,     --                  .bid
			arria10_hps_0_h2f_axi_master_bresp   => mm_interconnect_1_mux_ddr_0_altera_axi_slave_bresp,   --                  .bresp
			arria10_hps_0_h2f_axi_master_bvalid  => mm_interconnect_1_mux_ddr_0_altera_axi_slave_bvalid,  --                  .bvalid
			arria10_hps_0_h2f_axi_master_bready  => mm_interconnect_1_mux_ddr_0_altera_axi_slave_bready,  --                  .bready
			arria10_hps_0_h2f_axi_master_arid    => mm_interconnect_1_mux_ddr_0_altera_axi_slave_arid,    --                  .arid
			arria10_hps_0_h2f_axi_master_araddr  => mm_interconnect_1_mux_ddr_0_altera_axi_slave_araddr,  --                  .araddr
			arria10_hps_0_h2f_axi_master_arlen   => mm_interconnect_1_mux_ddr_0_altera_axi_slave_arlen,   --                  .arlen
			arria10_hps_0_h2f_axi_master_arsize  => mm_interconnect_1_mux_ddr_0_altera_axi_slave_arsize,  --                  .arsize
			arria10_hps_0_h2f_axi_master_arburst => mm_interconnect_1_mux_ddr_0_altera_axi_slave_arburst, --                  .arburst
			arria10_hps_0_h2f_axi_master_arlock  => mm_interconnect_1_mux_ddr_0_altera_axi_slave_arlock,  --                  .arlock
			arria10_hps_0_h2f_axi_master_arcache => mm_interconnect_1_mux_ddr_0_altera_axi_slave_arcache, --                  .arcache
			arria10_hps_0_h2f_axi_master_arprot  => mm_interconnect_1_mux_ddr_0_altera_axi_slave_arprot,  --                  .arprot
			arria10_hps_0_h2f_axi_master_arvalid => mm_interconnect_1_mux_ddr_0_altera_axi_slave_arvalid, --                  .arvalid
			arria10_hps_0_h2f_axi_master_arready => mm_interconnect_1_mux_ddr_0_altera_axi_slave_arready, --                  .arready
			arria10_hps_0_h2f_axi_master_aruser  => mm_interconnect_1_mux_ddr_0_altera_axi_slave_aruser,  --                  .aruser
			arria10_hps_0_h2f_axi_master_rid     => mm_interconnect_1_mux_ddr_0_altera_axi_slave_rid,     --                  .rid
			arria10_hps_0_h2f_axi_master_rdata   => mm_interconnect_1_mux_ddr_0_altera_axi_slave_rdata,   --                  .rdata
			arria10_hps_0_h2f_axi_master_rresp   => mm_interconnect_1_mux_ddr_0_altera_axi_slave_rresp,   --                  .rresp
			arria10_hps_0_h2f_axi_master_rlast   => mm_interconnect_1_mux_ddr_0_altera_axi_slave_rlast,   --                  .rlast
			arria10_hps_0_h2f_axi_master_rvalid  => mm_interconnect_1_mux_ddr_0_altera_axi_slave_rvalid,  --                  .rvalid
			arria10_hps_0_h2f_axi_master_rready  => mm_interconnect_1_mux_ddr_0_altera_axi_slave_rready,  --                  .rready
			add_sel                              => addr_sel_in_add_sel                                   --      addr_sel_pio.add_sel
		);

	pll_using_ad1939_mclk : component som_system_altera_iopll_180.som_system_pkg.som_system_altera_iopll_180_pjxg52y
		port map (
			rst      => reset_reset_n_ports_inv,           --   reset.reset
			refclk   => ad1939_mclk_clk,                   --  refclk.clk
			locked   => mclk_pll_locked_export,            --  locked.export
			outclk_0 => pll_using_ad1939_mclk_outclk0_clk, -- outclk0.clk
			outclk_1 => pll_using_ad1939_mclk_outclk1_clk, -- outclk1.clk
			outclk_2 => pll_using_ad1939_mclk_outclk2_clk, -- outclk2.clk
			outclk_3 => pll_using_ad1939_mclk_outclk3_clk, -- outclk3.clk
			outclk_4 => pll_using_ad1939_mclk_outclk4_clk  -- outclk4.clk
		);

	som_config : component som_system_altera_avalon_pio_180.som_system_pkg.som_system_altera_avalon_pio_180_z5a3aci
		port map (
			clk        => clk_100_clk,                                     --                 clk.clk
			reset_n    => rst_controller_001_reset_out_reset_ports_inv,    --               reset.reset_n
			address    => mm_interconnect_2_som_config_s1_address,         --                  s1.address
			write_n    => mm_interconnect_2_som_config_s1_write_ports_inv, --                    .write_n
			writedata  => mm_interconnect_2_som_config_s1_writedata,       --                    .writedata
			chipselect => mm_interconnect_2_som_config_s1_chipselect,      --                    .chipselect
			readdata   => mm_interconnect_2_som_config_s1_readdata,        --                    .readdata
			bidir_port => som_config_pio_export                            -- external_connection.export
		);

	mm_interconnect_0 : component som_system_altera_mm_interconnect_180.som_system_pkg.som_system_altera_mm_interconnect_180_d4sniia
		port map (
			mux_ddr_0_altera_axi_master_awid                                => mux_ddr_0_altera_axi_master_awid,                              --                               mux_ddr_0_altera_axi_master.awid
			mux_ddr_0_altera_axi_master_awaddr                              => mux_ddr_0_altera_axi_master_awaddr,                            --                                                          .awaddr
			mux_ddr_0_altera_axi_master_awlen                               => mux_ddr_0_altera_axi_master_awlen,                             --                                                          .awlen
			mux_ddr_0_altera_axi_master_awsize                              => mux_ddr_0_altera_axi_master_awsize,                            --                                                          .awsize
			mux_ddr_0_altera_axi_master_awburst                             => mux_ddr_0_altera_axi_master_awburst,                           --                                                          .awburst
			mux_ddr_0_altera_axi_master_awlock                              => mux_ddr_0_altera_axi_master_awlock,                            --                                                          .awlock
			mux_ddr_0_altera_axi_master_awcache                             => mux_ddr_0_altera_axi_master_awcache,                           --                                                          .awcache
			mux_ddr_0_altera_axi_master_awprot                              => mux_ddr_0_altera_axi_master_awprot,                            --                                                          .awprot
			mux_ddr_0_altera_axi_master_awuser                              => mux_ddr_0_altera_axi_master_awuser,                            --                                                          .awuser
			mux_ddr_0_altera_axi_master_awvalid                             => mux_ddr_0_altera_axi_master_awvalid,                           --                                                          .awvalid
			mux_ddr_0_altera_axi_master_awready                             => mux_ddr_0_altera_axi_master_awready,                           --                                                          .awready
			mux_ddr_0_altera_axi_master_wid                                 => mux_ddr_0_altera_axi_master_wid,                               --                                                          .wid
			mux_ddr_0_altera_axi_master_wdata                               => mux_ddr_0_altera_axi_master_wdata,                             --                                                          .wdata
			mux_ddr_0_altera_axi_master_wstrb                               => mux_ddr_0_altera_axi_master_wstrb,                             --                                                          .wstrb
			mux_ddr_0_altera_axi_master_wlast                               => mux_ddr_0_altera_axi_master_wlast,                             --                                                          .wlast
			mux_ddr_0_altera_axi_master_wvalid                              => mux_ddr_0_altera_axi_master_wvalid,                            --                                                          .wvalid
			mux_ddr_0_altera_axi_master_wready                              => mux_ddr_0_altera_axi_master_wready,                            --                                                          .wready
			mux_ddr_0_altera_axi_master_bid                                 => mux_ddr_0_altera_axi_master_bid,                               --                                                          .bid
			mux_ddr_0_altera_axi_master_bresp                               => mux_ddr_0_altera_axi_master_bresp,                             --                                                          .bresp
			mux_ddr_0_altera_axi_master_bvalid                              => mux_ddr_0_altera_axi_master_bvalid,                            --                                                          .bvalid
			mux_ddr_0_altera_axi_master_bready                              => mux_ddr_0_altera_axi_master_bready,                            --                                                          .bready
			mux_ddr_0_altera_axi_master_arid                                => mux_ddr_0_altera_axi_master_arid,                              --                                                          .arid
			mux_ddr_0_altera_axi_master_araddr                              => mux_ddr_0_altera_axi_master_araddr,                            --                                                          .araddr
			mux_ddr_0_altera_axi_master_arlen                               => mux_ddr_0_altera_axi_master_arlen,                             --                                                          .arlen
			mux_ddr_0_altera_axi_master_arsize                              => mux_ddr_0_altera_axi_master_arsize,                            --                                                          .arsize
			mux_ddr_0_altera_axi_master_arburst                             => mux_ddr_0_altera_axi_master_arburst,                           --                                                          .arburst
			mux_ddr_0_altera_axi_master_arlock                              => mux_ddr_0_altera_axi_master_arlock,                            --                                                          .arlock
			mux_ddr_0_altera_axi_master_arcache                             => mux_ddr_0_altera_axi_master_arcache,                           --                                                          .arcache
			mux_ddr_0_altera_axi_master_arprot                              => mux_ddr_0_altera_axi_master_arprot,                            --                                                          .arprot
			mux_ddr_0_altera_axi_master_aruser                              => mux_ddr_0_altera_axi_master_aruser,                            --                                                          .aruser
			mux_ddr_0_altera_axi_master_arvalid                             => mux_ddr_0_altera_axi_master_arvalid,                           --                                                          .arvalid
			mux_ddr_0_altera_axi_master_arready                             => mux_ddr_0_altera_axi_master_arready,                           --                                                          .arready
			mux_ddr_0_altera_axi_master_rid                                 => mux_ddr_0_altera_axi_master_rid,                               --                                                          .rid
			mux_ddr_0_altera_axi_master_rdata                               => mux_ddr_0_altera_axi_master_rdata,                             --                                                          .rdata
			mux_ddr_0_altera_axi_master_rresp                               => mux_ddr_0_altera_axi_master_rresp,                             --                                                          .rresp
			mux_ddr_0_altera_axi_master_rlast                               => mux_ddr_0_altera_axi_master_rlast,                             --                                                          .rlast
			mux_ddr_0_altera_axi_master_rvalid                              => mux_ddr_0_altera_axi_master_rvalid,                            --                                                          .rvalid
			mux_ddr_0_altera_axi_master_rready                              => mux_ddr_0_altera_axi_master_rready,                            --                                                          .rready
			axi_clk_bridge_out_clk_clk                                      => axi_clk_bridge_in_clk_clk,                                     --                                    axi_clk_bridge_out_clk.clk
			clk_1_clk_clk                                                   => clk_100_clk,                                                   --                                                 clk_1_clk.clk
			mm_clock_crossing_bridge_0_s0_reset_reset_bridge_in_reset_reset => rst_controller_004_reset_out_reset,                            -- mm_clock_crossing_bridge_0_s0_reset_reset_bridge_in_reset.reset
			mux_ddr_0_reset_reset_bridge_in_reset_reset                     => rst_controller_001_reset_out_reset,                            --                     mux_ddr_0_reset_reset_bridge_in_reset.reset
			mm_clock_crossing_bridge_0_s0_address                           => mm_interconnect_0_mm_clock_crossing_bridge_0_s0_address,       --                             mm_clock_crossing_bridge_0_s0.address
			mm_clock_crossing_bridge_0_s0_write                             => mm_interconnect_0_mm_clock_crossing_bridge_0_s0_write,         --                                                          .write
			mm_clock_crossing_bridge_0_s0_read                              => mm_interconnect_0_mm_clock_crossing_bridge_0_s0_read,          --                                                          .read
			mm_clock_crossing_bridge_0_s0_readdata                          => mm_interconnect_0_mm_clock_crossing_bridge_0_s0_readdata,      --                                                          .readdata
			mm_clock_crossing_bridge_0_s0_writedata                         => mm_interconnect_0_mm_clock_crossing_bridge_0_s0_writedata,     --                                                          .writedata
			mm_clock_crossing_bridge_0_s0_burstcount                        => mm_interconnect_0_mm_clock_crossing_bridge_0_s0_burstcount,    --                                                          .burstcount
			mm_clock_crossing_bridge_0_s0_byteenable                        => mm_interconnect_0_mm_clock_crossing_bridge_0_s0_byteenable,    --                                                          .byteenable
			mm_clock_crossing_bridge_0_s0_readdatavalid                     => mm_interconnect_0_mm_clock_crossing_bridge_0_s0_readdatavalid, --                                                          .readdatavalid
			mm_clock_crossing_bridge_0_s0_waitrequest                       => mm_interconnect_0_mm_clock_crossing_bridge_0_s0_waitrequest,   --                                                          .waitrequest
			mm_clock_crossing_bridge_0_s0_debugaccess                       => mm_interconnect_0_mm_clock_crossing_bridge_0_s0_debugaccess    --                                                          .debugaccess
		);

	mm_interconnect_1 : component som_system_altera_mm_interconnect_180.som_system_pkg.som_system_altera_mm_interconnect_180_2zdh4ci
		port map (
			arria10_hps_0_h2f_axi_master_awid                       => arria10_hps_0_h2f_axi_master_awid,                    --                      arria10_hps_0_h2f_axi_master.awid
			arria10_hps_0_h2f_axi_master_awaddr                     => arria10_hps_0_h2f_axi_master_awaddr,                  --                                                  .awaddr
			arria10_hps_0_h2f_axi_master_awlen                      => arria10_hps_0_h2f_axi_master_awlen,                   --                                                  .awlen
			arria10_hps_0_h2f_axi_master_awsize                     => arria10_hps_0_h2f_axi_master_awsize,                  --                                                  .awsize
			arria10_hps_0_h2f_axi_master_awburst                    => arria10_hps_0_h2f_axi_master_awburst,                 --                                                  .awburst
			arria10_hps_0_h2f_axi_master_awlock                     => arria10_hps_0_h2f_axi_master_awlock,                  --                                                  .awlock
			arria10_hps_0_h2f_axi_master_awcache                    => arria10_hps_0_h2f_axi_master_awcache,                 --                                                  .awcache
			arria10_hps_0_h2f_axi_master_awprot                     => arria10_hps_0_h2f_axi_master_awprot,                  --                                                  .awprot
			arria10_hps_0_h2f_axi_master_awuser                     => arria10_hps_0_h2f_axi_master_awuser,                  --                                                  .awuser
			arria10_hps_0_h2f_axi_master_awvalid                    => arria10_hps_0_h2f_axi_master_awvalid,                 --                                                  .awvalid
			arria10_hps_0_h2f_axi_master_awready                    => arria10_hps_0_h2f_axi_master_awready,                 --                                                  .awready
			arria10_hps_0_h2f_axi_master_wid                        => arria10_hps_0_h2f_axi_master_wid,                     --                                                  .wid
			arria10_hps_0_h2f_axi_master_wdata                      => arria10_hps_0_h2f_axi_master_wdata,                   --                                                  .wdata
			arria10_hps_0_h2f_axi_master_wstrb                      => arria10_hps_0_h2f_axi_master_wstrb,                   --                                                  .wstrb
			arria10_hps_0_h2f_axi_master_wlast                      => arria10_hps_0_h2f_axi_master_wlast,                   --                                                  .wlast
			arria10_hps_0_h2f_axi_master_wvalid                     => arria10_hps_0_h2f_axi_master_wvalid,                  --                                                  .wvalid
			arria10_hps_0_h2f_axi_master_wready                     => arria10_hps_0_h2f_axi_master_wready,                  --                                                  .wready
			arria10_hps_0_h2f_axi_master_bid                        => arria10_hps_0_h2f_axi_master_bid,                     --                                                  .bid
			arria10_hps_0_h2f_axi_master_bresp                      => arria10_hps_0_h2f_axi_master_bresp,                   --                                                  .bresp
			arria10_hps_0_h2f_axi_master_bvalid                     => arria10_hps_0_h2f_axi_master_bvalid,                  --                                                  .bvalid
			arria10_hps_0_h2f_axi_master_bready                     => arria10_hps_0_h2f_axi_master_bready,                  --                                                  .bready
			arria10_hps_0_h2f_axi_master_arid                       => arria10_hps_0_h2f_axi_master_arid,                    --                                                  .arid
			arria10_hps_0_h2f_axi_master_araddr                     => arria10_hps_0_h2f_axi_master_araddr,                  --                                                  .araddr
			arria10_hps_0_h2f_axi_master_arlen                      => arria10_hps_0_h2f_axi_master_arlen,                   --                                                  .arlen
			arria10_hps_0_h2f_axi_master_arsize                     => arria10_hps_0_h2f_axi_master_arsize,                  --                                                  .arsize
			arria10_hps_0_h2f_axi_master_arburst                    => arria10_hps_0_h2f_axi_master_arburst,                 --                                                  .arburst
			arria10_hps_0_h2f_axi_master_arlock                     => arria10_hps_0_h2f_axi_master_arlock,                  --                                                  .arlock
			arria10_hps_0_h2f_axi_master_arcache                    => arria10_hps_0_h2f_axi_master_arcache,                 --                                                  .arcache
			arria10_hps_0_h2f_axi_master_arprot                     => arria10_hps_0_h2f_axi_master_arprot,                  --                                                  .arprot
			arria10_hps_0_h2f_axi_master_aruser                     => arria10_hps_0_h2f_axi_master_aruser,                  --                                                  .aruser
			arria10_hps_0_h2f_axi_master_arvalid                    => arria10_hps_0_h2f_axi_master_arvalid,                 --                                                  .arvalid
			arria10_hps_0_h2f_axi_master_arready                    => arria10_hps_0_h2f_axi_master_arready,                 --                                                  .arready
			arria10_hps_0_h2f_axi_master_rid                        => arria10_hps_0_h2f_axi_master_rid,                     --                                                  .rid
			arria10_hps_0_h2f_axi_master_rdata                      => arria10_hps_0_h2f_axi_master_rdata,                   --                                                  .rdata
			arria10_hps_0_h2f_axi_master_rresp                      => arria10_hps_0_h2f_axi_master_rresp,                   --                                                  .rresp
			arria10_hps_0_h2f_axi_master_rlast                      => arria10_hps_0_h2f_axi_master_rlast,                   --                                                  .rlast
			arria10_hps_0_h2f_axi_master_rvalid                     => arria10_hps_0_h2f_axi_master_rvalid,                  --                                                  .rvalid
			arria10_hps_0_h2f_axi_master_rready                     => arria10_hps_0_h2f_axi_master_rready,                  --                                                  .rready
			mux_ddr_0_altera_axi_slave_awid                         => mm_interconnect_1_mux_ddr_0_altera_axi_slave_awid,    --                        mux_ddr_0_altera_axi_slave.awid
			mux_ddr_0_altera_axi_slave_awaddr                       => mm_interconnect_1_mux_ddr_0_altera_axi_slave_awaddr,  --                                                  .awaddr
			mux_ddr_0_altera_axi_slave_awlen                        => mm_interconnect_1_mux_ddr_0_altera_axi_slave_awlen,   --                                                  .awlen
			mux_ddr_0_altera_axi_slave_awsize                       => mm_interconnect_1_mux_ddr_0_altera_axi_slave_awsize,  --                                                  .awsize
			mux_ddr_0_altera_axi_slave_awburst                      => mm_interconnect_1_mux_ddr_0_altera_axi_slave_awburst, --                                                  .awburst
			mux_ddr_0_altera_axi_slave_awlock                       => mm_interconnect_1_mux_ddr_0_altera_axi_slave_awlock,  --                                                  .awlock
			mux_ddr_0_altera_axi_slave_awcache                      => mm_interconnect_1_mux_ddr_0_altera_axi_slave_awcache, --                                                  .awcache
			mux_ddr_0_altera_axi_slave_awprot                       => mm_interconnect_1_mux_ddr_0_altera_axi_slave_awprot,  --                                                  .awprot
			mux_ddr_0_altera_axi_slave_awuser                       => mm_interconnect_1_mux_ddr_0_altera_axi_slave_awuser,  --                                                  .awuser
			mux_ddr_0_altera_axi_slave_awvalid                      => mm_interconnect_1_mux_ddr_0_altera_axi_slave_awvalid, --                                                  .awvalid
			mux_ddr_0_altera_axi_slave_awready                      => mm_interconnect_1_mux_ddr_0_altera_axi_slave_awready, --                                                  .awready
			mux_ddr_0_altera_axi_slave_wid                          => mm_interconnect_1_mux_ddr_0_altera_axi_slave_wid,     --                                                  .wid
			mux_ddr_0_altera_axi_slave_wdata                        => mm_interconnect_1_mux_ddr_0_altera_axi_slave_wdata,   --                                                  .wdata
			mux_ddr_0_altera_axi_slave_wstrb                        => mm_interconnect_1_mux_ddr_0_altera_axi_slave_wstrb,   --                                                  .wstrb
			mux_ddr_0_altera_axi_slave_wlast                        => mm_interconnect_1_mux_ddr_0_altera_axi_slave_wlast,   --                                                  .wlast
			mux_ddr_0_altera_axi_slave_wvalid                       => mm_interconnect_1_mux_ddr_0_altera_axi_slave_wvalid,  --                                                  .wvalid
			mux_ddr_0_altera_axi_slave_wready                       => mm_interconnect_1_mux_ddr_0_altera_axi_slave_wready,  --                                                  .wready
			mux_ddr_0_altera_axi_slave_bid                          => mm_interconnect_1_mux_ddr_0_altera_axi_slave_bid,     --                                                  .bid
			mux_ddr_0_altera_axi_slave_bresp                        => mm_interconnect_1_mux_ddr_0_altera_axi_slave_bresp,   --                                                  .bresp
			mux_ddr_0_altera_axi_slave_bvalid                       => mm_interconnect_1_mux_ddr_0_altera_axi_slave_bvalid,  --                                                  .bvalid
			mux_ddr_0_altera_axi_slave_bready                       => mm_interconnect_1_mux_ddr_0_altera_axi_slave_bready,  --                                                  .bready
			mux_ddr_0_altera_axi_slave_arid                         => mm_interconnect_1_mux_ddr_0_altera_axi_slave_arid,    --                                                  .arid
			mux_ddr_0_altera_axi_slave_araddr                       => mm_interconnect_1_mux_ddr_0_altera_axi_slave_araddr,  --                                                  .araddr
			mux_ddr_0_altera_axi_slave_arlen                        => mm_interconnect_1_mux_ddr_0_altera_axi_slave_arlen,   --                                                  .arlen
			mux_ddr_0_altera_axi_slave_arsize                       => mm_interconnect_1_mux_ddr_0_altera_axi_slave_arsize,  --                                                  .arsize
			mux_ddr_0_altera_axi_slave_arburst                      => mm_interconnect_1_mux_ddr_0_altera_axi_slave_arburst, --                                                  .arburst
			mux_ddr_0_altera_axi_slave_arlock                       => mm_interconnect_1_mux_ddr_0_altera_axi_slave_arlock,  --                                                  .arlock
			mux_ddr_0_altera_axi_slave_arcache                      => mm_interconnect_1_mux_ddr_0_altera_axi_slave_arcache, --                                                  .arcache
			mux_ddr_0_altera_axi_slave_arprot                       => mm_interconnect_1_mux_ddr_0_altera_axi_slave_arprot,  --                                                  .arprot
			mux_ddr_0_altera_axi_slave_aruser                       => mm_interconnect_1_mux_ddr_0_altera_axi_slave_aruser,  --                                                  .aruser
			mux_ddr_0_altera_axi_slave_arvalid                      => mm_interconnect_1_mux_ddr_0_altera_axi_slave_arvalid, --                                                  .arvalid
			mux_ddr_0_altera_axi_slave_arready                      => mm_interconnect_1_mux_ddr_0_altera_axi_slave_arready, --                                                  .arready
			mux_ddr_0_altera_axi_slave_rid                          => mm_interconnect_1_mux_ddr_0_altera_axi_slave_rid,     --                                                  .rid
			mux_ddr_0_altera_axi_slave_rdata                        => mm_interconnect_1_mux_ddr_0_altera_axi_slave_rdata,   --                                                  .rdata
			mux_ddr_0_altera_axi_slave_rresp                        => mm_interconnect_1_mux_ddr_0_altera_axi_slave_rresp,   --                                                  .rresp
			mux_ddr_0_altera_axi_slave_rlast                        => mm_interconnect_1_mux_ddr_0_altera_axi_slave_rlast,   --                                                  .rlast
			mux_ddr_0_altera_axi_slave_rvalid                       => mm_interconnect_1_mux_ddr_0_altera_axi_slave_rvalid,  --                                                  .rvalid
			mux_ddr_0_altera_axi_slave_rready                       => mm_interconnect_1_mux_ddr_0_altera_axi_slave_rready,  --                                                  .rready
			axi_clk_bridge_out_clk_clk                              => axi_clk_bridge_in_clk_clk,                            --                            axi_clk_bridge_out_clk.clk
			clk_1_clk_clk                                           => clk_100_clk,                                          --                                         clk_1_clk.clk
			arria10_hps_0_h2f_axi_reset_reset_bridge_in_reset_reset => rst_controller_002_reset_out_reset,                   -- arria10_hps_0_h2f_axi_reset_reset_bridge_in_reset.reset
			mux_ddr_0_reset_reset_bridge_in_reset_reset             => rst_controller_001_reset_out_reset                    --             mux_ddr_0_reset_reset_bridge_in_reset.reset
		);

	mm_interconnect_2 : component som_system_altera_mm_interconnect_180.som_system_pkg.som_system_altera_mm_interconnect_180_g5k2ojy
		port map (
			arria10_hps_0_h2f_lw_axi_master_awid                       => arria10_hps_0_h2f_lw_axi_master_awid,       --                      arria10_hps_0_h2f_lw_axi_master.awid
			arria10_hps_0_h2f_lw_axi_master_awaddr                     => arria10_hps_0_h2f_lw_axi_master_awaddr,     --                                                     .awaddr
			arria10_hps_0_h2f_lw_axi_master_awlen                      => arria10_hps_0_h2f_lw_axi_master_awlen,      --                                                     .awlen
			arria10_hps_0_h2f_lw_axi_master_awsize                     => arria10_hps_0_h2f_lw_axi_master_awsize,     --                                                     .awsize
			arria10_hps_0_h2f_lw_axi_master_awburst                    => arria10_hps_0_h2f_lw_axi_master_awburst,    --                                                     .awburst
			arria10_hps_0_h2f_lw_axi_master_awlock                     => arria10_hps_0_h2f_lw_axi_master_awlock,     --                                                     .awlock
			arria10_hps_0_h2f_lw_axi_master_awcache                    => arria10_hps_0_h2f_lw_axi_master_awcache,    --                                                     .awcache
			arria10_hps_0_h2f_lw_axi_master_awprot                     => arria10_hps_0_h2f_lw_axi_master_awprot,     --                                                     .awprot
			arria10_hps_0_h2f_lw_axi_master_awuser                     => arria10_hps_0_h2f_lw_axi_master_awuser,     --                                                     .awuser
			arria10_hps_0_h2f_lw_axi_master_awvalid                    => arria10_hps_0_h2f_lw_axi_master_awvalid,    --                                                     .awvalid
			arria10_hps_0_h2f_lw_axi_master_awready                    => arria10_hps_0_h2f_lw_axi_master_awready,    --                                                     .awready
			arria10_hps_0_h2f_lw_axi_master_wid                        => arria10_hps_0_h2f_lw_axi_master_wid,        --                                                     .wid
			arria10_hps_0_h2f_lw_axi_master_wdata                      => arria10_hps_0_h2f_lw_axi_master_wdata,      --                                                     .wdata
			arria10_hps_0_h2f_lw_axi_master_wstrb                      => arria10_hps_0_h2f_lw_axi_master_wstrb,      --                                                     .wstrb
			arria10_hps_0_h2f_lw_axi_master_wlast                      => arria10_hps_0_h2f_lw_axi_master_wlast,      --                                                     .wlast
			arria10_hps_0_h2f_lw_axi_master_wvalid                     => arria10_hps_0_h2f_lw_axi_master_wvalid,     --                                                     .wvalid
			arria10_hps_0_h2f_lw_axi_master_wready                     => arria10_hps_0_h2f_lw_axi_master_wready,     --                                                     .wready
			arria10_hps_0_h2f_lw_axi_master_bid                        => arria10_hps_0_h2f_lw_axi_master_bid,        --                                                     .bid
			arria10_hps_0_h2f_lw_axi_master_bresp                      => arria10_hps_0_h2f_lw_axi_master_bresp,      --                                                     .bresp
			arria10_hps_0_h2f_lw_axi_master_bvalid                     => arria10_hps_0_h2f_lw_axi_master_bvalid,     --                                                     .bvalid
			arria10_hps_0_h2f_lw_axi_master_bready                     => arria10_hps_0_h2f_lw_axi_master_bready,     --                                                     .bready
			arria10_hps_0_h2f_lw_axi_master_arid                       => arria10_hps_0_h2f_lw_axi_master_arid,       --                                                     .arid
			arria10_hps_0_h2f_lw_axi_master_araddr                     => arria10_hps_0_h2f_lw_axi_master_araddr,     --                                                     .araddr
			arria10_hps_0_h2f_lw_axi_master_arlen                      => arria10_hps_0_h2f_lw_axi_master_arlen,      --                                                     .arlen
			arria10_hps_0_h2f_lw_axi_master_arsize                     => arria10_hps_0_h2f_lw_axi_master_arsize,     --                                                     .arsize
			arria10_hps_0_h2f_lw_axi_master_arburst                    => arria10_hps_0_h2f_lw_axi_master_arburst,    --                                                     .arburst
			arria10_hps_0_h2f_lw_axi_master_arlock                     => arria10_hps_0_h2f_lw_axi_master_arlock,     --                                                     .arlock
			arria10_hps_0_h2f_lw_axi_master_arcache                    => arria10_hps_0_h2f_lw_axi_master_arcache,    --                                                     .arcache
			arria10_hps_0_h2f_lw_axi_master_arprot                     => arria10_hps_0_h2f_lw_axi_master_arprot,     --                                                     .arprot
			arria10_hps_0_h2f_lw_axi_master_aruser                     => arria10_hps_0_h2f_lw_axi_master_aruser,     --                                                     .aruser
			arria10_hps_0_h2f_lw_axi_master_arvalid                    => arria10_hps_0_h2f_lw_axi_master_arvalid,    --                                                     .arvalid
			arria10_hps_0_h2f_lw_axi_master_arready                    => arria10_hps_0_h2f_lw_axi_master_arready,    --                                                     .arready
			arria10_hps_0_h2f_lw_axi_master_rid                        => arria10_hps_0_h2f_lw_axi_master_rid,        --                                                     .rid
			arria10_hps_0_h2f_lw_axi_master_rdata                      => arria10_hps_0_h2f_lw_axi_master_rdata,      --                                                     .rdata
			arria10_hps_0_h2f_lw_axi_master_rresp                      => arria10_hps_0_h2f_lw_axi_master_rresp,      --                                                     .rresp
			arria10_hps_0_h2f_lw_axi_master_rlast                      => arria10_hps_0_h2f_lw_axi_master_rlast,      --                                                     .rlast
			arria10_hps_0_h2f_lw_axi_master_rvalid                     => arria10_hps_0_h2f_lw_axi_master_rvalid,     --                                                     .rvalid
			arria10_hps_0_h2f_lw_axi_master_rready                     => arria10_hps_0_h2f_lw_axi_master_rready,     --                                                     .rready
			clk_1_clk_clk                                              => clk_100_clk,                                --                                            clk_1_clk.clk
			arria10_hps_0_h2f_lw_axi_reset_reset_bridge_in_reset_reset => rst_controller_001_reset_out_reset,         -- arria10_hps_0_h2f_lw_axi_reset_reset_bridge_in_reset.reset
			som_config_s1_address                                      => mm_interconnect_2_som_config_s1_address,    --                                        som_config_s1.address
			som_config_s1_write                                        => mm_interconnect_2_som_config_s1_write,      --                                                     .write
			som_config_s1_readdata                                     => mm_interconnect_2_som_config_s1_readdata,   --                                                     .readdata
			som_config_s1_writedata                                    => mm_interconnect_2_som_config_s1_writedata,  --                                                     .writedata
			som_config_s1_chipselect                                   => mm_interconnect_2_som_config_s1_chipselect  --                                                     .chipselect
		);

	mm_interconnect_3 : component som_system_altera_mm_interconnect_180.som_system_pkg.som_system_altera_mm_interconnect_180_nzcyb6q
		port map (
			emif_0_emif_usr_clk_clk                                         => emif_0_emif_usr_clk_clk,                           --                                       emif_0_emif_usr_clk.clk
			mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset => rst_controller_003_reset_out_reset,                -- mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset.reset
			mm_clock_crossing_bridge_0_m0_address                           => mm_clock_crossing_bridge_0_m0_address,             --                             mm_clock_crossing_bridge_0_m0.address
			mm_clock_crossing_bridge_0_m0_waitrequest                       => mm_clock_crossing_bridge_0_m0_waitrequest,         --                                                          .waitrequest
			mm_clock_crossing_bridge_0_m0_burstcount                        => mm_clock_crossing_bridge_0_m0_burstcount,          --                                                          .burstcount
			mm_clock_crossing_bridge_0_m0_byteenable                        => mm_clock_crossing_bridge_0_m0_byteenable,          --                                                          .byteenable
			mm_clock_crossing_bridge_0_m0_read                              => mm_clock_crossing_bridge_0_m0_read,                --                                                          .read
			mm_clock_crossing_bridge_0_m0_readdata                          => mm_clock_crossing_bridge_0_m0_readdata,            --                                                          .readdata
			mm_clock_crossing_bridge_0_m0_readdatavalid                     => mm_clock_crossing_bridge_0_m0_readdatavalid,       --                                                          .readdatavalid
			mm_clock_crossing_bridge_0_m0_write                             => mm_clock_crossing_bridge_0_m0_write,               --                                                          .write
			mm_clock_crossing_bridge_0_m0_writedata                         => mm_clock_crossing_bridge_0_m0_writedata,           --                                                          .writedata
			mm_clock_crossing_bridge_0_m0_debugaccess                       => mm_clock_crossing_bridge_0_m0_debugaccess,         --                                                          .debugaccess
			emif_0_ctrl_amm_0_address                                       => mm_interconnect_3_emif_0_ctrl_amm_0_address,       --                                         emif_0_ctrl_amm_0.address
			emif_0_ctrl_amm_0_write                                         => mm_interconnect_3_emif_0_ctrl_amm_0_write,         --                                                          .write
			emif_0_ctrl_amm_0_read                                          => mm_interconnect_3_emif_0_ctrl_amm_0_read,          --                                                          .read
			emif_0_ctrl_amm_0_readdata                                      => mm_interconnect_3_emif_0_ctrl_amm_0_readdata,      --                                                          .readdata
			emif_0_ctrl_amm_0_writedata                                     => mm_interconnect_3_emif_0_ctrl_amm_0_writedata,     --                                                          .writedata
			emif_0_ctrl_amm_0_burstcount                                    => mm_interconnect_3_emif_0_ctrl_amm_0_burstcount,    --                                                          .burstcount
			emif_0_ctrl_amm_0_byteenable                                    => mm_interconnect_3_emif_0_ctrl_amm_0_byteenable,    --                                                          .byteenable
			emif_0_ctrl_amm_0_readdatavalid                                 => mm_interconnect_3_emif_0_ctrl_amm_0_readdatavalid, --                                                          .readdatavalid
			emif_0_ctrl_amm_0_waitrequest                                   => mm_interconnect_3_emif_0_ctrl_amm_0_inv            --                                                          .waitrequest
		);

	irq_mapper : component som_system_altera_irq_mapper_180.som_system_pkg.som_system_altera_irq_mapper_180_vrecy4a
		port map (
			clk        => open,                       --       clk.clk
			reset      => open,                       -- clk_reset.reset
			sender_irq => arria10_hps_0_f2h_irq0_irq  --    sender.irq
		);

	irq_mapper_001 : component som_system_altera_irq_mapper_180.som_system_pkg.som_system_altera_irq_mapper_180_vrecy4a
		port map (
			clk        => open,                       --       clk.clk
			reset      => open,                       -- clk_reset.reset
			sender_irq => arria10_hps_0_f2h_irq1_irq  --    sender.irq
		);

	avalon_st_adapter : component som_system_altera_avalon_st_adapter_180.som_system_pkg.som_system_altera_avalon_st_adapter_180_bbxpcfy
		generic map (
			inBitsPerSymbol => 32,
			inUsePackets    => 0,
			inDataWidth     => 32,
			inChannelWidth  => 2,
			inErrorWidth    => 2,
			inUseEmptyPort  => 0,
			inUseValid      => 1,
			inUseReady      => 0,
			inReadyLatency  => 0,
			outDataWidth    => 32,
			outChannelWidth => 0,
			outErrorWidth   => 2,
			outUseEmptyPort => 0,
			outUseValid     => 1,
			outUseReady     => 0,
			outReadyLatency => 0
		)
		port map (
			in_clk_0_clk   => pll_using_ad1939_mclk_outclk0_clk, -- in_clk_0.clk
			in_rst_0_reset => rst_controller_reset_out_reset,    -- in_rst_0.reset
			in_0_data      => fe_ad4020_left_line_in_data,       --     in_0.data
			in_0_valid     => fe_ad4020_left_line_in_valid,      --         .valid
			in_0_error     => fe_ad4020_left_line_in_error,      --         .error
			in_0_channel   => fe_ad4020_left_line_in_channel,    --         .channel
			out_0_data     => avalon_st_adapter_out_0_data,      --    out_0.data
			out_0_valid    => avalon_st_adapter_out_0_valid,     --         .valid
			out_0_error    => avalon_st_adapter_out_0_error      --         .error
		);

	avalon_st_adapter_001 : component som_system_altera_avalon_st_adapter_180.som_system_pkg.som_system_altera_avalon_st_adapter_180_bbxpcfy
		generic map (
			inBitsPerSymbol => 32,
			inUsePackets    => 0,
			inDataWidth     => 32,
			inChannelWidth  => 2,
			inErrorWidth    => 2,
			inUseEmptyPort  => 0,
			inUseValid      => 1,
			inUseReady      => 0,
			inReadyLatency  => 0,
			outDataWidth    => 32,
			outChannelWidth => 0,
			outErrorWidth   => 2,
			outUseEmptyPort => 0,
			outUseValid     => 1,
			outUseReady     => 0,
			outReadyLatency => 0
		)
		port map (
			in_clk_0_clk   => pll_using_ad1939_mclk_outclk0_clk, -- in_clk_0.clk
			in_rst_0_reset => rst_controller_reset_out_reset,    -- in_rst_0.reset
			in_0_data      => fe_ad4020_right_line_in_data,      --     in_0.data
			in_0_valid     => fe_ad4020_right_line_in_valid,     --         .valid
			in_0_error     => fe_ad4020_right_line_in_error,     --         .error
			in_0_channel   => fe_ad4020_right_line_in_channel,   --         .channel
			out_0_data     => avalon_st_adapter_001_out_0_data,  --    out_0.data
			out_0_valid    => avalon_st_adapter_001_out_0_valid, --         .valid
			out_0_error    => avalon_st_adapter_001_out_0_error  --         .error
		);

	avalon_st_adapter_002 : component som_system_altera_avalon_st_adapter_180.som_system_pkg.som_system_altera_avalon_st_adapter_180_cgdcaea
		generic map (
			inBitsPerSymbol => 32,
			inUsePackets    => 0,
			inDataWidth     => 32,
			inChannelWidth  => 4,
			inErrorWidth    => 2,
			inUseEmptyPort  => 0,
			inUseValid      => 1,
			inUseReady      => 0,
			inReadyLatency  => 0,
			outDataWidth    => 32,
			outChannelWidth => 2,
			outErrorWidth   => 2,
			outUseEmptyPort => 0,
			outUseValid     => 1,
			outUseReady     => 0,
			outReadyLatency => 0
		)
		port map (
			in_clk_0_clk   => pll_using_ad1939_mclk_outclk0_clk,                       -- in_clk_0.clk
			in_rst_0_reset => rst_controller_reset_out_reset,                          -- in_rst_0.reset
			in_0_data      => fe_fpga_microphone_encoder_decoder_1_mic_output_data,    --     in_0.data
			in_0_valid     => fe_fpga_microphone_encoder_decoder_1_mic_output_valid,   --         .valid
			in_0_error     => fe_fpga_microphone_encoder_decoder_1_mic_output_error,   --         .error
			in_0_channel   => fe_fpga_microphone_encoder_decoder_1_mic_output_channel, --         .channel
			out_0_data     => avalon_st_adapter_002_out_0_data,                        --    out_0.data
			out_0_valid    => avalon_st_adapter_002_out_0_valid,                       --         .valid
			out_0_error    => avalon_st_adapter_002_out_0_error,                       --         .error
			out_0_channel  => avalon_st_adapter_002_out_0_channel                      --         .channel
		);

	avalon_st_adapter_003 : component som_system_altera_avalon_st_adapter_180.som_system_pkg.som_system_altera_avalon_st_adapter_180_cgdcaea
		generic map (
			inBitsPerSymbol => 32,
			inUsePackets    => 0,
			inDataWidth     => 32,
			inChannelWidth  => 4,
			inErrorWidth    => 2,
			inUseEmptyPort  => 0,
			inUseValid      => 1,
			inUseReady      => 0,
			inReadyLatency  => 0,
			outDataWidth    => 32,
			outChannelWidth => 2,
			outErrorWidth   => 2,
			outUseEmptyPort => 0,
			outUseValid     => 1,
			outUseReady     => 0,
			outReadyLatency => 0
		)
		port map (
			in_clk_0_clk   => pll_using_ad1939_mclk_outclk0_clk,                       -- in_clk_0.clk
			in_rst_0_reset => rst_controller_reset_out_reset,                          -- in_rst_0.reset
			in_0_data      => fe_fpga_microphone_encoder_decoder_0_mic_output_data,    --     in_0.data
			in_0_valid     => fe_fpga_microphone_encoder_decoder_0_mic_output_valid,   --         .valid
			in_0_error     => fe_fpga_microphone_encoder_decoder_0_mic_output_error,   --         .error
			in_0_channel   => fe_fpga_microphone_encoder_decoder_0_mic_output_channel, --         .channel
			out_0_data     => avalon_st_adapter_003_out_0_data,                        --    out_0.data
			out_0_valid    => avalon_st_adapter_003_out_0_valid,                       --         .valid
			out_0_error    => avalon_st_adapter_003_out_0_error,                       --         .error
			out_0_channel  => avalon_st_adapter_003_out_0_channel                      --         .channel
		);

	rst_controller : component som_system_rst_controller
		generic map (
			NUM_RESET_INPUTS          => 1,
			OUTPUT_RESET_SYNC_EDGES   => "deassert",
			SYNC_DEPTH                => 2,
			RESET_REQUEST_PRESENT     => 0,
			RESET_REQ_WAIT_TIME       => 1,
			MIN_RST_ASSERTION_TIME    => 3,
			RESET_REQ_EARLY_DSRT_TIME => 1,
			USE_RESET_REQUEST_IN0     => 0,
			USE_RESET_REQUEST_IN1     => 0,
			USE_RESET_REQUEST_IN2     => 0,
			USE_RESET_REQUEST_IN3     => 0,
			USE_RESET_REQUEST_IN4     => 0,
			USE_RESET_REQUEST_IN5     => 0,
			USE_RESET_REQUEST_IN6     => 0,
			USE_RESET_REQUEST_IN7     => 0,
			USE_RESET_REQUEST_IN8     => 0,
			USE_RESET_REQUEST_IN9     => 0,
			USE_RESET_REQUEST_IN10    => 0,
			USE_RESET_REQUEST_IN11    => 0,
			USE_RESET_REQUEST_IN12    => 0,
			USE_RESET_REQUEST_IN13    => 0,
			USE_RESET_REQUEST_IN14    => 0,
			USE_RESET_REQUEST_IN15    => 0,
			ADAPT_RESET_REQUEST       => 0
		)
		port map (
			reset_in0      => reset_reset_n_ports_inv,           -- reset_in0.reset
			clk            => pll_using_ad1939_mclk_outclk0_clk, --       clk.clk
			reset_out      => rst_controller_reset_out_reset,    -- reset_out.reset
			reset_req      => open,                              -- (terminated)
			reset_req_in0  => '0',                               -- (terminated)
			reset_in1      => '0',                               -- (terminated)
			reset_req_in1  => '0',                               -- (terminated)
			reset_in2      => '0',                               -- (terminated)
			reset_req_in2  => '0',                               -- (terminated)
			reset_in3      => '0',                               -- (terminated)
			reset_req_in3  => '0',                               -- (terminated)
			reset_in4      => '0',                               -- (terminated)
			reset_req_in4  => '0',                               -- (terminated)
			reset_in5      => '0',                               -- (terminated)
			reset_req_in5  => '0',                               -- (terminated)
			reset_in6      => '0',                               -- (terminated)
			reset_req_in6  => '0',                               -- (terminated)
			reset_in7      => '0',                               -- (terminated)
			reset_req_in7  => '0',                               -- (terminated)
			reset_in8      => '0',                               -- (terminated)
			reset_req_in8  => '0',                               -- (terminated)
			reset_in9      => '0',                               -- (terminated)
			reset_req_in9  => '0',                               -- (terminated)
			reset_in10     => '0',                               -- (terminated)
			reset_req_in10 => '0',                               -- (terminated)
			reset_in11     => '0',                               -- (terminated)
			reset_req_in11 => '0',                               -- (terminated)
			reset_in12     => '0',                               -- (terminated)
			reset_req_in12 => '0',                               -- (terminated)
			reset_in13     => '0',                               -- (terminated)
			reset_req_in13 => '0',                               -- (terminated)
			reset_in14     => '0',                               -- (terminated)
			reset_req_in14 => '0',                               -- (terminated)
			reset_in15     => '0',                               -- (terminated)
			reset_req_in15 => '0'                                -- (terminated)
		);

	rst_controller_001 : component som_system_rst_controller
		generic map (
			NUM_RESET_INPUTS          => 1,
			OUTPUT_RESET_SYNC_EDGES   => "deassert",
			SYNC_DEPTH                => 2,
			RESET_REQUEST_PRESENT     => 0,
			RESET_REQ_WAIT_TIME       => 1,
			MIN_RST_ASSERTION_TIME    => 3,
			RESET_REQ_EARLY_DSRT_TIME => 1,
			USE_RESET_REQUEST_IN0     => 0,
			USE_RESET_REQUEST_IN1     => 0,
			USE_RESET_REQUEST_IN2     => 0,
			USE_RESET_REQUEST_IN3     => 0,
			USE_RESET_REQUEST_IN4     => 0,
			USE_RESET_REQUEST_IN5     => 0,
			USE_RESET_REQUEST_IN6     => 0,
			USE_RESET_REQUEST_IN7     => 0,
			USE_RESET_REQUEST_IN8     => 0,
			USE_RESET_REQUEST_IN9     => 0,
			USE_RESET_REQUEST_IN10    => 0,
			USE_RESET_REQUEST_IN11    => 0,
			USE_RESET_REQUEST_IN12    => 0,
			USE_RESET_REQUEST_IN13    => 0,
			USE_RESET_REQUEST_IN14    => 0,
			USE_RESET_REQUEST_IN15    => 0,
			ADAPT_RESET_REQUEST       => 0
		)
		port map (
			reset_in0      => reset_reset_n_ports_inv,            -- reset_in0.reset
			clk            => clk_100_clk,                        --       clk.clk
			reset_out      => rst_controller_001_reset_out_reset, -- reset_out.reset
			reset_req      => open,                               -- (terminated)
			reset_req_in0  => '0',                                -- (terminated)
			reset_in1      => '0',                                -- (terminated)
			reset_req_in1  => '0',                                -- (terminated)
			reset_in2      => '0',                                -- (terminated)
			reset_req_in2  => '0',                                -- (terminated)
			reset_in3      => '0',                                -- (terminated)
			reset_req_in3  => '0',                                -- (terminated)
			reset_in4      => '0',                                -- (terminated)
			reset_req_in4  => '0',                                -- (terminated)
			reset_in5      => '0',                                -- (terminated)
			reset_req_in5  => '0',                                -- (terminated)
			reset_in6      => '0',                                -- (terminated)
			reset_req_in6  => '0',                                -- (terminated)
			reset_in7      => '0',                                -- (terminated)
			reset_req_in7  => '0',                                -- (terminated)
			reset_in8      => '0',                                -- (terminated)
			reset_req_in8  => '0',                                -- (terminated)
			reset_in9      => '0',                                -- (terminated)
			reset_req_in9  => '0',                                -- (terminated)
			reset_in10     => '0',                                -- (terminated)
			reset_req_in10 => '0',                                -- (terminated)
			reset_in11     => '0',                                -- (terminated)
			reset_req_in11 => '0',                                -- (terminated)
			reset_in12     => '0',                                -- (terminated)
			reset_req_in12 => '0',                                -- (terminated)
			reset_in13     => '0',                                -- (terminated)
			reset_req_in13 => '0',                                -- (terminated)
			reset_in14     => '0',                                -- (terminated)
			reset_req_in14 => '0',                                -- (terminated)
			reset_in15     => '0',                                -- (terminated)
			reset_req_in15 => '0'                                 -- (terminated)
		);

	rst_controller_002 : component som_system_rst_controller_002
		generic map (
			NUM_RESET_INPUTS          => 2,
			OUTPUT_RESET_SYNC_EDGES   => "deassert",
			SYNC_DEPTH                => 2,
			RESET_REQUEST_PRESENT     => 0,
			RESET_REQ_WAIT_TIME       => 1,
			MIN_RST_ASSERTION_TIME    => 3,
			RESET_REQ_EARLY_DSRT_TIME => 1,
			USE_RESET_REQUEST_IN0     => 0,
			USE_RESET_REQUEST_IN1     => 0,
			USE_RESET_REQUEST_IN2     => 0,
			USE_RESET_REQUEST_IN3     => 0,
			USE_RESET_REQUEST_IN4     => 0,
			USE_RESET_REQUEST_IN5     => 0,
			USE_RESET_REQUEST_IN6     => 0,
			USE_RESET_REQUEST_IN7     => 0,
			USE_RESET_REQUEST_IN8     => 0,
			USE_RESET_REQUEST_IN9     => 0,
			USE_RESET_REQUEST_IN10    => 0,
			USE_RESET_REQUEST_IN11    => 0,
			USE_RESET_REQUEST_IN12    => 0,
			USE_RESET_REQUEST_IN13    => 0,
			USE_RESET_REQUEST_IN14    => 0,
			USE_RESET_REQUEST_IN15    => 0,
			ADAPT_RESET_REQUEST       => 0
		)
		port map (
			reset_in0      => emif_0_emif_usr_reset_n_reset_ports_inv, -- reset_in0.reset
			reset_in1      => arria10_hps_0_h2f_reset_reset_ports_inv, -- reset_in1.reset
			clk            => axi_clk_bridge_in_clk_clk,               --       clk.clk
			reset_out      => rst_controller_002_reset_out_reset,      -- reset_out.reset
			reset_req      => open,                                    -- (terminated)
			reset_req_in0  => '0',                                     -- (terminated)
			reset_req_in1  => '0',                                     -- (terminated)
			reset_in2      => '0',                                     -- (terminated)
			reset_req_in2  => '0',                                     -- (terminated)
			reset_in3      => '0',                                     -- (terminated)
			reset_req_in3  => '0',                                     -- (terminated)
			reset_in4      => '0',                                     -- (terminated)
			reset_req_in4  => '0',                                     -- (terminated)
			reset_in5      => '0',                                     -- (terminated)
			reset_req_in5  => '0',                                     -- (terminated)
			reset_in6      => '0',                                     -- (terminated)
			reset_req_in6  => '0',                                     -- (terminated)
			reset_in7      => '0',                                     -- (terminated)
			reset_req_in7  => '0',                                     -- (terminated)
			reset_in8      => '0',                                     -- (terminated)
			reset_req_in8  => '0',                                     -- (terminated)
			reset_in9      => '0',                                     -- (terminated)
			reset_req_in9  => '0',                                     -- (terminated)
			reset_in10     => '0',                                     -- (terminated)
			reset_req_in10 => '0',                                     -- (terminated)
			reset_in11     => '0',                                     -- (terminated)
			reset_req_in11 => '0',                                     -- (terminated)
			reset_in12     => '0',                                     -- (terminated)
			reset_req_in12 => '0',                                     -- (terminated)
			reset_in13     => '0',                                     -- (terminated)
			reset_req_in13 => '0',                                     -- (terminated)
			reset_in14     => '0',                                     -- (terminated)
			reset_req_in14 => '0',                                     -- (terminated)
			reset_in15     => '0',                                     -- (terminated)
			reset_req_in15 => '0'                                      -- (terminated)
		);

	rst_controller_003 : component som_system_rst_controller
		generic map (
			NUM_RESET_INPUTS          => 1,
			OUTPUT_RESET_SYNC_EDGES   => "deassert",
			SYNC_DEPTH                => 2,
			RESET_REQUEST_PRESENT     => 0,
			RESET_REQ_WAIT_TIME       => 1,
			MIN_RST_ASSERTION_TIME    => 3,
			RESET_REQ_EARLY_DSRT_TIME => 1,
			USE_RESET_REQUEST_IN0     => 0,
			USE_RESET_REQUEST_IN1     => 0,
			USE_RESET_REQUEST_IN2     => 0,
			USE_RESET_REQUEST_IN3     => 0,
			USE_RESET_REQUEST_IN4     => 0,
			USE_RESET_REQUEST_IN5     => 0,
			USE_RESET_REQUEST_IN6     => 0,
			USE_RESET_REQUEST_IN7     => 0,
			USE_RESET_REQUEST_IN8     => 0,
			USE_RESET_REQUEST_IN9     => 0,
			USE_RESET_REQUEST_IN10    => 0,
			USE_RESET_REQUEST_IN11    => 0,
			USE_RESET_REQUEST_IN12    => 0,
			USE_RESET_REQUEST_IN13    => 0,
			USE_RESET_REQUEST_IN14    => 0,
			USE_RESET_REQUEST_IN15    => 0,
			ADAPT_RESET_REQUEST       => 0
		)
		port map (
			reset_in0      => emif_0_emif_usr_reset_n_reset_ports_inv, -- reset_in0.reset
			clk            => emif_0_emif_usr_clk_clk,                 --       clk.clk
			reset_out      => rst_controller_003_reset_out_reset,      -- reset_out.reset
			reset_req      => open,                                    -- (terminated)
			reset_req_in0  => '0',                                     -- (terminated)
			reset_in1      => '0',                                     -- (terminated)
			reset_req_in1  => '0',                                     -- (terminated)
			reset_in2      => '0',                                     -- (terminated)
			reset_req_in2  => '0',                                     -- (terminated)
			reset_in3      => '0',                                     -- (terminated)
			reset_req_in3  => '0',                                     -- (terminated)
			reset_in4      => '0',                                     -- (terminated)
			reset_req_in4  => '0',                                     -- (terminated)
			reset_in5      => '0',                                     -- (terminated)
			reset_req_in5  => '0',                                     -- (terminated)
			reset_in6      => '0',                                     -- (terminated)
			reset_req_in6  => '0',                                     -- (terminated)
			reset_in7      => '0',                                     -- (terminated)
			reset_req_in7  => '0',                                     -- (terminated)
			reset_in8      => '0',                                     -- (terminated)
			reset_req_in8  => '0',                                     -- (terminated)
			reset_in9      => '0',                                     -- (terminated)
			reset_req_in9  => '0',                                     -- (terminated)
			reset_in10     => '0',                                     -- (terminated)
			reset_req_in10 => '0',                                     -- (terminated)
			reset_in11     => '0',                                     -- (terminated)
			reset_req_in11 => '0',                                     -- (terminated)
			reset_in12     => '0',                                     -- (terminated)
			reset_req_in12 => '0',                                     -- (terminated)
			reset_in13     => '0',                                     -- (terminated)
			reset_req_in13 => '0',                                     -- (terminated)
			reset_in14     => '0',                                     -- (terminated)
			reset_req_in14 => '0',                                     -- (terminated)
			reset_in15     => '0',                                     -- (terminated)
			reset_req_in15 => '0'                                      -- (terminated)
		);

	rst_controller_004 : component som_system_rst_controller
		generic map (
			NUM_RESET_INPUTS          => 1,
			OUTPUT_RESET_SYNC_EDGES   => "deassert",
			SYNC_DEPTH                => 2,
			RESET_REQUEST_PRESENT     => 0,
			RESET_REQ_WAIT_TIME       => 1,
			MIN_RST_ASSERTION_TIME    => 3,
			RESET_REQ_EARLY_DSRT_TIME => 1,
			USE_RESET_REQUEST_IN0     => 0,
			USE_RESET_REQUEST_IN1     => 0,
			USE_RESET_REQUEST_IN2     => 0,
			USE_RESET_REQUEST_IN3     => 0,
			USE_RESET_REQUEST_IN4     => 0,
			USE_RESET_REQUEST_IN5     => 0,
			USE_RESET_REQUEST_IN6     => 0,
			USE_RESET_REQUEST_IN7     => 0,
			USE_RESET_REQUEST_IN8     => 0,
			USE_RESET_REQUEST_IN9     => 0,
			USE_RESET_REQUEST_IN10    => 0,
			USE_RESET_REQUEST_IN11    => 0,
			USE_RESET_REQUEST_IN12    => 0,
			USE_RESET_REQUEST_IN13    => 0,
			USE_RESET_REQUEST_IN14    => 0,
			USE_RESET_REQUEST_IN15    => 0,
			ADAPT_RESET_REQUEST       => 0
		)
		port map (
			reset_in0      => arria10_hps_0_h2f_reset_reset_ports_inv, -- reset_in0.reset
			clk            => axi_clk_bridge_in_clk_clk,               --       clk.clk
			reset_out      => rst_controller_004_reset_out_reset,      -- reset_out.reset
			reset_req      => open,                                    -- (terminated)
			reset_req_in0  => '0',                                     -- (terminated)
			reset_in1      => '0',                                     -- (terminated)
			reset_req_in1  => '0',                                     -- (terminated)
			reset_in2      => '0',                                     -- (terminated)
			reset_req_in2  => '0',                                     -- (terminated)
			reset_in3      => '0',                                     -- (terminated)
			reset_req_in3  => '0',                                     -- (terminated)
			reset_in4      => '0',                                     -- (terminated)
			reset_req_in4  => '0',                                     -- (terminated)
			reset_in5      => '0',                                     -- (terminated)
			reset_req_in5  => '0',                                     -- (terminated)
			reset_in6      => '0',                                     -- (terminated)
			reset_req_in6  => '0',                                     -- (terminated)
			reset_in7      => '0',                                     -- (terminated)
			reset_req_in7  => '0',                                     -- (terminated)
			reset_in8      => '0',                                     -- (terminated)
			reset_req_in8  => '0',                                     -- (terminated)
			reset_in9      => '0',                                     -- (terminated)
			reset_req_in9  => '0',                                     -- (terminated)
			reset_in10     => '0',                                     -- (terminated)
			reset_req_in10 => '0',                                     -- (terminated)
			reset_in11     => '0',                                     -- (terminated)
			reset_req_in11 => '0',                                     -- (terminated)
			reset_in12     => '0',                                     -- (terminated)
			reset_req_in12 => '0',                                     -- (terminated)
			reset_in13     => '0',                                     -- (terminated)
			reset_req_in13 => '0',                                     -- (terminated)
			reset_in14     => '0',                                     -- (terminated)
			reset_req_in14 => '0',                                     -- (terminated)
			reset_in15     => '0',                                     -- (terminated)
			reset_req_in15 => '0'                                      -- (terminated)
		);

	reset_reset_n_ports_inv <= not reset_reset_n;

	mm_interconnect_2_som_config_s1_write_ports_inv <= not mm_interconnect_2_som_config_s1_write;

	mm_interconnect_3_emif_0_ctrl_amm_0_inv <= not emif_0_ctrl_amm_0_waitrequest;

	rst_controller_reset_out_reset_ports_inv <= not rst_controller_reset_out_reset;

	rst_controller_001_reset_out_reset_ports_inv <= not rst_controller_001_reset_out_reset;

	rst_controller_002_reset_out_reset_ports_inv <= not rst_controller_002_reset_out_reset;

	emif_0_emif_usr_reset_n_reset_ports_inv <= not emif_0_emif_usr_reset_n_reset;

	arria10_hps_0_h2f_reset_reset_ports_inv <= not arria10_hps_0_h2f_reset_reset;

end architecture rtl; -- of som_system
