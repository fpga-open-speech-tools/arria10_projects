// som_system_altera_mm_interconnect_180_d4sniia.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.0 614

`timescale 1 ps / 1 ps
module som_system_altera_mm_interconnect_180_d4sniia (
		input  wire [3:0]   mux_ddr_0_altera_axi_master_awid,                                //                               mux_ddr_0_altera_axi_master.awid
		input  wire [31:0]  mux_ddr_0_altera_axi_master_awaddr,                              //                                                          .awaddr
		input  wire [3:0]   mux_ddr_0_altera_axi_master_awlen,                               //                                                          .awlen
		input  wire [2:0]   mux_ddr_0_altera_axi_master_awsize,                              //                                                          .awsize
		input  wire [1:0]   mux_ddr_0_altera_axi_master_awburst,                             //                                                          .awburst
		input  wire [1:0]   mux_ddr_0_altera_axi_master_awlock,                              //                                                          .awlock
		input  wire [3:0]   mux_ddr_0_altera_axi_master_awcache,                             //                                                          .awcache
		input  wire [2:0]   mux_ddr_0_altera_axi_master_awprot,                              //                                                          .awprot
		input  wire [4:0]   mux_ddr_0_altera_axi_master_awuser,                              //                                                          .awuser
		input  wire         mux_ddr_0_altera_axi_master_awvalid,                             //                                                          .awvalid
		output wire         mux_ddr_0_altera_axi_master_awready,                             //                                                          .awready
		input  wire [3:0]   mux_ddr_0_altera_axi_master_wid,                                 //                                                          .wid
		input  wire [31:0]  mux_ddr_0_altera_axi_master_wdata,                               //                                                          .wdata
		input  wire [3:0]   mux_ddr_0_altera_axi_master_wstrb,                               //                                                          .wstrb
		input  wire         mux_ddr_0_altera_axi_master_wlast,                               //                                                          .wlast
		input  wire         mux_ddr_0_altera_axi_master_wvalid,                              //                                                          .wvalid
		output wire         mux_ddr_0_altera_axi_master_wready,                              //                                                          .wready
		output wire [3:0]   mux_ddr_0_altera_axi_master_bid,                                 //                                                          .bid
		output wire [1:0]   mux_ddr_0_altera_axi_master_bresp,                               //                                                          .bresp
		output wire         mux_ddr_0_altera_axi_master_bvalid,                              //                                                          .bvalid
		input  wire         mux_ddr_0_altera_axi_master_bready,                              //                                                          .bready
		input  wire [3:0]   mux_ddr_0_altera_axi_master_arid,                                //                                                          .arid
		input  wire [31:0]  mux_ddr_0_altera_axi_master_araddr,                              //                                                          .araddr
		input  wire [3:0]   mux_ddr_0_altera_axi_master_arlen,                               //                                                          .arlen
		input  wire [2:0]   mux_ddr_0_altera_axi_master_arsize,                              //                                                          .arsize
		input  wire [1:0]   mux_ddr_0_altera_axi_master_arburst,                             //                                                          .arburst
		input  wire [1:0]   mux_ddr_0_altera_axi_master_arlock,                              //                                                          .arlock
		input  wire [3:0]   mux_ddr_0_altera_axi_master_arcache,                             //                                                          .arcache
		input  wire [2:0]   mux_ddr_0_altera_axi_master_arprot,                              //                                                          .arprot
		input  wire [4:0]   mux_ddr_0_altera_axi_master_aruser,                              //                                                          .aruser
		input  wire         mux_ddr_0_altera_axi_master_arvalid,                             //                                                          .arvalid
		output wire         mux_ddr_0_altera_axi_master_arready,                             //                                                          .arready
		output wire [3:0]   mux_ddr_0_altera_axi_master_rid,                                 //                                                          .rid
		output wire [31:0]  mux_ddr_0_altera_axi_master_rdata,                               //                                                          .rdata
		output wire [1:0]   mux_ddr_0_altera_axi_master_rresp,                               //                                                          .rresp
		output wire         mux_ddr_0_altera_axi_master_rlast,                               //                                                          .rlast
		output wire         mux_ddr_0_altera_axi_master_rvalid,                              //                                                          .rvalid
		input  wire         mux_ddr_0_altera_axi_master_rready,                              //                                                          .rready
		input  wire         axi_clk_bridge_out_clk_clk,                                      //                                    axi_clk_bridge_out_clk.clk
		input  wire         clk_1_clk_clk,                                                   //                                                 clk_1_clk.clk
		input  wire         mm_clock_crossing_bridge_0_s0_reset_reset_bridge_in_reset_reset, // mm_clock_crossing_bridge_0_s0_reset_reset_bridge_in_reset.reset
		input  wire         mux_ddr_0_reset_reset_bridge_in_reset_reset,                     //                     mux_ddr_0_reset_reset_bridge_in_reset.reset
		output wire [31:0]  mm_clock_crossing_bridge_0_s0_address,                           //                             mm_clock_crossing_bridge_0_s0.address
		output wire         mm_clock_crossing_bridge_0_s0_write,                             //                                                          .write
		output wire         mm_clock_crossing_bridge_0_s0_read,                              //                                                          .read
		input  wire [511:0] mm_clock_crossing_bridge_0_s0_readdata,                          //                                                          .readdata
		output wire [511:0] mm_clock_crossing_bridge_0_s0_writedata,                         //                                                          .writedata
		output wire [6:0]   mm_clock_crossing_bridge_0_s0_burstcount,                        //                                                          .burstcount
		output wire [63:0]  mm_clock_crossing_bridge_0_s0_byteenable,                        //                                                          .byteenable
		input  wire         mm_clock_crossing_bridge_0_s0_readdatavalid,                     //                                                          .readdatavalid
		input  wire         mm_clock_crossing_bridge_0_s0_waitrequest,                       //                                                          .waitrequest
		output wire         mm_clock_crossing_bridge_0_s0_debugaccess                        //                                                          .debugaccess
	);

	wire          rsp_mux_src_valid;                                                 // rsp_mux:src_valid -> mux_ddr_0_altera_axi_master_agent:write_rp_valid
	wire  [124:0] rsp_mux_src_data;                                                  // rsp_mux:src_data -> mux_ddr_0_altera_axi_master_agent:write_rp_data
	wire          rsp_mux_src_ready;                                                 // mux_ddr_0_altera_axi_master_agent:write_rp_ready -> rsp_mux:src_ready
	wire    [1:0] rsp_mux_src_channel;                                               // rsp_mux:src_channel -> mux_ddr_0_altera_axi_master_agent:write_rp_channel
	wire          rsp_mux_src_startofpacket;                                         // rsp_mux:src_startofpacket -> mux_ddr_0_altera_axi_master_agent:write_rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                           // rsp_mux:src_endofpacket -> mux_ddr_0_altera_axi_master_agent:write_rp_endofpacket
	wire          rsp_mux_001_src_valid;                                             // rsp_mux_001:src_valid -> mux_ddr_0_altera_axi_master_agent:read_rp_valid
	wire  [124:0] rsp_mux_001_src_data;                                              // rsp_mux_001:src_data -> mux_ddr_0_altera_axi_master_agent:read_rp_data
	wire          rsp_mux_001_src_ready;                                             // mux_ddr_0_altera_axi_master_agent:read_rp_ready -> rsp_mux_001:src_ready
	wire    [1:0] rsp_mux_001_src_channel;                                           // rsp_mux_001:src_channel -> mux_ddr_0_altera_axi_master_agent:read_rp_channel
	wire          rsp_mux_001_src_startofpacket;                                     // rsp_mux_001:src_startofpacket -> mux_ddr_0_altera_axi_master_agent:read_rp_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                       // rsp_mux_001:src_endofpacket -> mux_ddr_0_altera_axi_master_agent:read_rp_endofpacket
	wire  [511:0] mm_clock_crossing_bridge_0_s0_agent_m0_readdata;                   // mm_clock_crossing_bridge_0_s0_translator:uav_readdata -> mm_clock_crossing_bridge_0_s0_agent:m0_readdata
	wire          mm_clock_crossing_bridge_0_s0_agent_m0_waitrequest;                // mm_clock_crossing_bridge_0_s0_translator:uav_waitrequest -> mm_clock_crossing_bridge_0_s0_agent:m0_waitrequest
	wire          mm_clock_crossing_bridge_0_s0_agent_m0_debugaccess;                // mm_clock_crossing_bridge_0_s0_agent:m0_debugaccess -> mm_clock_crossing_bridge_0_s0_translator:uav_debugaccess
	wire   [31:0] mm_clock_crossing_bridge_0_s0_agent_m0_address;                    // mm_clock_crossing_bridge_0_s0_agent:m0_address -> mm_clock_crossing_bridge_0_s0_translator:uav_address
	wire   [63:0] mm_clock_crossing_bridge_0_s0_agent_m0_byteenable;                 // mm_clock_crossing_bridge_0_s0_agent:m0_byteenable -> mm_clock_crossing_bridge_0_s0_translator:uav_byteenable
	wire          mm_clock_crossing_bridge_0_s0_agent_m0_read;                       // mm_clock_crossing_bridge_0_s0_agent:m0_read -> mm_clock_crossing_bridge_0_s0_translator:uav_read
	wire          mm_clock_crossing_bridge_0_s0_agent_m0_readdatavalid;              // mm_clock_crossing_bridge_0_s0_translator:uav_readdatavalid -> mm_clock_crossing_bridge_0_s0_agent:m0_readdatavalid
	wire          mm_clock_crossing_bridge_0_s0_agent_m0_lock;                       // mm_clock_crossing_bridge_0_s0_agent:m0_lock -> mm_clock_crossing_bridge_0_s0_translator:uav_lock
	wire  [511:0] mm_clock_crossing_bridge_0_s0_agent_m0_writedata;                  // mm_clock_crossing_bridge_0_s0_agent:m0_writedata -> mm_clock_crossing_bridge_0_s0_translator:uav_writedata
	wire          mm_clock_crossing_bridge_0_s0_agent_m0_write;                      // mm_clock_crossing_bridge_0_s0_agent:m0_write -> mm_clock_crossing_bridge_0_s0_translator:uav_write
	wire   [12:0] mm_clock_crossing_bridge_0_s0_agent_m0_burstcount;                 // mm_clock_crossing_bridge_0_s0_agent:m0_burstcount -> mm_clock_crossing_bridge_0_s0_translator:uav_burstcount
	wire          mm_clock_crossing_bridge_0_s0_agent_rf_source_valid;               // mm_clock_crossing_bridge_0_s0_agent:rf_source_valid -> mm_clock_crossing_bridge_0_s0_agent_rsp_fifo:in_valid
	wire  [665:0] mm_clock_crossing_bridge_0_s0_agent_rf_source_data;                // mm_clock_crossing_bridge_0_s0_agent:rf_source_data -> mm_clock_crossing_bridge_0_s0_agent_rsp_fifo:in_data
	wire          mm_clock_crossing_bridge_0_s0_agent_rf_source_ready;               // mm_clock_crossing_bridge_0_s0_agent_rsp_fifo:in_ready -> mm_clock_crossing_bridge_0_s0_agent:rf_source_ready
	wire          mm_clock_crossing_bridge_0_s0_agent_rf_source_startofpacket;       // mm_clock_crossing_bridge_0_s0_agent:rf_source_startofpacket -> mm_clock_crossing_bridge_0_s0_agent_rsp_fifo:in_startofpacket
	wire          mm_clock_crossing_bridge_0_s0_agent_rf_source_endofpacket;         // mm_clock_crossing_bridge_0_s0_agent:rf_source_endofpacket -> mm_clock_crossing_bridge_0_s0_agent_rsp_fifo:in_endofpacket
	wire          mm_clock_crossing_bridge_0_s0_agent_rsp_fifo_out_valid;            // mm_clock_crossing_bridge_0_s0_agent_rsp_fifo:out_valid -> mm_clock_crossing_bridge_0_s0_agent:rf_sink_valid
	wire  [665:0] mm_clock_crossing_bridge_0_s0_agent_rsp_fifo_out_data;             // mm_clock_crossing_bridge_0_s0_agent_rsp_fifo:out_data -> mm_clock_crossing_bridge_0_s0_agent:rf_sink_data
	wire          mm_clock_crossing_bridge_0_s0_agent_rsp_fifo_out_ready;            // mm_clock_crossing_bridge_0_s0_agent:rf_sink_ready -> mm_clock_crossing_bridge_0_s0_agent_rsp_fifo:out_ready
	wire          mm_clock_crossing_bridge_0_s0_agent_rsp_fifo_out_startofpacket;    // mm_clock_crossing_bridge_0_s0_agent_rsp_fifo:out_startofpacket -> mm_clock_crossing_bridge_0_s0_agent:rf_sink_startofpacket
	wire          mm_clock_crossing_bridge_0_s0_agent_rsp_fifo_out_endofpacket;      // mm_clock_crossing_bridge_0_s0_agent_rsp_fifo:out_endofpacket -> mm_clock_crossing_bridge_0_s0_agent:rf_sink_endofpacket
	wire          mm_clock_crossing_bridge_0_s0_agent_rdata_fifo_src_valid;          // mm_clock_crossing_bridge_0_s0_agent:rdata_fifo_src_valid -> mm_clock_crossing_bridge_0_s0_agent_rdata_fifo:in_valid
	wire  [513:0] mm_clock_crossing_bridge_0_s0_agent_rdata_fifo_src_data;           // mm_clock_crossing_bridge_0_s0_agent:rdata_fifo_src_data -> mm_clock_crossing_bridge_0_s0_agent_rdata_fifo:in_data
	wire          mm_clock_crossing_bridge_0_s0_agent_rdata_fifo_src_ready;          // mm_clock_crossing_bridge_0_s0_agent_rdata_fifo:in_ready -> mm_clock_crossing_bridge_0_s0_agent:rdata_fifo_src_ready
	wire          mux_ddr_0_altera_axi_master_agent_write_cp_valid;                  // mux_ddr_0_altera_axi_master_agent:write_cp_valid -> router:sink_valid
	wire  [124:0] mux_ddr_0_altera_axi_master_agent_write_cp_data;                   // mux_ddr_0_altera_axi_master_agent:write_cp_data -> router:sink_data
	wire          mux_ddr_0_altera_axi_master_agent_write_cp_ready;                  // router:sink_ready -> mux_ddr_0_altera_axi_master_agent:write_cp_ready
	wire          mux_ddr_0_altera_axi_master_agent_write_cp_startofpacket;          // mux_ddr_0_altera_axi_master_agent:write_cp_startofpacket -> router:sink_startofpacket
	wire          mux_ddr_0_altera_axi_master_agent_write_cp_endofpacket;            // mux_ddr_0_altera_axi_master_agent:write_cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                  // router:src_valid -> cmd_demux:sink_valid
	wire  [124:0] router_src_data;                                                   // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                  // cmd_demux:sink_ready -> router:src_ready
	wire    [1:0] router_src_channel;                                                // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                          // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                            // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          mux_ddr_0_altera_axi_master_agent_read_cp_valid;                   // mux_ddr_0_altera_axi_master_agent:read_cp_valid -> router_001:sink_valid
	wire  [124:0] mux_ddr_0_altera_axi_master_agent_read_cp_data;                    // mux_ddr_0_altera_axi_master_agent:read_cp_data -> router_001:sink_data
	wire          mux_ddr_0_altera_axi_master_agent_read_cp_ready;                   // router_001:sink_ready -> mux_ddr_0_altera_axi_master_agent:read_cp_ready
	wire          mux_ddr_0_altera_axi_master_agent_read_cp_startofpacket;           // mux_ddr_0_altera_axi_master_agent:read_cp_startofpacket -> router_001:sink_startofpacket
	wire          mux_ddr_0_altera_axi_master_agent_read_cp_endofpacket;             // mux_ddr_0_altera_axi_master_agent:read_cp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                              // router_001:src_valid -> cmd_demux_001:sink_valid
	wire  [124:0] router_001_src_data;                                               // router_001:src_data -> cmd_demux_001:sink_data
	wire          router_001_src_ready;                                              // cmd_demux_001:sink_ready -> router_001:src_ready
	wire    [1:0] router_001_src_channel;                                            // router_001:src_channel -> cmd_demux_001:sink_channel
	wire          router_001_src_startofpacket;                                      // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          router_001_src_endofpacket;                                        // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          mm_clock_crossing_bridge_0_s0_agent_rp_valid;                      // mm_clock_crossing_bridge_0_s0_agent:rp_valid -> router_002:sink_valid
	wire  [664:0] mm_clock_crossing_bridge_0_s0_agent_rp_data;                       // mm_clock_crossing_bridge_0_s0_agent:rp_data -> router_002:sink_data
	wire          mm_clock_crossing_bridge_0_s0_agent_rp_ready;                      // router_002:sink_ready -> mm_clock_crossing_bridge_0_s0_agent:rp_ready
	wire          mm_clock_crossing_bridge_0_s0_agent_rp_startofpacket;              // mm_clock_crossing_bridge_0_s0_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire          mm_clock_crossing_bridge_0_s0_agent_rp_endofpacket;                // mm_clock_crossing_bridge_0_s0_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          mm_clock_crossing_bridge_0_s0_burst_adapter_source0_valid;         // mm_clock_crossing_bridge_0_s0_burst_adapter:source0_valid -> mm_clock_crossing_bridge_0_s0_agent:cp_valid
	wire  [664:0] mm_clock_crossing_bridge_0_s0_burst_adapter_source0_data;          // mm_clock_crossing_bridge_0_s0_burst_adapter:source0_data -> mm_clock_crossing_bridge_0_s0_agent:cp_data
	wire          mm_clock_crossing_bridge_0_s0_burst_adapter_source0_ready;         // mm_clock_crossing_bridge_0_s0_agent:cp_ready -> mm_clock_crossing_bridge_0_s0_burst_adapter:source0_ready
	wire    [1:0] mm_clock_crossing_bridge_0_s0_burst_adapter_source0_channel;       // mm_clock_crossing_bridge_0_s0_burst_adapter:source0_channel -> mm_clock_crossing_bridge_0_s0_agent:cp_channel
	wire          mm_clock_crossing_bridge_0_s0_burst_adapter_source0_startofpacket; // mm_clock_crossing_bridge_0_s0_burst_adapter:source0_startofpacket -> mm_clock_crossing_bridge_0_s0_agent:cp_startofpacket
	wire          mm_clock_crossing_bridge_0_s0_burst_adapter_source0_endofpacket;   // mm_clock_crossing_bridge_0_s0_burst_adapter:source0_endofpacket -> mm_clock_crossing_bridge_0_s0_agent:cp_endofpacket
	wire          router_002_src_valid;                                              // router_002:src_valid -> mm_clock_crossing_bridge_0_s0_rsp_width_adapter:in_valid
	wire  [664:0] router_002_src_data;                                               // router_002:src_data -> mm_clock_crossing_bridge_0_s0_rsp_width_adapter:in_data
	wire          router_002_src_ready;                                              // mm_clock_crossing_bridge_0_s0_rsp_width_adapter:in_ready -> router_002:src_ready
	wire    [1:0] router_002_src_channel;                                            // router_002:src_channel -> mm_clock_crossing_bridge_0_s0_rsp_width_adapter:in_channel
	wire          router_002_src_startofpacket;                                      // router_002:src_startofpacket -> mm_clock_crossing_bridge_0_s0_rsp_width_adapter:in_startofpacket
	wire          router_002_src_endofpacket;                                        // router_002:src_endofpacket -> mm_clock_crossing_bridge_0_s0_rsp_width_adapter:in_endofpacket
	wire          mm_clock_crossing_bridge_0_s0_rsp_width_adapter_src_valid;         // mm_clock_crossing_bridge_0_s0_rsp_width_adapter:out_valid -> rsp_demux:sink_valid
	wire  [124:0] mm_clock_crossing_bridge_0_s0_rsp_width_adapter_src_data;          // mm_clock_crossing_bridge_0_s0_rsp_width_adapter:out_data -> rsp_demux:sink_data
	wire          mm_clock_crossing_bridge_0_s0_rsp_width_adapter_src_ready;         // rsp_demux:sink_ready -> mm_clock_crossing_bridge_0_s0_rsp_width_adapter:out_ready
	wire    [1:0] mm_clock_crossing_bridge_0_s0_rsp_width_adapter_src_channel;       // mm_clock_crossing_bridge_0_s0_rsp_width_adapter:out_channel -> rsp_demux:sink_channel
	wire          mm_clock_crossing_bridge_0_s0_rsp_width_adapter_src_startofpacket; // mm_clock_crossing_bridge_0_s0_rsp_width_adapter:out_startofpacket -> rsp_demux:sink_startofpacket
	wire          mm_clock_crossing_bridge_0_s0_rsp_width_adapter_src_endofpacket;   // mm_clock_crossing_bridge_0_s0_rsp_width_adapter:out_endofpacket -> rsp_demux:sink_endofpacket
	wire          cmd_mux_src_valid;                                                 // cmd_mux:src_valid -> mm_clock_crossing_bridge_0_s0_cmd_width_adapter:in_valid
	wire  [124:0] cmd_mux_src_data;                                                  // cmd_mux:src_data -> mm_clock_crossing_bridge_0_s0_cmd_width_adapter:in_data
	wire          cmd_mux_src_ready;                                                 // mm_clock_crossing_bridge_0_s0_cmd_width_adapter:in_ready -> cmd_mux:src_ready
	wire    [1:0] cmd_mux_src_channel;                                               // cmd_mux:src_channel -> mm_clock_crossing_bridge_0_s0_cmd_width_adapter:in_channel
	wire          cmd_mux_src_startofpacket;                                         // cmd_mux:src_startofpacket -> mm_clock_crossing_bridge_0_s0_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_src_endofpacket;                                           // cmd_mux:src_endofpacket -> mm_clock_crossing_bridge_0_s0_cmd_width_adapter:in_endofpacket
	wire          mm_clock_crossing_bridge_0_s0_cmd_width_adapter_src_valid;         // mm_clock_crossing_bridge_0_s0_cmd_width_adapter:out_valid -> mm_clock_crossing_bridge_0_s0_burst_adapter:sink0_valid
	wire  [664:0] mm_clock_crossing_bridge_0_s0_cmd_width_adapter_src_data;          // mm_clock_crossing_bridge_0_s0_cmd_width_adapter:out_data -> mm_clock_crossing_bridge_0_s0_burst_adapter:sink0_data
	wire          mm_clock_crossing_bridge_0_s0_cmd_width_adapter_src_ready;         // mm_clock_crossing_bridge_0_s0_burst_adapter:sink0_ready -> mm_clock_crossing_bridge_0_s0_cmd_width_adapter:out_ready
	wire    [1:0] mm_clock_crossing_bridge_0_s0_cmd_width_adapter_src_channel;       // mm_clock_crossing_bridge_0_s0_cmd_width_adapter:out_channel -> mm_clock_crossing_bridge_0_s0_burst_adapter:sink0_channel
	wire          mm_clock_crossing_bridge_0_s0_cmd_width_adapter_src_startofpacket; // mm_clock_crossing_bridge_0_s0_cmd_width_adapter:out_startofpacket -> mm_clock_crossing_bridge_0_s0_burst_adapter:sink0_startofpacket
	wire          mm_clock_crossing_bridge_0_s0_cmd_width_adapter_src_endofpacket;   // mm_clock_crossing_bridge_0_s0_cmd_width_adapter:out_endofpacket -> mm_clock_crossing_bridge_0_s0_burst_adapter:sink0_endofpacket
	wire          cmd_demux_src0_valid;                                              // cmd_demux:src0_valid -> crosser:in_valid
	wire  [124:0] cmd_demux_src0_data;                                               // cmd_demux:src0_data -> crosser:in_data
	wire          cmd_demux_src0_ready;                                              // crosser:in_ready -> cmd_demux:src0_ready
	wire    [1:0] cmd_demux_src0_channel;                                            // cmd_demux:src0_channel -> crosser:in_channel
	wire          cmd_demux_src0_startofpacket;                                      // cmd_demux:src0_startofpacket -> crosser:in_startofpacket
	wire          cmd_demux_src0_endofpacket;                                        // cmd_demux:src0_endofpacket -> crosser:in_endofpacket
	wire          crosser_out_valid;                                                 // crosser:out_valid -> cmd_mux:sink0_valid
	wire  [124:0] crosser_out_data;                                                  // crosser:out_data -> cmd_mux:sink0_data
	wire          crosser_out_ready;                                                 // cmd_mux:sink0_ready -> crosser:out_ready
	wire    [1:0] crosser_out_channel;                                               // crosser:out_channel -> cmd_mux:sink0_channel
	wire          crosser_out_startofpacket;                                         // crosser:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire          crosser_out_endofpacket;                                           // crosser:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                          // cmd_demux_001:src0_valid -> crosser_001:in_valid
	wire  [124:0] cmd_demux_001_src0_data;                                           // cmd_demux_001:src0_data -> crosser_001:in_data
	wire          cmd_demux_001_src0_ready;                                          // crosser_001:in_ready -> cmd_demux_001:src0_ready
	wire    [1:0] cmd_demux_001_src0_channel;                                        // cmd_demux_001:src0_channel -> crosser_001:in_channel
	wire          cmd_demux_001_src0_startofpacket;                                  // cmd_demux_001:src0_startofpacket -> crosser_001:in_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                    // cmd_demux_001:src0_endofpacket -> crosser_001:in_endofpacket
	wire          crosser_001_out_valid;                                             // crosser_001:out_valid -> cmd_mux:sink1_valid
	wire  [124:0] crosser_001_out_data;                                              // crosser_001:out_data -> cmd_mux:sink1_data
	wire          crosser_001_out_ready;                                             // cmd_mux:sink1_ready -> crosser_001:out_ready
	wire    [1:0] crosser_001_out_channel;                                           // crosser_001:out_channel -> cmd_mux:sink1_channel
	wire          crosser_001_out_startofpacket;                                     // crosser_001:out_startofpacket -> cmd_mux:sink1_startofpacket
	wire          crosser_001_out_endofpacket;                                       // crosser_001:out_endofpacket -> cmd_mux:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                              // rsp_demux:src0_valid -> crosser_002:in_valid
	wire  [124:0] rsp_demux_src0_data;                                               // rsp_demux:src0_data -> crosser_002:in_data
	wire          rsp_demux_src0_ready;                                              // crosser_002:in_ready -> rsp_demux:src0_ready
	wire    [1:0] rsp_demux_src0_channel;                                            // rsp_demux:src0_channel -> crosser_002:in_channel
	wire          rsp_demux_src0_startofpacket;                                      // rsp_demux:src0_startofpacket -> crosser_002:in_startofpacket
	wire          rsp_demux_src0_endofpacket;                                        // rsp_demux:src0_endofpacket -> crosser_002:in_endofpacket
	wire          crosser_002_out_valid;                                             // crosser_002:out_valid -> rsp_mux:sink0_valid
	wire  [124:0] crosser_002_out_data;                                              // crosser_002:out_data -> rsp_mux:sink0_data
	wire          crosser_002_out_ready;                                             // rsp_mux:sink0_ready -> crosser_002:out_ready
	wire    [1:0] crosser_002_out_channel;                                           // crosser_002:out_channel -> rsp_mux:sink0_channel
	wire          crosser_002_out_startofpacket;                                     // crosser_002:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire          crosser_002_out_endofpacket;                                       // crosser_002:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                              // rsp_demux:src1_valid -> crosser_003:in_valid
	wire  [124:0] rsp_demux_src1_data;                                               // rsp_demux:src1_data -> crosser_003:in_data
	wire          rsp_demux_src1_ready;                                              // crosser_003:in_ready -> rsp_demux:src1_ready
	wire    [1:0] rsp_demux_src1_channel;                                            // rsp_demux:src1_channel -> crosser_003:in_channel
	wire          rsp_demux_src1_startofpacket;                                      // rsp_demux:src1_startofpacket -> crosser_003:in_startofpacket
	wire          rsp_demux_src1_endofpacket;                                        // rsp_demux:src1_endofpacket -> crosser_003:in_endofpacket
	wire          crosser_003_out_valid;                                             // crosser_003:out_valid -> rsp_mux_001:sink0_valid
	wire  [124:0] crosser_003_out_data;                                              // crosser_003:out_data -> rsp_mux_001:sink0_data
	wire          crosser_003_out_ready;                                             // rsp_mux_001:sink0_ready -> crosser_003:out_ready
	wire    [1:0] crosser_003_out_channel;                                           // crosser_003:out_channel -> rsp_mux_001:sink0_channel
	wire          crosser_003_out_startofpacket;                                     // crosser_003:out_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          crosser_003_out_endofpacket;                                       // crosser_003:out_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          mm_clock_crossing_bridge_0_s0_agent_rdata_fifo_out_valid;          // mm_clock_crossing_bridge_0_s0_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire  [513:0] mm_clock_crossing_bridge_0_s0_agent_rdata_fifo_out_data;           // mm_clock_crossing_bridge_0_s0_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          mm_clock_crossing_bridge_0_s0_agent_rdata_fifo_out_ready;          // avalon_st_adapter:in_0_ready -> mm_clock_crossing_bridge_0_s0_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                     // avalon_st_adapter:out_0_valid -> mm_clock_crossing_bridge_0_s0_agent:rdata_fifo_sink_valid
	wire  [513:0] avalon_st_adapter_out_0_data;                                      // avalon_st_adapter:out_0_data -> mm_clock_crossing_bridge_0_s0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                     // mm_clock_crossing_bridge_0_s0_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                     // avalon_st_adapter:out_0_error -> mm_clock_crossing_bridge_0_s0_agent:rdata_fifo_sink_error

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (32),
		.AV_DATA_W                      (512),
		.UAV_DATA_W                     (512),
		.AV_BURSTCOUNT_W                (7),
		.AV_BYTEENABLE_W                (64),
		.UAV_BYTEENABLE_W               (64),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (13),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (64),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) mm_clock_crossing_bridge_0_s0_translator (
		.clk                    (axi_clk_bridge_out_clk_clk),                                      //                      clk.clk
		.reset                  (mm_clock_crossing_bridge_0_s0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (mm_clock_crossing_bridge_0_s0_agent_m0_address),                  // avalon_universal_slave_0.address
		.uav_burstcount         (mm_clock_crossing_bridge_0_s0_agent_m0_burstcount),               //                         .burstcount
		.uav_read               (mm_clock_crossing_bridge_0_s0_agent_m0_read),                     //                         .read
		.uav_write              (mm_clock_crossing_bridge_0_s0_agent_m0_write),                    //                         .write
		.uav_waitrequest        (mm_clock_crossing_bridge_0_s0_agent_m0_waitrequest),              //                         .waitrequest
		.uav_readdatavalid      (mm_clock_crossing_bridge_0_s0_agent_m0_readdatavalid),            //                         .readdatavalid
		.uav_byteenable         (mm_clock_crossing_bridge_0_s0_agent_m0_byteenable),               //                         .byteenable
		.uav_readdata           (mm_clock_crossing_bridge_0_s0_agent_m0_readdata),                 //                         .readdata
		.uav_writedata          (mm_clock_crossing_bridge_0_s0_agent_m0_writedata),                //                         .writedata
		.uav_lock               (mm_clock_crossing_bridge_0_s0_agent_m0_lock),                     //                         .lock
		.uav_debugaccess        (mm_clock_crossing_bridge_0_s0_agent_m0_debugaccess),              //                         .debugaccess
		.av_address             (mm_clock_crossing_bridge_0_s0_address),                           //      avalon_anti_slave_0.address
		.av_write               (mm_clock_crossing_bridge_0_s0_write),                             //                         .write
		.av_read                (mm_clock_crossing_bridge_0_s0_read),                              //                         .read
		.av_readdata            (mm_clock_crossing_bridge_0_s0_readdata),                          //                         .readdata
		.av_writedata           (mm_clock_crossing_bridge_0_s0_writedata),                         //                         .writedata
		.av_burstcount          (mm_clock_crossing_bridge_0_s0_burstcount),                        //                         .burstcount
		.av_byteenable          (mm_clock_crossing_bridge_0_s0_byteenable),                        //                         .byteenable
		.av_readdatavalid       (mm_clock_crossing_bridge_0_s0_readdatavalid),                     //                         .readdatavalid
		.av_waitrequest         (mm_clock_crossing_bridge_0_s0_waitrequest),                       //                         .waitrequest
		.av_debugaccess         (mm_clock_crossing_bridge_0_s0_debugaccess),                       //                         .debugaccess
		.av_begintransfer       (),                                                                //              (terminated)
		.av_beginbursttransfer  (),                                                                //              (terminated)
		.av_writebyteenable     (),                                                                //              (terminated)
		.av_lock                (),                                                                //              (terminated)
		.av_chipselect          (),                                                                //              (terminated)
		.av_clken               (),                                                                //              (terminated)
		.uav_clken              (1'b0),                                                            //              (terminated)
		.av_outputenable        (),                                                                //              (terminated)
		.uav_response           (),                                                                //              (terminated)
		.av_response            (2'b00),                                                           //              (terminated)
		.uav_writeresponsevalid (),                                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                             //              (terminated)
	);

	altera_merlin_axi_master_ni #(
		.ID_WIDTH                  (4),
		.ADDR_WIDTH                (32),
		.RDATA_WIDTH               (32),
		.WDATA_WIDTH               (32),
		.ADDR_USER_WIDTH           (5),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (4),
		.AXI_LOCK_WIDTH            (2),
		.AXI_VERSION               ("AXI3"),
		.WRITE_ISSUING_CAPABILITY  (1),
		.READ_ISSUING_CAPABILITY   (1),
		.PKT_BEGIN_BURST           (105),
		.PKT_CACHE_H               (119),
		.PKT_CACHE_L               (116),
		.PKT_ADDR_SIDEBAND_H       (103),
		.PKT_ADDR_SIDEBAND_L       (99),
		.PKT_PROTECTION_H          (115),
		.PKT_PROTECTION_L          (113),
		.PKT_BURST_SIZE_H          (96),
		.PKT_BURST_SIZE_L          (94),
		.PKT_BURST_TYPE_H          (98),
		.PKT_BURST_TYPE_L          (97),
		.PKT_RESPONSE_STATUS_L     (120),
		.PKT_RESPONSE_STATUS_H     (121),
		.PKT_BURSTWRAP_H           (93),
		.PKT_BURSTWRAP_L           (87),
		.PKT_BYTE_CNT_H            (86),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (107),
		.PKT_SRC_ID_L              (107),
		.PKT_DEST_ID_H             (108),
		.PKT_DEST_ID_L             (108),
		.PKT_THREAD_ID_H           (112),
		.PKT_THREAD_ID_L           (109),
		.PKT_QOS_L                 (106),
		.PKT_QOS_H                 (106),
		.PKT_ORI_BURST_SIZE_L      (122),
		.PKT_ORI_BURST_SIZE_H      (124),
		.PKT_DATA_SIDEBAND_H       (104),
		.PKT_DATA_SIDEBAND_L       (104),
		.ST_DATA_W                 (125),
		.ST_CHANNEL_W              (2),
		.ID                        (0)
	) mux_ddr_0_altera_axi_master_agent (
		.aclk                   (clk_1_clk_clk),                                            //              clk.clk
		.aresetn                (~mux_ddr_0_reset_reset_bridge_in_reset_reset),             //        clk_reset.reset_n
		.write_cp_valid         (mux_ddr_0_altera_axi_master_agent_write_cp_valid),         //         write_cp.valid
		.write_cp_data          (mux_ddr_0_altera_axi_master_agent_write_cp_data),          //                 .data
		.write_cp_startofpacket (mux_ddr_0_altera_axi_master_agent_write_cp_startofpacket), //                 .startofpacket
		.write_cp_endofpacket   (mux_ddr_0_altera_axi_master_agent_write_cp_endofpacket),   //                 .endofpacket
		.write_cp_ready         (mux_ddr_0_altera_axi_master_agent_write_cp_ready),         //                 .ready
		.write_rp_valid         (rsp_mux_src_valid),                                        //         write_rp.valid
		.write_rp_data          (rsp_mux_src_data),                                         //                 .data
		.write_rp_channel       (rsp_mux_src_channel),                                      //                 .channel
		.write_rp_startofpacket (rsp_mux_src_startofpacket),                                //                 .startofpacket
		.write_rp_endofpacket   (rsp_mux_src_endofpacket),                                  //                 .endofpacket
		.write_rp_ready         (rsp_mux_src_ready),                                        //                 .ready
		.read_cp_valid          (mux_ddr_0_altera_axi_master_agent_read_cp_valid),          //          read_cp.valid
		.read_cp_data           (mux_ddr_0_altera_axi_master_agent_read_cp_data),           //                 .data
		.read_cp_startofpacket  (mux_ddr_0_altera_axi_master_agent_read_cp_startofpacket),  //                 .startofpacket
		.read_cp_endofpacket    (mux_ddr_0_altera_axi_master_agent_read_cp_endofpacket),    //                 .endofpacket
		.read_cp_ready          (mux_ddr_0_altera_axi_master_agent_read_cp_ready),          //                 .ready
		.read_rp_valid          (rsp_mux_001_src_valid),                                    //          read_rp.valid
		.read_rp_data           (rsp_mux_001_src_data),                                     //                 .data
		.read_rp_channel        (rsp_mux_001_src_channel),                                  //                 .channel
		.read_rp_startofpacket  (rsp_mux_001_src_startofpacket),                            //                 .startofpacket
		.read_rp_endofpacket    (rsp_mux_001_src_endofpacket),                              //                 .endofpacket
		.read_rp_ready          (rsp_mux_001_src_ready),                                    //                 .ready
		.awid                   (mux_ddr_0_altera_axi_master_awid),                         // altera_axi_slave.awid
		.awaddr                 (mux_ddr_0_altera_axi_master_awaddr),                       //                 .awaddr
		.awlen                  (mux_ddr_0_altera_axi_master_awlen),                        //                 .awlen
		.awsize                 (mux_ddr_0_altera_axi_master_awsize),                       //                 .awsize
		.awburst                (mux_ddr_0_altera_axi_master_awburst),                      //                 .awburst
		.awlock                 (mux_ddr_0_altera_axi_master_awlock),                       //                 .awlock
		.awcache                (mux_ddr_0_altera_axi_master_awcache),                      //                 .awcache
		.awprot                 (mux_ddr_0_altera_axi_master_awprot),                       //                 .awprot
		.awuser                 (mux_ddr_0_altera_axi_master_awuser),                       //                 .awuser
		.awvalid                (mux_ddr_0_altera_axi_master_awvalid),                      //                 .awvalid
		.awready                (mux_ddr_0_altera_axi_master_awready),                      //                 .awready
		.wid                    (mux_ddr_0_altera_axi_master_wid),                          //                 .wid
		.wdata                  (mux_ddr_0_altera_axi_master_wdata),                        //                 .wdata
		.wstrb                  (mux_ddr_0_altera_axi_master_wstrb),                        //                 .wstrb
		.wlast                  (mux_ddr_0_altera_axi_master_wlast),                        //                 .wlast
		.wvalid                 (mux_ddr_0_altera_axi_master_wvalid),                       //                 .wvalid
		.wready                 (mux_ddr_0_altera_axi_master_wready),                       //                 .wready
		.bid                    (mux_ddr_0_altera_axi_master_bid),                          //                 .bid
		.bresp                  (mux_ddr_0_altera_axi_master_bresp),                        //                 .bresp
		.bvalid                 (mux_ddr_0_altera_axi_master_bvalid),                       //                 .bvalid
		.bready                 (mux_ddr_0_altera_axi_master_bready),                       //                 .bready
		.arid                   (mux_ddr_0_altera_axi_master_arid),                         //                 .arid
		.araddr                 (mux_ddr_0_altera_axi_master_araddr),                       //                 .araddr
		.arlen                  (mux_ddr_0_altera_axi_master_arlen),                        //                 .arlen
		.arsize                 (mux_ddr_0_altera_axi_master_arsize),                       //                 .arsize
		.arburst                (mux_ddr_0_altera_axi_master_arburst),                      //                 .arburst
		.arlock                 (mux_ddr_0_altera_axi_master_arlock),                       //                 .arlock
		.arcache                (mux_ddr_0_altera_axi_master_arcache),                      //                 .arcache
		.arprot                 (mux_ddr_0_altera_axi_master_arprot),                       //                 .arprot
		.aruser                 (mux_ddr_0_altera_axi_master_aruser),                       //                 .aruser
		.arvalid                (mux_ddr_0_altera_axi_master_arvalid),                      //                 .arvalid
		.arready                (mux_ddr_0_altera_axi_master_arready),                      //                 .arready
		.rid                    (mux_ddr_0_altera_axi_master_rid),                          //                 .rid
		.rdata                  (mux_ddr_0_altera_axi_master_rdata),                        //                 .rdata
		.rresp                  (mux_ddr_0_altera_axi_master_rresp),                        //                 .rresp
		.rlast                  (mux_ddr_0_altera_axi_master_rlast),                        //                 .rlast
		.rvalid                 (mux_ddr_0_altera_axi_master_rvalid),                       //                 .rvalid
		.rready                 (mux_ddr_0_altera_axi_master_rready),                       //                 .rready
		.awqos                  (4'b0000),                                                  //      (terminated)
		.arqos                  (4'b0000),                                                  //      (terminated)
		.awregion               (4'b0000),                                                  //      (terminated)
		.arregion               (4'b0000),                                                  //      (terminated)
		.wuser                  (1'b0),                                                     //      (terminated)
		.ruser                  (),                                                         //      (terminated)
		.buser                  ()                                                          //      (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (664),
		.PKT_ORI_BURST_SIZE_L      (662),
		.PKT_RESPONSE_STATUS_H     (661),
		.PKT_RESPONSE_STATUS_L     (660),
		.PKT_BURST_SIZE_H          (636),
		.PKT_BURST_SIZE_L          (634),
		.PKT_TRANS_LOCK            (612),
		.PKT_BEGIN_BURST           (645),
		.PKT_PROTECTION_H          (655),
		.PKT_PROTECTION_L          (653),
		.PKT_BURSTWRAP_H           (633),
		.PKT_BURSTWRAP_L           (627),
		.PKT_BYTE_CNT_H            (626),
		.PKT_BYTE_CNT_L            (614),
		.PKT_ADDR_H                (607),
		.PKT_ADDR_L                (576),
		.PKT_TRANS_COMPRESSED_READ (608),
		.PKT_TRANS_POSTED          (609),
		.PKT_TRANS_WRITE           (610),
		.PKT_TRANS_READ            (611),
		.PKT_DATA_H                (511),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (575),
		.PKT_BYTEEN_L              (512),
		.PKT_SRC_ID_H              (647),
		.PKT_SRC_ID_L              (647),
		.PKT_DEST_ID_H             (648),
		.PKT_DEST_ID_L             (648),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (2),
		.ST_DATA_W                 (665),
		.AVS_BURSTCOUNT_W          (13),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) mm_clock_crossing_bridge_0_s0_agent (
		.clk                     (axi_clk_bridge_out_clk_clk),                                        //             clk.clk
		.reset                   (mm_clock_crossing_bridge_0_s0_reset_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (mm_clock_crossing_bridge_0_s0_agent_m0_address),                    //              m0.address
		.m0_burstcount           (mm_clock_crossing_bridge_0_s0_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (mm_clock_crossing_bridge_0_s0_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (mm_clock_crossing_bridge_0_s0_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (mm_clock_crossing_bridge_0_s0_agent_m0_lock),                       //                .lock
		.m0_readdata             (mm_clock_crossing_bridge_0_s0_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (mm_clock_crossing_bridge_0_s0_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (mm_clock_crossing_bridge_0_s0_agent_m0_read),                       //                .read
		.m0_waitrequest          (mm_clock_crossing_bridge_0_s0_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (mm_clock_crossing_bridge_0_s0_agent_m0_writedata),                  //                .writedata
		.m0_write                (mm_clock_crossing_bridge_0_s0_agent_m0_write),                      //                .write
		.rp_endofpacket          (mm_clock_crossing_bridge_0_s0_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (mm_clock_crossing_bridge_0_s0_agent_rp_ready),                      //                .ready
		.rp_valid                (mm_clock_crossing_bridge_0_s0_agent_rp_valid),                      //                .valid
		.rp_data                 (mm_clock_crossing_bridge_0_s0_agent_rp_data),                       //                .data
		.rp_startofpacket        (mm_clock_crossing_bridge_0_s0_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (mm_clock_crossing_bridge_0_s0_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (mm_clock_crossing_bridge_0_s0_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (mm_clock_crossing_bridge_0_s0_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (mm_clock_crossing_bridge_0_s0_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (mm_clock_crossing_bridge_0_s0_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (mm_clock_crossing_bridge_0_s0_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (mm_clock_crossing_bridge_0_s0_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (mm_clock_crossing_bridge_0_s0_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (mm_clock_crossing_bridge_0_s0_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (mm_clock_crossing_bridge_0_s0_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (mm_clock_crossing_bridge_0_s0_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (mm_clock_crossing_bridge_0_s0_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (mm_clock_crossing_bridge_0_s0_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (mm_clock_crossing_bridge_0_s0_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (mm_clock_crossing_bridge_0_s0_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (mm_clock_crossing_bridge_0_s0_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                     //                .error
		.rdata_fifo_src_ready    (mm_clock_crossing_bridge_0_s0_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mm_clock_crossing_bridge_0_s0_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (mm_clock_crossing_bridge_0_s0_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (666),
		.FIFO_DEPTH          (129),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mm_clock_crossing_bridge_0_s0_agent_rsp_fifo (
		.clk               (axi_clk_bridge_out_clk_clk),                                      //       clk.clk
		.reset             (mm_clock_crossing_bridge_0_s0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (mm_clock_crossing_bridge_0_s0_agent_rf_source_data),              //        in.data
		.in_valid          (mm_clock_crossing_bridge_0_s0_agent_rf_source_valid),             //          .valid
		.in_ready          (mm_clock_crossing_bridge_0_s0_agent_rf_source_ready),             //          .ready
		.in_startofpacket  (mm_clock_crossing_bridge_0_s0_agent_rf_source_startofpacket),     //          .startofpacket
		.in_endofpacket    (mm_clock_crossing_bridge_0_s0_agent_rf_source_endofpacket),       //          .endofpacket
		.out_data          (mm_clock_crossing_bridge_0_s0_agent_rsp_fifo_out_data),           //       out.data
		.out_valid         (mm_clock_crossing_bridge_0_s0_agent_rsp_fifo_out_valid),          //          .valid
		.out_ready         (mm_clock_crossing_bridge_0_s0_agent_rsp_fifo_out_ready),          //          .ready
		.out_startofpacket (mm_clock_crossing_bridge_0_s0_agent_rsp_fifo_out_startofpacket),  //          .startofpacket
		.out_endofpacket   (mm_clock_crossing_bridge_0_s0_agent_rsp_fifo_out_endofpacket),    //          .endofpacket
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (514),
		.FIFO_DEPTH          (512),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mm_clock_crossing_bridge_0_s0_agent_rdata_fifo (
		.clk               (axi_clk_bridge_out_clk_clk),                                      //       clk.clk
		.reset             (mm_clock_crossing_bridge_0_s0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (mm_clock_crossing_bridge_0_s0_agent_rdata_fifo_src_data),         //        in.data
		.in_valid          (mm_clock_crossing_bridge_0_s0_agent_rdata_fifo_src_valid),        //          .valid
		.in_ready          (mm_clock_crossing_bridge_0_s0_agent_rdata_fifo_src_ready),        //          .ready
		.out_data          (mm_clock_crossing_bridge_0_s0_agent_rdata_fifo_out_data),         //       out.data
		.out_valid         (mm_clock_crossing_bridge_0_s0_agent_rdata_fifo_out_valid),        //          .valid
		.out_ready         (mm_clock_crossing_bridge_0_s0_agent_rdata_fifo_out_ready),        //          .ready
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_startofpacket  (1'b0),                                                            // (terminated)
		.in_endofpacket    (1'b0),                                                            // (terminated)
		.out_startofpacket (),                                                                // (terminated)
		.out_endofpacket   (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	som_system_altera_merlin_router_180_gil3sua router (
		.sink_ready         (mux_ddr_0_altera_axi_master_agent_write_cp_ready),         //      sink.ready
		.sink_valid         (mux_ddr_0_altera_axi_master_agent_write_cp_valid),         //          .valid
		.sink_data          (mux_ddr_0_altera_axi_master_agent_write_cp_data),          //          .data
		.sink_startofpacket (mux_ddr_0_altera_axi_master_agent_write_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (mux_ddr_0_altera_axi_master_agent_write_cp_endofpacket),   //          .endofpacket
		.clk                (clk_1_clk_clk),                                            //       clk.clk
		.reset              (mux_ddr_0_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.src_ready          (router_src_ready),                                         //       src.ready
		.src_valid          (router_src_valid),                                         //          .valid
		.src_data           (router_src_data),                                          //          .data
		.src_channel        (router_src_channel),                                       //          .channel
		.src_startofpacket  (router_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                    //          .endofpacket
	);

	som_system_altera_merlin_router_180_gil3sua router_001 (
		.sink_ready         (mux_ddr_0_altera_axi_master_agent_read_cp_ready),         //      sink.ready
		.sink_valid         (mux_ddr_0_altera_axi_master_agent_read_cp_valid),         //          .valid
		.sink_data          (mux_ddr_0_altera_axi_master_agent_read_cp_data),          //          .data
		.sink_startofpacket (mux_ddr_0_altera_axi_master_agent_read_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (mux_ddr_0_altera_axi_master_agent_read_cp_endofpacket),   //          .endofpacket
		.clk                (clk_1_clk_clk),                                           //       clk.clk
		.reset              (mux_ddr_0_reset_reset_bridge_in_reset_reset),             // clk_reset.reset
		.src_ready          (router_001_src_ready),                                    //       src.ready
		.src_valid          (router_001_src_valid),                                    //          .valid
		.src_data           (router_001_src_data),                                     //          .data
		.src_channel        (router_001_src_channel),                                  //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                               //          .endofpacket
	);

	som_system_altera_merlin_router_180_jxs3q3q router_002 (
		.sink_ready         (mm_clock_crossing_bridge_0_s0_agent_rp_ready),                    //      sink.ready
		.sink_valid         (mm_clock_crossing_bridge_0_s0_agent_rp_valid),                    //          .valid
		.sink_data          (mm_clock_crossing_bridge_0_s0_agent_rp_data),                     //          .data
		.sink_startofpacket (mm_clock_crossing_bridge_0_s0_agent_rp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (mm_clock_crossing_bridge_0_s0_agent_rp_endofpacket),              //          .endofpacket
		.clk                (axi_clk_bridge_out_clk_clk),                                      //       clk.clk
		.reset              (mm_clock_crossing_bridge_0_s0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                                            //       src.ready
		.src_valid          (router_002_src_valid),                                            //          .valid
		.src_data           (router_002_src_data),                                             //          .data
		.src_channel        (router_002_src_channel),                                          //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                       //          .endofpacket
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (607),
		.PKT_ADDR_L                (576),
		.PKT_BEGIN_BURST           (645),
		.PKT_BYTE_CNT_H            (626),
		.PKT_BYTE_CNT_L            (614),
		.PKT_BYTEEN_H              (575),
		.PKT_BYTEEN_L              (512),
		.PKT_BURST_SIZE_H          (636),
		.PKT_BURST_SIZE_L          (634),
		.PKT_BURST_TYPE_H          (638),
		.PKT_BURST_TYPE_L          (637),
		.PKT_BURSTWRAP_H           (633),
		.PKT_BURSTWRAP_L           (627),
		.PKT_TRANS_COMPRESSED_READ (608),
		.PKT_TRANS_WRITE           (610),
		.PKT_TRANS_READ            (611),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (665),
		.ST_CHANNEL_W              (2),
		.OUT_BYTE_CNT_H            (626),
		.OUT_BURSTWRAP_H           (633),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) mm_clock_crossing_bridge_0_s0_burst_adapter (
		.clk                   (axi_clk_bridge_out_clk_clk),                                        //       cr0.clk
		.reset                 (mm_clock_crossing_bridge_0_s0_reset_reset_bridge_in_reset_reset),   // cr0_reset.reset
		.sink0_valid           (mm_clock_crossing_bridge_0_s0_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (mm_clock_crossing_bridge_0_s0_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (mm_clock_crossing_bridge_0_s0_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (mm_clock_crossing_bridge_0_s0_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (mm_clock_crossing_bridge_0_s0_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (mm_clock_crossing_bridge_0_s0_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (mm_clock_crossing_bridge_0_s0_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (mm_clock_crossing_bridge_0_s0_burst_adapter_source0_data),          //          .data
		.source0_channel       (mm_clock_crossing_bridge_0_s0_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (mm_clock_crossing_bridge_0_s0_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (mm_clock_crossing_bridge_0_s0_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (mm_clock_crossing_bridge_0_s0_burst_adapter_source0_ready)          //          .ready
	);

	som_system_altera_merlin_demultiplexer_180_reioipy cmd_demux (
		.clk                (clk_1_clk_clk),                               //       clk.clk
		.reset              (mux_ddr_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_src_ready),                            //      sink.ready
		.sink_channel       (router_src_channel),                          //          .channel
		.sink_data          (router_src_data),                             //          .data
		.sink_startofpacket (router_src_startofpacket),                    //          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                      //          .endofpacket
		.sink_valid         (router_src_valid),                            //          .valid
		.src0_ready         (cmd_demux_src0_ready),                        //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                        //          .valid
		.src0_data          (cmd_demux_src0_data),                         //          .data
		.src0_channel       (cmd_demux_src0_channel),                      //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)                   //          .endofpacket
	);

	som_system_altera_merlin_demultiplexer_180_reioipy cmd_demux_001 (
		.clk                (clk_1_clk_clk),                               //       clk.clk
		.reset              (mux_ddr_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                        //      sink.ready
		.sink_channel       (router_001_src_channel),                      //          .channel
		.sink_data          (router_001_src_data),                         //          .data
		.sink_startofpacket (router_001_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_001_src_valid),                        //          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                    //      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                    //          .valid
		.src0_data          (cmd_demux_001_src0_data),                     //          .data
		.src0_channel       (cmd_demux_001_src0_channel),                  //          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket)               //          .endofpacket
	);

	som_system_altera_merlin_multiplexer_180_xdoo6gq cmd_mux (
		.clk                 (axi_clk_bridge_out_clk_clk),                                      //       clk.clk
		.reset               (mm_clock_crossing_bridge_0_s0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                               //       src.ready
		.src_valid           (cmd_mux_src_valid),                                               //          .valid
		.src_data            (cmd_mux_src_data),                                                //          .data
		.src_channel         (cmd_mux_src_channel),                                             //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                       //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                         //          .endofpacket
		.sink0_ready         (crosser_out_ready),                                               //     sink0.ready
		.sink0_valid         (crosser_out_valid),                                               //          .valid
		.sink0_channel       (crosser_out_channel),                                             //          .channel
		.sink0_data          (crosser_out_data),                                                //          .data
		.sink0_startofpacket (crosser_out_startofpacket),                                       //          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket),                                         //          .endofpacket
		.sink1_ready         (crosser_001_out_ready),                                           //     sink1.ready
		.sink1_valid         (crosser_001_out_valid),                                           //          .valid
		.sink1_channel       (crosser_001_out_channel),                                         //          .channel
		.sink1_data          (crosser_001_out_data),                                            //          .data
		.sink1_startofpacket (crosser_001_out_startofpacket),                                   //          .startofpacket
		.sink1_endofpacket   (crosser_001_out_endofpacket)                                      //          .endofpacket
	);

	som_system_altera_merlin_demultiplexer_180_ae2iwoi rsp_demux (
		.clk                (axi_clk_bridge_out_clk_clk),                                        //       clk.clk
		.reset              (mm_clock_crossing_bridge_0_s0_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.sink_ready         (mm_clock_crossing_bridge_0_s0_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (mm_clock_crossing_bridge_0_s0_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (mm_clock_crossing_bridge_0_s0_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (mm_clock_crossing_bridge_0_s0_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (mm_clock_crossing_bridge_0_s0_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (mm_clock_crossing_bridge_0_s0_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                              //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                              //          .valid
		.src0_data          (rsp_demux_src0_data),                                               //          .data
		.src0_channel       (rsp_demux_src0_channel),                                            //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                                        //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                                              //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                                              //          .valid
		.src1_data          (rsp_demux_src1_data),                                               //          .data
		.src1_channel       (rsp_demux_src1_channel),                                            //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                                      //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)                                         //          .endofpacket
	);

	som_system_altera_merlin_multiplexer_180_2q47q3i rsp_mux (
		.clk                 (clk_1_clk_clk),                               //       clk.clk
		.reset               (mux_ddr_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                           //       src.ready
		.src_valid           (rsp_mux_src_valid),                           //          .valid
		.src_data            (rsp_mux_src_data),                            //          .data
		.src_channel         (rsp_mux_src_channel),                         //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                   //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                     //          .endofpacket
		.sink0_ready         (crosser_002_out_ready),                       //     sink0.ready
		.sink0_valid         (crosser_002_out_valid),                       //          .valid
		.sink0_channel       (crosser_002_out_channel),                     //          .channel
		.sink0_data          (crosser_002_out_data),                        //          .data
		.sink0_startofpacket (crosser_002_out_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (crosser_002_out_endofpacket)                  //          .endofpacket
	);

	som_system_altera_merlin_multiplexer_180_2q47q3i rsp_mux_001 (
		.clk                 (clk_1_clk_clk),                               //       clk.clk
		.reset               (mux_ddr_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                       //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                       //          .valid
		.src_data            (rsp_mux_001_src_data),                        //          .data
		.src_channel         (rsp_mux_001_src_channel),                     //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (crosser_003_out_ready),                       //     sink0.ready
		.sink0_valid         (crosser_003_out_valid),                       //          .valid
		.sink0_channel       (crosser_003_out_channel),                     //          .channel
		.sink0_data          (crosser_003_out_data),                        //          .data
		.sink0_startofpacket (crosser_003_out_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (crosser_003_out_endofpacket)                  //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (607),
		.IN_PKT_ADDR_L                 (576),
		.IN_PKT_DATA_H                 (511),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (575),
		.IN_PKT_BYTEEN_L               (512),
		.IN_PKT_BYTE_CNT_H             (626),
		.IN_PKT_BYTE_CNT_L             (614),
		.IN_PKT_TRANS_COMPRESSED_READ  (608),
		.IN_PKT_TRANS_WRITE            (610),
		.IN_PKT_BURSTWRAP_H            (633),
		.IN_PKT_BURSTWRAP_L            (627),
		.IN_PKT_BURST_SIZE_H           (636),
		.IN_PKT_BURST_SIZE_L           (634),
		.IN_PKT_RESPONSE_STATUS_H      (661),
		.IN_PKT_RESPONSE_STATUS_L      (660),
		.IN_PKT_TRANS_EXCLUSIVE        (613),
		.IN_PKT_BURST_TYPE_H           (638),
		.IN_PKT_BURST_TYPE_L           (637),
		.IN_PKT_ORI_BURST_SIZE_L       (662),
		.IN_PKT_ORI_BURST_SIZE_H       (664),
		.IN_ST_DATA_W                  (665),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (86),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (96),
		.OUT_PKT_BURST_SIZE_L          (94),
		.OUT_PKT_RESPONSE_STATUS_H     (121),
		.OUT_PKT_RESPONSE_STATUS_L     (120),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (98),
		.OUT_PKT_BURST_TYPE_L          (97),
		.OUT_PKT_ORI_BURST_SIZE_L      (122),
		.OUT_PKT_ORI_BURST_SIZE_H      (124),
		.OUT_ST_DATA_W                 (125),
		.ST_CHANNEL_W                  (2),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) mm_clock_crossing_bridge_0_s0_rsp_width_adapter (
		.clk                  (axi_clk_bridge_out_clk_clk),                                        //       clk.clk
		.reset                (mm_clock_crossing_bridge_0_s0_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_valid             (router_002_src_valid),                                              //      sink.valid
		.in_channel           (router_002_src_channel),                                            //          .channel
		.in_startofpacket     (router_002_src_startofpacket),                                      //          .startofpacket
		.in_endofpacket       (router_002_src_endofpacket),                                        //          .endofpacket
		.in_ready             (router_002_src_ready),                                              //          .ready
		.in_data              (router_002_src_data),                                               //          .data
		.out_endofpacket      (mm_clock_crossing_bridge_0_s0_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (mm_clock_crossing_bridge_0_s0_rsp_width_adapter_src_data),          //          .data
		.out_channel          (mm_clock_crossing_bridge_0_s0_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (mm_clock_crossing_bridge_0_s0_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (mm_clock_crossing_bridge_0_s0_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (mm_clock_crossing_bridge_0_s0_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                             // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (86),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (93),
		.IN_PKT_BURSTWRAP_L            (87),
		.IN_PKT_BURST_SIZE_H           (96),
		.IN_PKT_BURST_SIZE_L           (94),
		.IN_PKT_RESPONSE_STATUS_H      (121),
		.IN_PKT_RESPONSE_STATUS_L      (120),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (98),
		.IN_PKT_BURST_TYPE_L           (97),
		.IN_PKT_ORI_BURST_SIZE_L       (122),
		.IN_PKT_ORI_BURST_SIZE_H       (124),
		.IN_ST_DATA_W                  (125),
		.OUT_PKT_ADDR_H                (607),
		.OUT_PKT_ADDR_L                (576),
		.OUT_PKT_DATA_H                (511),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (575),
		.OUT_PKT_BYTEEN_L              (512),
		.OUT_PKT_BYTE_CNT_H            (626),
		.OUT_PKT_BYTE_CNT_L            (614),
		.OUT_PKT_TRANS_COMPRESSED_READ (608),
		.OUT_PKT_BURST_SIZE_H          (636),
		.OUT_PKT_BURST_SIZE_L          (634),
		.OUT_PKT_RESPONSE_STATUS_H     (661),
		.OUT_PKT_RESPONSE_STATUS_L     (660),
		.OUT_PKT_TRANS_EXCLUSIVE       (613),
		.OUT_PKT_BURST_TYPE_H          (638),
		.OUT_PKT_BURST_TYPE_L          (637),
		.OUT_PKT_ORI_BURST_SIZE_L      (662),
		.OUT_PKT_ORI_BURST_SIZE_H      (664),
		.OUT_ST_DATA_W                 (665),
		.ST_CHANNEL_W                  (2),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) mm_clock_crossing_bridge_0_s0_cmd_width_adapter (
		.clk                  (axi_clk_bridge_out_clk_clk),                                        //       clk.clk
		.reset                (mm_clock_crossing_bridge_0_s0_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_valid             (cmd_mux_src_valid),                                                 //      sink.valid
		.in_channel           (cmd_mux_src_channel),                                               //          .channel
		.in_startofpacket     (cmd_mux_src_startofpacket),                                         //          .startofpacket
		.in_endofpacket       (cmd_mux_src_endofpacket),                                           //          .endofpacket
		.in_ready             (cmd_mux_src_ready),                                                 //          .ready
		.in_data              (cmd_mux_src_data),                                                  //          .data
		.out_endofpacket      (mm_clock_crossing_bridge_0_s0_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (mm_clock_crossing_bridge_0_s0_cmd_width_adapter_src_data),          //          .data
		.out_channel          (mm_clock_crossing_bridge_0_s0_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (mm_clock_crossing_bridge_0_s0_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (mm_clock_crossing_bridge_0_s0_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (mm_clock_crossing_bridge_0_s0_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                             // (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (125),
		.BITS_PER_SYMBOL     (125),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (2),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser (
		.in_clk            (clk_1_clk_clk),                                                   //        in_clk.clk
		.in_reset          (mux_ddr_0_reset_reset_bridge_in_reset_reset),                     //  in_clk_reset.reset
		.out_clk           (axi_clk_bridge_out_clk_clk),                                      //       out_clk.clk
		.out_reset         (mm_clock_crossing_bridge_0_s0_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src0_ready),                                            //            in.ready
		.in_valid          (cmd_demux_src0_valid),                                            //              .valid
		.in_startofpacket  (cmd_demux_src0_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (cmd_demux_src0_endofpacket),                                      //              .endofpacket
		.in_channel        (cmd_demux_src0_channel),                                          //              .channel
		.in_data           (cmd_demux_src0_data),                                             //              .data
		.out_ready         (crosser_out_ready),                                               //           out.ready
		.out_valid         (crosser_out_valid),                                               //              .valid
		.out_startofpacket (crosser_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_out_channel),                                             //              .channel
		.out_data          (crosser_out_data),                                                //              .data
		.in_empty          (1'b0),                                                            //   (terminated)
		.in_error          (1'b0),                                                            //   (terminated)
		.out_empty         (),                                                                //   (terminated)
		.out_error         ()                                                                 //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (125),
		.BITS_PER_SYMBOL     (125),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (2),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_001 (
		.in_clk            (clk_1_clk_clk),                                                   //        in_clk.clk
		.in_reset          (mux_ddr_0_reset_reset_bridge_in_reset_reset),                     //  in_clk_reset.reset
		.out_clk           (axi_clk_bridge_out_clk_clk),                                      //       out_clk.clk
		.out_reset         (mm_clock_crossing_bridge_0_s0_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src0_ready),                                        //            in.ready
		.in_valid          (cmd_demux_001_src0_valid),                                        //              .valid
		.in_startofpacket  (cmd_demux_001_src0_startofpacket),                                //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src0_endofpacket),                                  //              .endofpacket
		.in_channel        (cmd_demux_001_src0_channel),                                      //              .channel
		.in_data           (cmd_demux_001_src0_data),                                         //              .data
		.out_ready         (crosser_001_out_ready),                                           //           out.ready
		.out_valid         (crosser_001_out_valid),                                           //              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                                   //              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                                     //              .endofpacket
		.out_channel       (crosser_001_out_channel),                                         //              .channel
		.out_data          (crosser_001_out_data),                                            //              .data
		.in_empty          (1'b0),                                                            //   (terminated)
		.in_error          (1'b0),                                                            //   (terminated)
		.out_empty         (),                                                                //   (terminated)
		.out_error         ()                                                                 //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (125),
		.BITS_PER_SYMBOL     (125),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (2),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_002 (
		.in_clk            (axi_clk_bridge_out_clk_clk),                                      //        in_clk.clk
		.in_reset          (mm_clock_crossing_bridge_0_s0_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_1_clk_clk),                                                   //       out_clk.clk
		.out_reset         (mux_ddr_0_reset_reset_bridge_in_reset_reset),                     // out_clk_reset.reset
		.in_ready          (rsp_demux_src0_ready),                                            //            in.ready
		.in_valid          (rsp_demux_src0_valid),                                            //              .valid
		.in_startofpacket  (rsp_demux_src0_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (rsp_demux_src0_endofpacket),                                      //              .endofpacket
		.in_channel        (rsp_demux_src0_channel),                                          //              .channel
		.in_data           (rsp_demux_src0_data),                                             //              .data
		.out_ready         (crosser_002_out_ready),                                           //           out.ready
		.out_valid         (crosser_002_out_valid),                                           //              .valid
		.out_startofpacket (crosser_002_out_startofpacket),                                   //              .startofpacket
		.out_endofpacket   (crosser_002_out_endofpacket),                                     //              .endofpacket
		.out_channel       (crosser_002_out_channel),                                         //              .channel
		.out_data          (crosser_002_out_data),                                            //              .data
		.in_empty          (1'b0),                                                            //   (terminated)
		.in_error          (1'b0),                                                            //   (terminated)
		.out_empty         (),                                                                //   (terminated)
		.out_error         ()                                                                 //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (125),
		.BITS_PER_SYMBOL     (125),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (2),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_003 (
		.in_clk            (axi_clk_bridge_out_clk_clk),                                      //        in_clk.clk
		.in_reset          (mm_clock_crossing_bridge_0_s0_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_1_clk_clk),                                                   //       out_clk.clk
		.out_reset         (mux_ddr_0_reset_reset_bridge_in_reset_reset),                     // out_clk_reset.reset
		.in_ready          (rsp_demux_src1_ready),                                            //            in.ready
		.in_valid          (rsp_demux_src1_valid),                                            //              .valid
		.in_startofpacket  (rsp_demux_src1_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (rsp_demux_src1_endofpacket),                                      //              .endofpacket
		.in_channel        (rsp_demux_src1_channel),                                          //              .channel
		.in_data           (rsp_demux_src1_data),                                             //              .data
		.out_ready         (crosser_003_out_ready),                                           //           out.ready
		.out_valid         (crosser_003_out_valid),                                           //              .valid
		.out_startofpacket (crosser_003_out_startofpacket),                                   //              .startofpacket
		.out_endofpacket   (crosser_003_out_endofpacket),                                     //              .endofpacket
		.out_channel       (crosser_003_out_channel),                                         //              .channel
		.out_data          (crosser_003_out_data),                                            //              .data
		.in_empty          (1'b0),                                                            //   (terminated)
		.in_error          (1'b0),                                                            //   (terminated)
		.out_empty         (),                                                                //   (terminated)
		.out_error         ()                                                                 //   (terminated)
	);

	som_system_altera_avalon_st_adapter_180_v3lgypq #(
		.inBitsPerSymbol (514),
		.inUsePackets    (0),
		.inDataWidth     (514),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (514),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (axi_clk_bridge_out_clk_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (mm_clock_crossing_bridge_0_s0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (mm_clock_crossing_bridge_0_s0_agent_rdata_fifo_out_data),         //     in_0.data
		.in_0_valid     (mm_clock_crossing_bridge_0_s0_agent_rdata_fifo_out_valid),        //         .valid
		.in_0_ready     (mm_clock_crossing_bridge_0_s0_agent_rdata_fifo_out_ready),        //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                                   //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                                   //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                                    //         .error
	);

endmodule
