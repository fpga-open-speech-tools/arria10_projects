// som_system_altera_mm_interconnect_180_2zdh4ci.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.0 614

`timescale 1 ps / 1 ps
module som_system_altera_mm_interconnect_180_2zdh4ci (
		input  wire [3:0]   arria10_hps_0_h2f_axi_master_awid,                       //                      arria10_hps_0_h2f_axi_master.awid
		input  wire [31:0]  arria10_hps_0_h2f_axi_master_awaddr,                     //                                                  .awaddr
		input  wire [3:0]   arria10_hps_0_h2f_axi_master_awlen,                      //                                                  .awlen
		input  wire [2:0]   arria10_hps_0_h2f_axi_master_awsize,                     //                                                  .awsize
		input  wire [1:0]   arria10_hps_0_h2f_axi_master_awburst,                    //                                                  .awburst
		input  wire [1:0]   arria10_hps_0_h2f_axi_master_awlock,                     //                                                  .awlock
		input  wire [3:0]   arria10_hps_0_h2f_axi_master_awcache,                    //                                                  .awcache
		input  wire [2:0]   arria10_hps_0_h2f_axi_master_awprot,                     //                                                  .awprot
		input  wire [4:0]   arria10_hps_0_h2f_axi_master_awuser,                     //                                                  .awuser
		input  wire         arria10_hps_0_h2f_axi_master_awvalid,                    //                                                  .awvalid
		output wire         arria10_hps_0_h2f_axi_master_awready,                    //                                                  .awready
		input  wire [3:0]   arria10_hps_0_h2f_axi_master_wid,                        //                                                  .wid
		input  wire [127:0] arria10_hps_0_h2f_axi_master_wdata,                      //                                                  .wdata
		input  wire [15:0]  arria10_hps_0_h2f_axi_master_wstrb,                      //                                                  .wstrb
		input  wire         arria10_hps_0_h2f_axi_master_wlast,                      //                                                  .wlast
		input  wire         arria10_hps_0_h2f_axi_master_wvalid,                     //                                                  .wvalid
		output wire         arria10_hps_0_h2f_axi_master_wready,                     //                                                  .wready
		output wire [3:0]   arria10_hps_0_h2f_axi_master_bid,                        //                                                  .bid
		output wire [1:0]   arria10_hps_0_h2f_axi_master_bresp,                      //                                                  .bresp
		output wire         arria10_hps_0_h2f_axi_master_bvalid,                     //                                                  .bvalid
		input  wire         arria10_hps_0_h2f_axi_master_bready,                     //                                                  .bready
		input  wire [3:0]   arria10_hps_0_h2f_axi_master_arid,                       //                                                  .arid
		input  wire [31:0]  arria10_hps_0_h2f_axi_master_araddr,                     //                                                  .araddr
		input  wire [3:0]   arria10_hps_0_h2f_axi_master_arlen,                      //                                                  .arlen
		input  wire [2:0]   arria10_hps_0_h2f_axi_master_arsize,                     //                                                  .arsize
		input  wire [1:0]   arria10_hps_0_h2f_axi_master_arburst,                    //                                                  .arburst
		input  wire [1:0]   arria10_hps_0_h2f_axi_master_arlock,                     //                                                  .arlock
		input  wire [3:0]   arria10_hps_0_h2f_axi_master_arcache,                    //                                                  .arcache
		input  wire [2:0]   arria10_hps_0_h2f_axi_master_arprot,                     //                                                  .arprot
		input  wire [4:0]   arria10_hps_0_h2f_axi_master_aruser,                     //                                                  .aruser
		input  wire         arria10_hps_0_h2f_axi_master_arvalid,                    //                                                  .arvalid
		output wire         arria10_hps_0_h2f_axi_master_arready,                    //                                                  .arready
		output wire [3:0]   arria10_hps_0_h2f_axi_master_rid,                        //                                                  .rid
		output wire [127:0] arria10_hps_0_h2f_axi_master_rdata,                      //                                                  .rdata
		output wire [1:0]   arria10_hps_0_h2f_axi_master_rresp,                      //                                                  .rresp
		output wire         arria10_hps_0_h2f_axi_master_rlast,                      //                                                  .rlast
		output wire         arria10_hps_0_h2f_axi_master_rvalid,                     //                                                  .rvalid
		input  wire         arria10_hps_0_h2f_axi_master_rready,                     //                                                  .rready
		output wire [3:0]   mux_ddr_0_altera_axi_slave_awid,                         //                        mux_ddr_0_altera_axi_slave.awid
		output wire [28:0]  mux_ddr_0_altera_axi_slave_awaddr,                       //                                                  .awaddr
		output wire [3:0]   mux_ddr_0_altera_axi_slave_awlen,                        //                                                  .awlen
		output wire [2:0]   mux_ddr_0_altera_axi_slave_awsize,                       //                                                  .awsize
		output wire [1:0]   mux_ddr_0_altera_axi_slave_awburst,                      //                                                  .awburst
		output wire [1:0]   mux_ddr_0_altera_axi_slave_awlock,                       //                                                  .awlock
		output wire [3:0]   mux_ddr_0_altera_axi_slave_awcache,                      //                                                  .awcache
		output wire [2:0]   mux_ddr_0_altera_axi_slave_awprot,                       //                                                  .awprot
		output wire [4:0]   mux_ddr_0_altera_axi_slave_awuser,                       //                                                  .awuser
		output wire         mux_ddr_0_altera_axi_slave_awvalid,                      //                                                  .awvalid
		input  wire         mux_ddr_0_altera_axi_slave_awready,                      //                                                  .awready
		output wire [3:0]   mux_ddr_0_altera_axi_slave_wid,                          //                                                  .wid
		output wire [31:0]  mux_ddr_0_altera_axi_slave_wdata,                        //                                                  .wdata
		output wire [3:0]   mux_ddr_0_altera_axi_slave_wstrb,                        //                                                  .wstrb
		output wire         mux_ddr_0_altera_axi_slave_wlast,                        //                                                  .wlast
		output wire         mux_ddr_0_altera_axi_slave_wvalid,                       //                                                  .wvalid
		input  wire         mux_ddr_0_altera_axi_slave_wready,                       //                                                  .wready
		input  wire [3:0]   mux_ddr_0_altera_axi_slave_bid,                          //                                                  .bid
		input  wire [1:0]   mux_ddr_0_altera_axi_slave_bresp,                        //                                                  .bresp
		input  wire         mux_ddr_0_altera_axi_slave_bvalid,                       //                                                  .bvalid
		output wire         mux_ddr_0_altera_axi_slave_bready,                       //                                                  .bready
		output wire [3:0]   mux_ddr_0_altera_axi_slave_arid,                         //                                                  .arid
		output wire [28:0]  mux_ddr_0_altera_axi_slave_araddr,                       //                                                  .araddr
		output wire [3:0]   mux_ddr_0_altera_axi_slave_arlen,                        //                                                  .arlen
		output wire [2:0]   mux_ddr_0_altera_axi_slave_arsize,                       //                                                  .arsize
		output wire [1:0]   mux_ddr_0_altera_axi_slave_arburst,                      //                                                  .arburst
		output wire [1:0]   mux_ddr_0_altera_axi_slave_arlock,                       //                                                  .arlock
		output wire [3:0]   mux_ddr_0_altera_axi_slave_arcache,                      //                                                  .arcache
		output wire [2:0]   mux_ddr_0_altera_axi_slave_arprot,                       //                                                  .arprot
		output wire [4:0]   mux_ddr_0_altera_axi_slave_aruser,                       //                                                  .aruser
		output wire         mux_ddr_0_altera_axi_slave_arvalid,                      //                                                  .arvalid
		input  wire         mux_ddr_0_altera_axi_slave_arready,                      //                                                  .arready
		input  wire [3:0]   mux_ddr_0_altera_axi_slave_rid,                          //                                                  .rid
		input  wire [31:0]  mux_ddr_0_altera_axi_slave_rdata,                        //                                                  .rdata
		input  wire [1:0]   mux_ddr_0_altera_axi_slave_rresp,                        //                                                  .rresp
		input  wire         mux_ddr_0_altera_axi_slave_rlast,                        //                                                  .rlast
		input  wire         mux_ddr_0_altera_axi_slave_rvalid,                       //                                                  .rvalid
		output wire         mux_ddr_0_altera_axi_slave_rready,                       //                                                  .rready
		input  wire         axi_clk_bridge_out_clk_clk,                              //                            axi_clk_bridge_out_clk.clk
		input  wire         clk_1_clk_clk,                                           //                                         clk_1_clk.clk
		input  wire         arria10_hps_0_h2f_axi_reset_reset_bridge_in_reset_reset, // arria10_hps_0_h2f_axi_reset_reset_bridge_in_reset.reset
		input  wire         mux_ddr_0_reset_reset_bridge_in_reset_reset              //             mux_ddr_0_reset_reset_bridge_in_reset.reset
	);

	wire          rsp_mux_src_valid;                                                 // rsp_mux:src_valid -> arria10_hps_0_h2f_axi_master_agent:write_rp_valid
	wire  [230:0] rsp_mux_src_data;                                                  // rsp_mux:src_data -> arria10_hps_0_h2f_axi_master_agent:write_rp_data
	wire          rsp_mux_src_ready;                                                 // arria10_hps_0_h2f_axi_master_agent:write_rp_ready -> rsp_mux:src_ready
	wire    [1:0] rsp_mux_src_channel;                                               // rsp_mux:src_channel -> arria10_hps_0_h2f_axi_master_agent:write_rp_channel
	wire          rsp_mux_src_startofpacket;                                         // rsp_mux:src_startofpacket -> arria10_hps_0_h2f_axi_master_agent:write_rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                           // rsp_mux:src_endofpacket -> arria10_hps_0_h2f_axi_master_agent:write_rp_endofpacket
	wire          rsp_mux_001_src_valid;                                             // rsp_mux_001:src_valid -> arria10_hps_0_h2f_axi_master_agent:read_rp_valid
	wire  [230:0] rsp_mux_001_src_data;                                              // rsp_mux_001:src_data -> arria10_hps_0_h2f_axi_master_agent:read_rp_data
	wire          rsp_mux_001_src_ready;                                             // arria10_hps_0_h2f_axi_master_agent:read_rp_ready -> rsp_mux_001:src_ready
	wire    [1:0] rsp_mux_001_src_channel;                                           // rsp_mux_001:src_channel -> arria10_hps_0_h2f_axi_master_agent:read_rp_channel
	wire          rsp_mux_001_src_startofpacket;                                     // rsp_mux_001:src_startofpacket -> arria10_hps_0_h2f_axi_master_agent:read_rp_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                       // rsp_mux_001:src_endofpacket -> arria10_hps_0_h2f_axi_master_agent:read_rp_endofpacket
	wire          arria10_hps_0_h2f_axi_master_agent_write_cp_valid;                 // arria10_hps_0_h2f_axi_master_agent:write_cp_valid -> router:sink_valid
	wire  [230:0] arria10_hps_0_h2f_axi_master_agent_write_cp_data;                  // arria10_hps_0_h2f_axi_master_agent:write_cp_data -> router:sink_data
	wire          arria10_hps_0_h2f_axi_master_agent_write_cp_ready;                 // router:sink_ready -> arria10_hps_0_h2f_axi_master_agent:write_cp_ready
	wire          arria10_hps_0_h2f_axi_master_agent_write_cp_startofpacket;         // arria10_hps_0_h2f_axi_master_agent:write_cp_startofpacket -> router:sink_startofpacket
	wire          arria10_hps_0_h2f_axi_master_agent_write_cp_endofpacket;           // arria10_hps_0_h2f_axi_master_agent:write_cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                  // router:src_valid -> cmd_demux:sink_valid
	wire  [230:0] router_src_data;                                                   // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                  // cmd_demux:sink_ready -> router:src_ready
	wire    [1:0] router_src_channel;                                                // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                          // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                            // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          arria10_hps_0_h2f_axi_master_agent_read_cp_valid;                  // arria10_hps_0_h2f_axi_master_agent:read_cp_valid -> router_001:sink_valid
	wire  [230:0] arria10_hps_0_h2f_axi_master_agent_read_cp_data;                   // arria10_hps_0_h2f_axi_master_agent:read_cp_data -> router_001:sink_data
	wire          arria10_hps_0_h2f_axi_master_agent_read_cp_ready;                  // router_001:sink_ready -> arria10_hps_0_h2f_axi_master_agent:read_cp_ready
	wire          arria10_hps_0_h2f_axi_master_agent_read_cp_startofpacket;          // arria10_hps_0_h2f_axi_master_agent:read_cp_startofpacket -> router_001:sink_startofpacket
	wire          arria10_hps_0_h2f_axi_master_agent_read_cp_endofpacket;            // arria10_hps_0_h2f_axi_master_agent:read_cp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                              // router_001:src_valid -> cmd_demux_001:sink_valid
	wire  [230:0] router_001_src_data;                                               // router_001:src_data -> cmd_demux_001:sink_data
	wire          router_001_src_ready;                                              // cmd_demux_001:sink_ready -> router_001:src_ready
	wire    [1:0] router_001_src_channel;                                            // router_001:src_channel -> cmd_demux_001:sink_channel
	wire          router_001_src_startofpacket;                                      // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          router_001_src_endofpacket;                                        // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          mux_ddr_0_altera_axi_slave_agent_write_rp_valid;                   // mux_ddr_0_altera_axi_slave_agent:write_rp_valid -> router_002:sink_valid
	wire  [122:0] mux_ddr_0_altera_axi_slave_agent_write_rp_data;                    // mux_ddr_0_altera_axi_slave_agent:write_rp_data -> router_002:sink_data
	wire          mux_ddr_0_altera_axi_slave_agent_write_rp_ready;                   // router_002:sink_ready -> mux_ddr_0_altera_axi_slave_agent:write_rp_ready
	wire          mux_ddr_0_altera_axi_slave_agent_write_rp_startofpacket;           // mux_ddr_0_altera_axi_slave_agent:write_rp_startofpacket -> router_002:sink_startofpacket
	wire          mux_ddr_0_altera_axi_slave_agent_write_rp_endofpacket;             // mux_ddr_0_altera_axi_slave_agent:write_rp_endofpacket -> router_002:sink_endofpacket
	wire          mux_ddr_0_altera_axi_slave_agent_read_rp_valid;                    // mux_ddr_0_altera_axi_slave_agent:read_rp_valid -> router_003:sink_valid
	wire  [122:0] mux_ddr_0_altera_axi_slave_agent_read_rp_data;                     // mux_ddr_0_altera_axi_slave_agent:read_rp_data -> router_003:sink_data
	wire          mux_ddr_0_altera_axi_slave_agent_read_rp_ready;                    // router_003:sink_ready -> mux_ddr_0_altera_axi_slave_agent:read_rp_ready
	wire          mux_ddr_0_altera_axi_slave_agent_read_rp_startofpacket;            // mux_ddr_0_altera_axi_slave_agent:read_rp_startofpacket -> router_003:sink_startofpacket
	wire          mux_ddr_0_altera_axi_slave_agent_read_rp_endofpacket;              // mux_ddr_0_altera_axi_slave_agent:read_rp_endofpacket -> router_003:sink_endofpacket
	wire          mux_ddr_0_altera_axi_slave_wr_burst_adapter_source0_valid;         // mux_ddr_0_altera_axi_slave_wr_burst_adapter:source0_valid -> mux_ddr_0_altera_axi_slave_agent:write_cp_valid
	wire  [122:0] mux_ddr_0_altera_axi_slave_wr_burst_adapter_source0_data;          // mux_ddr_0_altera_axi_slave_wr_burst_adapter:source0_data -> mux_ddr_0_altera_axi_slave_agent:write_cp_data
	wire          mux_ddr_0_altera_axi_slave_wr_burst_adapter_source0_ready;         // mux_ddr_0_altera_axi_slave_agent:write_cp_ready -> mux_ddr_0_altera_axi_slave_wr_burst_adapter:source0_ready
	wire    [1:0] mux_ddr_0_altera_axi_slave_wr_burst_adapter_source0_channel;       // mux_ddr_0_altera_axi_slave_wr_burst_adapter:source0_channel -> mux_ddr_0_altera_axi_slave_agent:write_cp_channel
	wire          mux_ddr_0_altera_axi_slave_wr_burst_adapter_source0_startofpacket; // mux_ddr_0_altera_axi_slave_wr_burst_adapter:source0_startofpacket -> mux_ddr_0_altera_axi_slave_agent:write_cp_startofpacket
	wire          mux_ddr_0_altera_axi_slave_wr_burst_adapter_source0_endofpacket;   // mux_ddr_0_altera_axi_slave_wr_burst_adapter:source0_endofpacket -> mux_ddr_0_altera_axi_slave_agent:write_cp_endofpacket
	wire          mux_ddr_0_altera_axi_slave_rd_burst_adapter_source0_valid;         // mux_ddr_0_altera_axi_slave_rd_burst_adapter:source0_valid -> mux_ddr_0_altera_axi_slave_agent:read_cp_valid
	wire  [122:0] mux_ddr_0_altera_axi_slave_rd_burst_adapter_source0_data;          // mux_ddr_0_altera_axi_slave_rd_burst_adapter:source0_data -> mux_ddr_0_altera_axi_slave_agent:read_cp_data
	wire          mux_ddr_0_altera_axi_slave_rd_burst_adapter_source0_ready;         // mux_ddr_0_altera_axi_slave_agent:read_cp_ready -> mux_ddr_0_altera_axi_slave_rd_burst_adapter:source0_ready
	wire    [1:0] mux_ddr_0_altera_axi_slave_rd_burst_adapter_source0_channel;       // mux_ddr_0_altera_axi_slave_rd_burst_adapter:source0_channel -> mux_ddr_0_altera_axi_slave_agent:read_cp_channel
	wire          mux_ddr_0_altera_axi_slave_rd_burst_adapter_source0_startofpacket; // mux_ddr_0_altera_axi_slave_rd_burst_adapter:source0_startofpacket -> mux_ddr_0_altera_axi_slave_agent:read_cp_startofpacket
	wire          mux_ddr_0_altera_axi_slave_rd_burst_adapter_source0_endofpacket;   // mux_ddr_0_altera_axi_slave_rd_burst_adapter:source0_endofpacket -> mux_ddr_0_altera_axi_slave_agent:read_cp_endofpacket
	wire          router_002_src_valid;                                              // router_002:src_valid -> mux_ddr_0_altera_axi_slave_wr_rsp_width_adapter:in_valid
	wire  [122:0] router_002_src_data;                                               // router_002:src_data -> mux_ddr_0_altera_axi_slave_wr_rsp_width_adapter:in_data
	wire          router_002_src_ready;                                              // mux_ddr_0_altera_axi_slave_wr_rsp_width_adapter:in_ready -> router_002:src_ready
	wire    [1:0] router_002_src_channel;                                            // router_002:src_channel -> mux_ddr_0_altera_axi_slave_wr_rsp_width_adapter:in_channel
	wire          router_002_src_startofpacket;                                      // router_002:src_startofpacket -> mux_ddr_0_altera_axi_slave_wr_rsp_width_adapter:in_startofpacket
	wire          router_002_src_endofpacket;                                        // router_002:src_endofpacket -> mux_ddr_0_altera_axi_slave_wr_rsp_width_adapter:in_endofpacket
	wire          mux_ddr_0_altera_axi_slave_wr_rsp_width_adapter_src_valid;         // mux_ddr_0_altera_axi_slave_wr_rsp_width_adapter:out_valid -> rsp_demux:sink_valid
	wire  [230:0] mux_ddr_0_altera_axi_slave_wr_rsp_width_adapter_src_data;          // mux_ddr_0_altera_axi_slave_wr_rsp_width_adapter:out_data -> rsp_demux:sink_data
	wire          mux_ddr_0_altera_axi_slave_wr_rsp_width_adapter_src_ready;         // rsp_demux:sink_ready -> mux_ddr_0_altera_axi_slave_wr_rsp_width_adapter:out_ready
	wire    [1:0] mux_ddr_0_altera_axi_slave_wr_rsp_width_adapter_src_channel;       // mux_ddr_0_altera_axi_slave_wr_rsp_width_adapter:out_channel -> rsp_demux:sink_channel
	wire          mux_ddr_0_altera_axi_slave_wr_rsp_width_adapter_src_startofpacket; // mux_ddr_0_altera_axi_slave_wr_rsp_width_adapter:out_startofpacket -> rsp_demux:sink_startofpacket
	wire          mux_ddr_0_altera_axi_slave_wr_rsp_width_adapter_src_endofpacket;   // mux_ddr_0_altera_axi_slave_wr_rsp_width_adapter:out_endofpacket -> rsp_demux:sink_endofpacket
	wire          router_003_src_valid;                                              // router_003:src_valid -> mux_ddr_0_altera_axi_slave_rd_rsp_width_adapter:in_valid
	wire  [122:0] router_003_src_data;                                               // router_003:src_data -> mux_ddr_0_altera_axi_slave_rd_rsp_width_adapter:in_data
	wire          router_003_src_ready;                                              // mux_ddr_0_altera_axi_slave_rd_rsp_width_adapter:in_ready -> router_003:src_ready
	wire    [1:0] router_003_src_channel;                                            // router_003:src_channel -> mux_ddr_0_altera_axi_slave_rd_rsp_width_adapter:in_channel
	wire          router_003_src_startofpacket;                                      // router_003:src_startofpacket -> mux_ddr_0_altera_axi_slave_rd_rsp_width_adapter:in_startofpacket
	wire          router_003_src_endofpacket;                                        // router_003:src_endofpacket -> mux_ddr_0_altera_axi_slave_rd_rsp_width_adapter:in_endofpacket
	wire          mux_ddr_0_altera_axi_slave_rd_rsp_width_adapter_src_valid;         // mux_ddr_0_altera_axi_slave_rd_rsp_width_adapter:out_valid -> rsp_demux_001:sink_valid
	wire  [230:0] mux_ddr_0_altera_axi_slave_rd_rsp_width_adapter_src_data;          // mux_ddr_0_altera_axi_slave_rd_rsp_width_adapter:out_data -> rsp_demux_001:sink_data
	wire          mux_ddr_0_altera_axi_slave_rd_rsp_width_adapter_src_ready;         // rsp_demux_001:sink_ready -> mux_ddr_0_altera_axi_slave_rd_rsp_width_adapter:out_ready
	wire    [1:0] mux_ddr_0_altera_axi_slave_rd_rsp_width_adapter_src_channel;       // mux_ddr_0_altera_axi_slave_rd_rsp_width_adapter:out_channel -> rsp_demux_001:sink_channel
	wire          mux_ddr_0_altera_axi_slave_rd_rsp_width_adapter_src_startofpacket; // mux_ddr_0_altera_axi_slave_rd_rsp_width_adapter:out_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          mux_ddr_0_altera_axi_slave_rd_rsp_width_adapter_src_endofpacket;   // mux_ddr_0_altera_axi_slave_rd_rsp_width_adapter:out_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          cmd_mux_src_valid;                                                 // cmd_mux:src_valid -> mux_ddr_0_altera_axi_slave_wr_cmd_width_adapter:in_valid
	wire  [230:0] cmd_mux_src_data;                                                  // cmd_mux:src_data -> mux_ddr_0_altera_axi_slave_wr_cmd_width_adapter:in_data
	wire          cmd_mux_src_ready;                                                 // mux_ddr_0_altera_axi_slave_wr_cmd_width_adapter:in_ready -> cmd_mux:src_ready
	wire    [1:0] cmd_mux_src_channel;                                               // cmd_mux:src_channel -> mux_ddr_0_altera_axi_slave_wr_cmd_width_adapter:in_channel
	wire          cmd_mux_src_startofpacket;                                         // cmd_mux:src_startofpacket -> mux_ddr_0_altera_axi_slave_wr_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_src_endofpacket;                                           // cmd_mux:src_endofpacket -> mux_ddr_0_altera_axi_slave_wr_cmd_width_adapter:in_endofpacket
	wire          mux_ddr_0_altera_axi_slave_wr_cmd_width_adapter_src_valid;         // mux_ddr_0_altera_axi_slave_wr_cmd_width_adapter:out_valid -> mux_ddr_0_altera_axi_slave_wr_burst_adapter:sink0_valid
	wire  [122:0] mux_ddr_0_altera_axi_slave_wr_cmd_width_adapter_src_data;          // mux_ddr_0_altera_axi_slave_wr_cmd_width_adapter:out_data -> mux_ddr_0_altera_axi_slave_wr_burst_adapter:sink0_data
	wire          mux_ddr_0_altera_axi_slave_wr_cmd_width_adapter_src_ready;         // mux_ddr_0_altera_axi_slave_wr_burst_adapter:sink0_ready -> mux_ddr_0_altera_axi_slave_wr_cmd_width_adapter:out_ready
	wire    [1:0] mux_ddr_0_altera_axi_slave_wr_cmd_width_adapter_src_channel;       // mux_ddr_0_altera_axi_slave_wr_cmd_width_adapter:out_channel -> mux_ddr_0_altera_axi_slave_wr_burst_adapter:sink0_channel
	wire          mux_ddr_0_altera_axi_slave_wr_cmd_width_adapter_src_startofpacket; // mux_ddr_0_altera_axi_slave_wr_cmd_width_adapter:out_startofpacket -> mux_ddr_0_altera_axi_slave_wr_burst_adapter:sink0_startofpacket
	wire          mux_ddr_0_altera_axi_slave_wr_cmd_width_adapter_src_endofpacket;   // mux_ddr_0_altera_axi_slave_wr_cmd_width_adapter:out_endofpacket -> mux_ddr_0_altera_axi_slave_wr_burst_adapter:sink0_endofpacket
	wire          cmd_mux_001_src_valid;                                             // cmd_mux_001:src_valid -> mux_ddr_0_altera_axi_slave_rd_cmd_width_adapter:in_valid
	wire  [230:0] cmd_mux_001_src_data;                                              // cmd_mux_001:src_data -> mux_ddr_0_altera_axi_slave_rd_cmd_width_adapter:in_data
	wire          cmd_mux_001_src_ready;                                             // mux_ddr_0_altera_axi_slave_rd_cmd_width_adapter:in_ready -> cmd_mux_001:src_ready
	wire    [1:0] cmd_mux_001_src_channel;                                           // cmd_mux_001:src_channel -> mux_ddr_0_altera_axi_slave_rd_cmd_width_adapter:in_channel
	wire          cmd_mux_001_src_startofpacket;                                     // cmd_mux_001:src_startofpacket -> mux_ddr_0_altera_axi_slave_rd_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                       // cmd_mux_001:src_endofpacket -> mux_ddr_0_altera_axi_slave_rd_cmd_width_adapter:in_endofpacket
	wire          mux_ddr_0_altera_axi_slave_rd_cmd_width_adapter_src_valid;         // mux_ddr_0_altera_axi_slave_rd_cmd_width_adapter:out_valid -> mux_ddr_0_altera_axi_slave_rd_burst_adapter:sink0_valid
	wire  [122:0] mux_ddr_0_altera_axi_slave_rd_cmd_width_adapter_src_data;          // mux_ddr_0_altera_axi_slave_rd_cmd_width_adapter:out_data -> mux_ddr_0_altera_axi_slave_rd_burst_adapter:sink0_data
	wire          mux_ddr_0_altera_axi_slave_rd_cmd_width_adapter_src_ready;         // mux_ddr_0_altera_axi_slave_rd_burst_adapter:sink0_ready -> mux_ddr_0_altera_axi_slave_rd_cmd_width_adapter:out_ready
	wire    [1:0] mux_ddr_0_altera_axi_slave_rd_cmd_width_adapter_src_channel;       // mux_ddr_0_altera_axi_slave_rd_cmd_width_adapter:out_channel -> mux_ddr_0_altera_axi_slave_rd_burst_adapter:sink0_channel
	wire          mux_ddr_0_altera_axi_slave_rd_cmd_width_adapter_src_startofpacket; // mux_ddr_0_altera_axi_slave_rd_cmd_width_adapter:out_startofpacket -> mux_ddr_0_altera_axi_slave_rd_burst_adapter:sink0_startofpacket
	wire          mux_ddr_0_altera_axi_slave_rd_cmd_width_adapter_src_endofpacket;   // mux_ddr_0_altera_axi_slave_rd_cmd_width_adapter:out_endofpacket -> mux_ddr_0_altera_axi_slave_rd_burst_adapter:sink0_endofpacket
	wire          cmd_demux_src0_valid;                                              // cmd_demux:src0_valid -> crosser:in_valid
	wire  [230:0] cmd_demux_src0_data;                                               // cmd_demux:src0_data -> crosser:in_data
	wire          cmd_demux_src0_ready;                                              // crosser:in_ready -> cmd_demux:src0_ready
	wire    [1:0] cmd_demux_src0_channel;                                            // cmd_demux:src0_channel -> crosser:in_channel
	wire          cmd_demux_src0_startofpacket;                                      // cmd_demux:src0_startofpacket -> crosser:in_startofpacket
	wire          cmd_demux_src0_endofpacket;                                        // cmd_demux:src0_endofpacket -> crosser:in_endofpacket
	wire          crosser_out_valid;                                                 // crosser:out_valid -> cmd_mux:sink0_valid
	wire  [230:0] crosser_out_data;                                                  // crosser:out_data -> cmd_mux:sink0_data
	wire          crosser_out_ready;                                                 // cmd_mux:sink0_ready -> crosser:out_ready
	wire    [1:0] crosser_out_channel;                                               // crosser:out_channel -> cmd_mux:sink0_channel
	wire          crosser_out_startofpacket;                                         // crosser:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire          crosser_out_endofpacket;                                           // crosser:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                          // cmd_demux_001:src0_valid -> crosser_001:in_valid
	wire  [230:0] cmd_demux_001_src0_data;                                           // cmd_demux_001:src0_data -> crosser_001:in_data
	wire          cmd_demux_001_src0_ready;                                          // crosser_001:in_ready -> cmd_demux_001:src0_ready
	wire    [1:0] cmd_demux_001_src0_channel;                                        // cmd_demux_001:src0_channel -> crosser_001:in_channel
	wire          cmd_demux_001_src0_startofpacket;                                  // cmd_demux_001:src0_startofpacket -> crosser_001:in_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                    // cmd_demux_001:src0_endofpacket -> crosser_001:in_endofpacket
	wire          crosser_001_out_valid;                                             // crosser_001:out_valid -> cmd_mux_001:sink0_valid
	wire  [230:0] crosser_001_out_data;                                              // crosser_001:out_data -> cmd_mux_001:sink0_data
	wire          crosser_001_out_ready;                                             // cmd_mux_001:sink0_ready -> crosser_001:out_ready
	wire    [1:0] crosser_001_out_channel;                                           // crosser_001:out_channel -> cmd_mux_001:sink0_channel
	wire          crosser_001_out_startofpacket;                                     // crosser_001:out_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          crosser_001_out_endofpacket;                                       // crosser_001:out_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                              // rsp_demux:src0_valid -> crosser_002:in_valid
	wire  [230:0] rsp_demux_src0_data;                                               // rsp_demux:src0_data -> crosser_002:in_data
	wire          rsp_demux_src0_ready;                                              // crosser_002:in_ready -> rsp_demux:src0_ready
	wire    [1:0] rsp_demux_src0_channel;                                            // rsp_demux:src0_channel -> crosser_002:in_channel
	wire          rsp_demux_src0_startofpacket;                                      // rsp_demux:src0_startofpacket -> crosser_002:in_startofpacket
	wire          rsp_demux_src0_endofpacket;                                        // rsp_demux:src0_endofpacket -> crosser_002:in_endofpacket
	wire          crosser_002_out_valid;                                             // crosser_002:out_valid -> rsp_mux:sink0_valid
	wire  [230:0] crosser_002_out_data;                                              // crosser_002:out_data -> rsp_mux:sink0_data
	wire          crosser_002_out_ready;                                             // rsp_mux:sink0_ready -> crosser_002:out_ready
	wire    [1:0] crosser_002_out_channel;                                           // crosser_002:out_channel -> rsp_mux:sink0_channel
	wire          crosser_002_out_startofpacket;                                     // crosser_002:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire          crosser_002_out_endofpacket;                                       // crosser_002:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                          // rsp_demux_001:src0_valid -> crosser_003:in_valid
	wire  [230:0] rsp_demux_001_src0_data;                                           // rsp_demux_001:src0_data -> crosser_003:in_data
	wire          rsp_demux_001_src0_ready;                                          // crosser_003:in_ready -> rsp_demux_001:src0_ready
	wire    [1:0] rsp_demux_001_src0_channel;                                        // rsp_demux_001:src0_channel -> crosser_003:in_channel
	wire          rsp_demux_001_src0_startofpacket;                                  // rsp_demux_001:src0_startofpacket -> crosser_003:in_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                    // rsp_demux_001:src0_endofpacket -> crosser_003:in_endofpacket
	wire          crosser_003_out_valid;                                             // crosser_003:out_valid -> rsp_mux_001:sink0_valid
	wire  [230:0] crosser_003_out_data;                                              // crosser_003:out_data -> rsp_mux_001:sink0_data
	wire          crosser_003_out_ready;                                             // rsp_mux_001:sink0_ready -> crosser_003:out_ready
	wire    [1:0] crosser_003_out_channel;                                           // crosser_003:out_channel -> rsp_mux_001:sink0_channel
	wire          crosser_003_out_startofpacket;                                     // crosser_003:out_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          crosser_003_out_endofpacket;                                       // crosser_003:out_endofpacket -> rsp_mux_001:sink0_endofpacket

	altera_merlin_axi_master_ni #(
		.ID_WIDTH                  (4),
		.ADDR_WIDTH                (32),
		.RDATA_WIDTH               (128),
		.WDATA_WIDTH               (128),
		.ADDR_USER_WIDTH           (5),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (4),
		.AXI_LOCK_WIDTH            (2),
		.AXI_VERSION               ("AXI3"),
		.WRITE_ISSUING_CAPABILITY  (8),
		.READ_ISSUING_CAPABILITY   (8),
		.PKT_BEGIN_BURST           (211),
		.PKT_CACHE_H               (225),
		.PKT_CACHE_L               (222),
		.PKT_ADDR_SIDEBAND_H       (209),
		.PKT_ADDR_SIDEBAND_L       (205),
		.PKT_PROTECTION_H          (221),
		.PKT_PROTECTION_L          (219),
		.PKT_BURST_SIZE_H          (202),
		.PKT_BURST_SIZE_L          (200),
		.PKT_BURST_TYPE_H          (204),
		.PKT_BURST_TYPE_L          (203),
		.PKT_RESPONSE_STATUS_L     (226),
		.PKT_RESPONSE_STATUS_H     (227),
		.PKT_BURSTWRAP_H           (199),
		.PKT_BURSTWRAP_L           (191),
		.PKT_BYTE_CNT_H            (190),
		.PKT_BYTE_CNT_L            (182),
		.PKT_ADDR_H                (175),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_EXCLUSIVE       (181),
		.PKT_TRANS_LOCK            (180),
		.PKT_TRANS_COMPRESSED_READ (176),
		.PKT_TRANS_POSTED          (177),
		.PKT_TRANS_WRITE           (178),
		.PKT_TRANS_READ            (179),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (213),
		.PKT_SRC_ID_L              (213),
		.PKT_DEST_ID_H             (214),
		.PKT_DEST_ID_L             (214),
		.PKT_THREAD_ID_H           (218),
		.PKT_THREAD_ID_L           (215),
		.PKT_QOS_L                 (212),
		.PKT_QOS_H                 (212),
		.PKT_ORI_BURST_SIZE_L      (228),
		.PKT_ORI_BURST_SIZE_H      (230),
		.PKT_DATA_SIDEBAND_H       (210),
		.PKT_DATA_SIDEBAND_L       (210),
		.ST_DATA_W                 (231),
		.ST_CHANNEL_W              (2),
		.ID                        (0)
	) arria10_hps_0_h2f_axi_master_agent (
		.aclk                   (axi_clk_bridge_out_clk_clk),                                //              clk.clk
		.aresetn                (~arria10_hps_0_h2f_axi_reset_reset_bridge_in_reset_reset),  //        clk_reset.reset_n
		.write_cp_valid         (arria10_hps_0_h2f_axi_master_agent_write_cp_valid),         //         write_cp.valid
		.write_cp_data          (arria10_hps_0_h2f_axi_master_agent_write_cp_data),          //                 .data
		.write_cp_startofpacket (arria10_hps_0_h2f_axi_master_agent_write_cp_startofpacket), //                 .startofpacket
		.write_cp_endofpacket   (arria10_hps_0_h2f_axi_master_agent_write_cp_endofpacket),   //                 .endofpacket
		.write_cp_ready         (arria10_hps_0_h2f_axi_master_agent_write_cp_ready),         //                 .ready
		.write_rp_valid         (rsp_mux_src_valid),                                         //         write_rp.valid
		.write_rp_data          (rsp_mux_src_data),                                          //                 .data
		.write_rp_channel       (rsp_mux_src_channel),                                       //                 .channel
		.write_rp_startofpacket (rsp_mux_src_startofpacket),                                 //                 .startofpacket
		.write_rp_endofpacket   (rsp_mux_src_endofpacket),                                   //                 .endofpacket
		.write_rp_ready         (rsp_mux_src_ready),                                         //                 .ready
		.read_cp_valid          (arria10_hps_0_h2f_axi_master_agent_read_cp_valid),          //          read_cp.valid
		.read_cp_data           (arria10_hps_0_h2f_axi_master_agent_read_cp_data),           //                 .data
		.read_cp_startofpacket  (arria10_hps_0_h2f_axi_master_agent_read_cp_startofpacket),  //                 .startofpacket
		.read_cp_endofpacket    (arria10_hps_0_h2f_axi_master_agent_read_cp_endofpacket),    //                 .endofpacket
		.read_cp_ready          (arria10_hps_0_h2f_axi_master_agent_read_cp_ready),          //                 .ready
		.read_rp_valid          (rsp_mux_001_src_valid),                                     //          read_rp.valid
		.read_rp_data           (rsp_mux_001_src_data),                                      //                 .data
		.read_rp_channel        (rsp_mux_001_src_channel),                                   //                 .channel
		.read_rp_startofpacket  (rsp_mux_001_src_startofpacket),                             //                 .startofpacket
		.read_rp_endofpacket    (rsp_mux_001_src_endofpacket),                               //                 .endofpacket
		.read_rp_ready          (rsp_mux_001_src_ready),                                     //                 .ready
		.awid                   (arria10_hps_0_h2f_axi_master_awid),                         // altera_axi_slave.awid
		.awaddr                 (arria10_hps_0_h2f_axi_master_awaddr),                       //                 .awaddr
		.awlen                  (arria10_hps_0_h2f_axi_master_awlen),                        //                 .awlen
		.awsize                 (arria10_hps_0_h2f_axi_master_awsize),                       //                 .awsize
		.awburst                (arria10_hps_0_h2f_axi_master_awburst),                      //                 .awburst
		.awlock                 (arria10_hps_0_h2f_axi_master_awlock),                       //                 .awlock
		.awcache                (arria10_hps_0_h2f_axi_master_awcache),                      //                 .awcache
		.awprot                 (arria10_hps_0_h2f_axi_master_awprot),                       //                 .awprot
		.awuser                 (arria10_hps_0_h2f_axi_master_awuser),                       //                 .awuser
		.awvalid                (arria10_hps_0_h2f_axi_master_awvalid),                      //                 .awvalid
		.awready                (arria10_hps_0_h2f_axi_master_awready),                      //                 .awready
		.wid                    (arria10_hps_0_h2f_axi_master_wid),                          //                 .wid
		.wdata                  (arria10_hps_0_h2f_axi_master_wdata),                        //                 .wdata
		.wstrb                  (arria10_hps_0_h2f_axi_master_wstrb),                        //                 .wstrb
		.wlast                  (arria10_hps_0_h2f_axi_master_wlast),                        //                 .wlast
		.wvalid                 (arria10_hps_0_h2f_axi_master_wvalid),                       //                 .wvalid
		.wready                 (arria10_hps_0_h2f_axi_master_wready),                       //                 .wready
		.bid                    (arria10_hps_0_h2f_axi_master_bid),                          //                 .bid
		.bresp                  (arria10_hps_0_h2f_axi_master_bresp),                        //                 .bresp
		.bvalid                 (arria10_hps_0_h2f_axi_master_bvalid),                       //                 .bvalid
		.bready                 (arria10_hps_0_h2f_axi_master_bready),                       //                 .bready
		.arid                   (arria10_hps_0_h2f_axi_master_arid),                         //                 .arid
		.araddr                 (arria10_hps_0_h2f_axi_master_araddr),                       //                 .araddr
		.arlen                  (arria10_hps_0_h2f_axi_master_arlen),                        //                 .arlen
		.arsize                 (arria10_hps_0_h2f_axi_master_arsize),                       //                 .arsize
		.arburst                (arria10_hps_0_h2f_axi_master_arburst),                      //                 .arburst
		.arlock                 (arria10_hps_0_h2f_axi_master_arlock),                       //                 .arlock
		.arcache                (arria10_hps_0_h2f_axi_master_arcache),                      //                 .arcache
		.arprot                 (arria10_hps_0_h2f_axi_master_arprot),                       //                 .arprot
		.aruser                 (arria10_hps_0_h2f_axi_master_aruser),                       //                 .aruser
		.arvalid                (arria10_hps_0_h2f_axi_master_arvalid),                      //                 .arvalid
		.arready                (arria10_hps_0_h2f_axi_master_arready),                      //                 .arready
		.rid                    (arria10_hps_0_h2f_axi_master_rid),                          //                 .rid
		.rdata                  (arria10_hps_0_h2f_axi_master_rdata),                        //                 .rdata
		.rresp                  (arria10_hps_0_h2f_axi_master_rresp),                        //                 .rresp
		.rlast                  (arria10_hps_0_h2f_axi_master_rlast),                        //                 .rlast
		.rvalid                 (arria10_hps_0_h2f_axi_master_rvalid),                       //                 .rvalid
		.rready                 (arria10_hps_0_h2f_axi_master_rready),                       //                 .rready
		.awqos                  (4'b0000),                                                   //      (terminated)
		.arqos                  (4'b0000),                                                   //      (terminated)
		.awregion               (4'b0000),                                                   //      (terminated)
		.arregion               (4'b0000),                                                   //      (terminated)
		.wuser                  (1'b0),                                                      //      (terminated)
		.ruser                  (),                                                          //      (terminated)
		.buser                  ()                                                           //      (terminated)
	);

	altera_merlin_axi_slave_ni #(
		.PKT_QOS_H                   (104),
		.PKT_QOS_L                   (104),
		.PKT_THREAD_ID_H             (110),
		.PKT_THREAD_ID_L             (107),
		.PKT_RESPONSE_STATUS_H       (119),
		.PKT_RESPONSE_STATUS_L       (118),
		.PKT_BEGIN_BURST             (103),
		.PKT_CACHE_H                 (117),
		.PKT_CACHE_L                 (114),
		.PKT_DATA_SIDEBAND_H         (102),
		.PKT_DATA_SIDEBAND_L         (102),
		.PKT_ADDR_SIDEBAND_H         (101),
		.PKT_ADDR_SIDEBAND_L         (97),
		.PKT_BURST_TYPE_H            (96),
		.PKT_BURST_TYPE_L            (95),
		.PKT_PROTECTION_H            (113),
		.PKT_PROTECTION_L            (111),
		.PKT_BURST_SIZE_H            (94),
		.PKT_BURST_SIZE_L            (92),
		.PKT_BURSTWRAP_H             (91),
		.PKT_BURSTWRAP_L             (83),
		.PKT_BYTE_CNT_H              (82),
		.PKT_BYTE_CNT_L              (74),
		.PKT_ADDR_H                  (67),
		.PKT_ADDR_L                  (36),
		.PKT_TRANS_EXCLUSIVE         (73),
		.PKT_TRANS_LOCK              (72),
		.PKT_TRANS_COMPRESSED_READ   (68),
		.PKT_TRANS_POSTED            (69),
		.PKT_TRANS_WRITE             (70),
		.PKT_TRANS_READ              (71),
		.PKT_DATA_H                  (31),
		.PKT_DATA_L                  (0),
		.PKT_BYTEEN_H                (35),
		.PKT_BYTEEN_L                (32),
		.PKT_SRC_ID_H                (105),
		.PKT_SRC_ID_L                (105),
		.PKT_DEST_ID_H               (106),
		.PKT_DEST_ID_L               (106),
		.PKT_ORI_BURST_SIZE_L        (120),
		.PKT_ORI_BURST_SIZE_H        (122),
		.ADDR_USER_WIDTH             (5),
		.DATA_USER_WIDTH             (1),
		.ST_DATA_W                   (123),
		.ADDR_WIDTH                  (29),
		.RDATA_WIDTH                 (32),
		.WDATA_WIDTH                 (32),
		.ST_CHANNEL_W                (2),
		.AXI_SLAVE_ID_W              (4),
		.PASS_ID_TO_SLAVE            (1),
		.AXI_VERSION                 ("AXI3"),
		.WRITE_ACCEPTANCE_CAPABILITY (1),
		.READ_ACCEPTANCE_CAPABILITY  (1)
	) mux_ddr_0_altera_axi_slave_agent (
		.aclk                   (clk_1_clk_clk),                                                     //        clock_sink.clk
		.aresetn                (~mux_ddr_0_reset_reset_bridge_in_reset_reset),                      //        reset_sink.reset_n
		.read_cp_valid          (mux_ddr_0_altera_axi_slave_rd_burst_adapter_source0_valid),         //           read_cp.valid
		.read_cp_ready          (mux_ddr_0_altera_axi_slave_rd_burst_adapter_source0_ready),         //                  .ready
		.read_cp_data           (mux_ddr_0_altera_axi_slave_rd_burst_adapter_source0_data),          //                  .data
		.read_cp_channel        (mux_ddr_0_altera_axi_slave_rd_burst_adapter_source0_channel),       //                  .channel
		.read_cp_startofpacket  (mux_ddr_0_altera_axi_slave_rd_burst_adapter_source0_startofpacket), //                  .startofpacket
		.read_cp_endofpacket    (mux_ddr_0_altera_axi_slave_rd_burst_adapter_source0_endofpacket),   //                  .endofpacket
		.write_cp_ready         (mux_ddr_0_altera_axi_slave_wr_burst_adapter_source0_ready),         //          write_cp.ready
		.write_cp_valid         (mux_ddr_0_altera_axi_slave_wr_burst_adapter_source0_valid),         //                  .valid
		.write_cp_data          (mux_ddr_0_altera_axi_slave_wr_burst_adapter_source0_data),          //                  .data
		.write_cp_channel       (mux_ddr_0_altera_axi_slave_wr_burst_adapter_source0_channel),       //                  .channel
		.write_cp_startofpacket (mux_ddr_0_altera_axi_slave_wr_burst_adapter_source0_startofpacket), //                  .startofpacket
		.write_cp_endofpacket   (mux_ddr_0_altera_axi_slave_wr_burst_adapter_source0_endofpacket),   //                  .endofpacket
		.read_rp_ready          (mux_ddr_0_altera_axi_slave_agent_read_rp_ready),                    //           read_rp.ready
		.read_rp_valid          (mux_ddr_0_altera_axi_slave_agent_read_rp_valid),                    //                  .valid
		.read_rp_data           (mux_ddr_0_altera_axi_slave_agent_read_rp_data),                     //                  .data
		.read_rp_startofpacket  (mux_ddr_0_altera_axi_slave_agent_read_rp_startofpacket),            //                  .startofpacket
		.read_rp_endofpacket    (mux_ddr_0_altera_axi_slave_agent_read_rp_endofpacket),              //                  .endofpacket
		.write_rp_ready         (mux_ddr_0_altera_axi_slave_agent_write_rp_ready),                   //          write_rp.ready
		.write_rp_valid         (mux_ddr_0_altera_axi_slave_agent_write_rp_valid),                   //                  .valid
		.write_rp_data          (mux_ddr_0_altera_axi_slave_agent_write_rp_data),                    //                  .data
		.write_rp_startofpacket (mux_ddr_0_altera_axi_slave_agent_write_rp_startofpacket),           //                  .startofpacket
		.write_rp_endofpacket   (mux_ddr_0_altera_axi_slave_agent_write_rp_endofpacket),             //                  .endofpacket
		.awid                   (mux_ddr_0_altera_axi_slave_awid),                                   // altera_axi_master.awid
		.awaddr                 (mux_ddr_0_altera_axi_slave_awaddr),                                 //                  .awaddr
		.awlen                  (mux_ddr_0_altera_axi_slave_awlen),                                  //                  .awlen
		.awsize                 (mux_ddr_0_altera_axi_slave_awsize),                                 //                  .awsize
		.awburst                (mux_ddr_0_altera_axi_slave_awburst),                                //                  .awburst
		.awlock                 (mux_ddr_0_altera_axi_slave_awlock),                                 //                  .awlock
		.awcache                (mux_ddr_0_altera_axi_slave_awcache),                                //                  .awcache
		.awprot                 (mux_ddr_0_altera_axi_slave_awprot),                                 //                  .awprot
		.awuser                 (mux_ddr_0_altera_axi_slave_awuser),                                 //                  .awuser
		.awvalid                (mux_ddr_0_altera_axi_slave_awvalid),                                //                  .awvalid
		.awready                (mux_ddr_0_altera_axi_slave_awready),                                //                  .awready
		.wid                    (mux_ddr_0_altera_axi_slave_wid),                                    //                  .wid
		.wdata                  (mux_ddr_0_altera_axi_slave_wdata),                                  //                  .wdata
		.wstrb                  (mux_ddr_0_altera_axi_slave_wstrb),                                  //                  .wstrb
		.wlast                  (mux_ddr_0_altera_axi_slave_wlast),                                  //                  .wlast
		.wvalid                 (mux_ddr_0_altera_axi_slave_wvalid),                                 //                  .wvalid
		.wready                 (mux_ddr_0_altera_axi_slave_wready),                                 //                  .wready
		.bid                    (mux_ddr_0_altera_axi_slave_bid),                                    //                  .bid
		.bresp                  (mux_ddr_0_altera_axi_slave_bresp),                                  //                  .bresp
		.bvalid                 (mux_ddr_0_altera_axi_slave_bvalid),                                 //                  .bvalid
		.bready                 (mux_ddr_0_altera_axi_slave_bready),                                 //                  .bready
		.arid                   (mux_ddr_0_altera_axi_slave_arid),                                   //                  .arid
		.araddr                 (mux_ddr_0_altera_axi_slave_araddr),                                 //                  .araddr
		.arlen                  (mux_ddr_0_altera_axi_slave_arlen),                                  //                  .arlen
		.arsize                 (mux_ddr_0_altera_axi_slave_arsize),                                 //                  .arsize
		.arburst                (mux_ddr_0_altera_axi_slave_arburst),                                //                  .arburst
		.arlock                 (mux_ddr_0_altera_axi_slave_arlock),                                 //                  .arlock
		.arcache                (mux_ddr_0_altera_axi_slave_arcache),                                //                  .arcache
		.arprot                 (mux_ddr_0_altera_axi_slave_arprot),                                 //                  .arprot
		.aruser                 (mux_ddr_0_altera_axi_slave_aruser),                                 //                  .aruser
		.arvalid                (mux_ddr_0_altera_axi_slave_arvalid),                                //                  .arvalid
		.arready                (mux_ddr_0_altera_axi_slave_arready),                                //                  .arready
		.rid                    (mux_ddr_0_altera_axi_slave_rid),                                    //                  .rid
		.rdata                  (mux_ddr_0_altera_axi_slave_rdata),                                  //                  .rdata
		.rresp                  (mux_ddr_0_altera_axi_slave_rresp),                                  //                  .rresp
		.rlast                  (mux_ddr_0_altera_axi_slave_rlast),                                  //                  .rlast
		.rvalid                 (mux_ddr_0_altera_axi_slave_rvalid),                                 //                  .rvalid
		.rready                 (mux_ddr_0_altera_axi_slave_rready)                                  //                  .rready
	);

	som_system_altera_merlin_router_180_iv666ga router (
		.sink_ready         (arria10_hps_0_h2f_axi_master_agent_write_cp_ready),         //      sink.ready
		.sink_valid         (arria10_hps_0_h2f_axi_master_agent_write_cp_valid),         //          .valid
		.sink_data          (arria10_hps_0_h2f_axi_master_agent_write_cp_data),          //          .data
		.sink_startofpacket (arria10_hps_0_h2f_axi_master_agent_write_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (arria10_hps_0_h2f_axi_master_agent_write_cp_endofpacket),   //          .endofpacket
		.clk                (axi_clk_bridge_out_clk_clk),                                //       clk.clk
		.reset              (arria10_hps_0_h2f_axi_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.src_ready          (router_src_ready),                                          //       src.ready
		.src_valid          (router_src_valid),                                          //          .valid
		.src_data           (router_src_data),                                           //          .data
		.src_channel        (router_src_channel),                                        //          .channel
		.src_startofpacket  (router_src_startofpacket),                                  //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                     //          .endofpacket
	);

	som_system_altera_merlin_router_180_lxmadiq router_001 (
		.sink_ready         (arria10_hps_0_h2f_axi_master_agent_read_cp_ready),         //      sink.ready
		.sink_valid         (arria10_hps_0_h2f_axi_master_agent_read_cp_valid),         //          .valid
		.sink_data          (arria10_hps_0_h2f_axi_master_agent_read_cp_data),          //          .data
		.sink_startofpacket (arria10_hps_0_h2f_axi_master_agent_read_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (arria10_hps_0_h2f_axi_master_agent_read_cp_endofpacket),   //          .endofpacket
		.clk                (axi_clk_bridge_out_clk_clk),                               //       clk.clk
		.reset              (arria10_hps_0_h2f_axi_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_001_src_ready),                                     //       src.ready
		.src_valid          (router_001_src_valid),                                     //          .valid
		.src_data           (router_001_src_data),                                      //          .data
		.src_channel        (router_001_src_channel),                                   //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                             //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                //          .endofpacket
	);

	som_system_altera_merlin_router_180_dqbhvfa router_002 (
		.sink_ready         (mux_ddr_0_altera_axi_slave_agent_write_rp_ready),         //      sink.ready
		.sink_valid         (mux_ddr_0_altera_axi_slave_agent_write_rp_valid),         //          .valid
		.sink_data          (mux_ddr_0_altera_axi_slave_agent_write_rp_data),          //          .data
		.sink_startofpacket (mux_ddr_0_altera_axi_slave_agent_write_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (mux_ddr_0_altera_axi_slave_agent_write_rp_endofpacket),   //          .endofpacket
		.clk                (clk_1_clk_clk),                                           //       clk.clk
		.reset              (mux_ddr_0_reset_reset_bridge_in_reset_reset),             // clk_reset.reset
		.src_ready          (router_002_src_ready),                                    //       src.ready
		.src_valid          (router_002_src_valid),                                    //          .valid
		.src_data           (router_002_src_data),                                     //          .data
		.src_channel        (router_002_src_channel),                                  //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                               //          .endofpacket
	);

	som_system_altera_merlin_router_180_goyglzq router_003 (
		.sink_ready         (mux_ddr_0_altera_axi_slave_agent_read_rp_ready),         //      sink.ready
		.sink_valid         (mux_ddr_0_altera_axi_slave_agent_read_rp_valid),         //          .valid
		.sink_data          (mux_ddr_0_altera_axi_slave_agent_read_rp_data),          //          .data
		.sink_startofpacket (mux_ddr_0_altera_axi_slave_agent_read_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (mux_ddr_0_altera_axi_slave_agent_read_rp_endofpacket),   //          .endofpacket
		.clk                (clk_1_clk_clk),                                          //       clk.clk
		.reset              (mux_ddr_0_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.src_ready          (router_003_src_ready),                                   //       src.ready
		.src_valid          (router_003_src_valid),                                   //          .valid
		.src_data           (router_003_src_data),                                    //          .data
		.src_channel        (router_003_src_channel),                                 //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                           //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                              //          .endofpacket
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (103),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (1),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (1),
		.OUT_COMPLETE_WRAP         (1),
		.ST_DATA_W                 (123),
		.ST_CHANNEL_W              (2),
		.OUT_BYTE_CNT_H            (80),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (0),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) mux_ddr_0_altera_axi_slave_wr_burst_adapter (
		.clk                   (clk_1_clk_clk),                                                     //       cr0.clk
		.reset                 (mux_ddr_0_reset_reset_bridge_in_reset_reset),                       // cr0_reset.reset
		.sink0_valid           (mux_ddr_0_altera_axi_slave_wr_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (mux_ddr_0_altera_axi_slave_wr_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (mux_ddr_0_altera_axi_slave_wr_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (mux_ddr_0_altera_axi_slave_wr_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (mux_ddr_0_altera_axi_slave_wr_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (mux_ddr_0_altera_axi_slave_wr_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (mux_ddr_0_altera_axi_slave_wr_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (mux_ddr_0_altera_axi_slave_wr_burst_adapter_source0_data),          //          .data
		.source0_channel       (mux_ddr_0_altera_axi_slave_wr_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (mux_ddr_0_altera_axi_slave_wr_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (mux_ddr_0_altera_axi_slave_wr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (mux_ddr_0_altera_axi_slave_wr_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (103),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (1),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (1),
		.OUT_COMPLETE_WRAP         (1),
		.ST_DATA_W                 (123),
		.ST_CHANNEL_W              (2),
		.OUT_BYTE_CNT_H            (80),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (0),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) mux_ddr_0_altera_axi_slave_rd_burst_adapter (
		.clk                   (clk_1_clk_clk),                                                     //       cr0.clk
		.reset                 (mux_ddr_0_reset_reset_bridge_in_reset_reset),                       // cr0_reset.reset
		.sink0_valid           (mux_ddr_0_altera_axi_slave_rd_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (mux_ddr_0_altera_axi_slave_rd_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (mux_ddr_0_altera_axi_slave_rd_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (mux_ddr_0_altera_axi_slave_rd_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (mux_ddr_0_altera_axi_slave_rd_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (mux_ddr_0_altera_axi_slave_rd_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (mux_ddr_0_altera_axi_slave_rd_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (mux_ddr_0_altera_axi_slave_rd_burst_adapter_source0_data),          //          .data
		.source0_channel       (mux_ddr_0_altera_axi_slave_rd_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (mux_ddr_0_altera_axi_slave_rd_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (mux_ddr_0_altera_axi_slave_rd_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (mux_ddr_0_altera_axi_slave_rd_burst_adapter_source0_ready)          //          .ready
	);

	som_system_altera_merlin_demultiplexer_180_oh2yaqq cmd_demux (
		.clk                (axi_clk_bridge_out_clk_clk),                              //       clk.clk
		.reset              (arria10_hps_0_h2f_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_src_ready),                                        //      sink.ready
		.sink_channel       (router_src_channel),                                      //          .channel
		.sink_data          (router_src_data),                                         //          .data
		.sink_startofpacket (router_src_startofpacket),                                //          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                                  //          .endofpacket
		.sink_valid         (router_src_valid),                                        //          .valid
		.src0_ready         (cmd_demux_src0_ready),                                    //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                    //          .valid
		.src0_data          (cmd_demux_src0_data),                                     //          .data
		.src0_channel       (cmd_demux_src0_channel),                                  //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                            //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)                               //          .endofpacket
	);

	som_system_altera_merlin_demultiplexer_180_oh2yaqq cmd_demux_001 (
		.clk                (axi_clk_bridge_out_clk_clk),                              //       clk.clk
		.reset              (arria10_hps_0_h2f_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                                    //      sink.ready
		.sink_channel       (router_001_src_channel),                                  //          .channel
		.sink_data          (router_001_src_data),                                     //          .data
		.sink_startofpacket (router_001_src_startofpacket),                            //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                              //          .endofpacket
		.sink_valid         (router_001_src_valid),                                    //          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                                //      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                                //          .valid
		.src0_data          (cmd_demux_001_src0_data),                                 //          .data
		.src0_channel       (cmd_demux_001_src0_channel),                              //          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                        //          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket)                           //          .endofpacket
	);

	som_system_altera_merlin_multiplexer_180_zd5hm5y cmd_mux (
		.clk                 (clk_1_clk_clk),                               //       clk.clk
		.reset               (mux_ddr_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                           //       src.ready
		.src_valid           (cmd_mux_src_valid),                           //          .valid
		.src_data            (cmd_mux_src_data),                            //          .data
		.src_channel         (cmd_mux_src_channel),                         //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                   //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                     //          .endofpacket
		.sink0_ready         (crosser_out_ready),                           //     sink0.ready
		.sink0_valid         (crosser_out_valid),                           //          .valid
		.sink0_channel       (crosser_out_channel),                         //          .channel
		.sink0_data          (crosser_out_data),                            //          .data
		.sink0_startofpacket (crosser_out_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket)                      //          .endofpacket
	);

	som_system_altera_merlin_multiplexer_180_zd5hm5y cmd_mux_001 (
		.clk                 (clk_1_clk_clk),                               //       clk.clk
		.reset               (mux_ddr_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                       //          .valid
		.src_data            (cmd_mux_001_src_data),                        //          .data
		.src_channel         (cmd_mux_001_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (crosser_001_out_ready),                       //     sink0.ready
		.sink0_valid         (crosser_001_out_valid),                       //          .valid
		.sink0_channel       (crosser_001_out_channel),                     //          .channel
		.sink0_data          (crosser_001_out_data),                        //          .data
		.sink0_startofpacket (crosser_001_out_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (crosser_001_out_endofpacket)                  //          .endofpacket
	);

	som_system_altera_merlin_demultiplexer_180_x2ejjsa rsp_demux (
		.clk                (clk_1_clk_clk),                                                     //       clk.clk
		.reset              (mux_ddr_0_reset_reset_bridge_in_reset_reset),                       // clk_reset.reset
		.sink_ready         (mux_ddr_0_altera_axi_slave_wr_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (mux_ddr_0_altera_axi_slave_wr_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (mux_ddr_0_altera_axi_slave_wr_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (mux_ddr_0_altera_axi_slave_wr_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (mux_ddr_0_altera_axi_slave_wr_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (mux_ddr_0_altera_axi_slave_wr_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                              //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                              //          .valid
		.src0_data          (rsp_demux_src0_data),                                               //          .data
		.src0_channel       (rsp_demux_src0_channel),                                            //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                                         //          .endofpacket
	);

	som_system_altera_merlin_demultiplexer_180_x2ejjsa rsp_demux_001 (
		.clk                (clk_1_clk_clk),                                                     //       clk.clk
		.reset              (mux_ddr_0_reset_reset_bridge_in_reset_reset),                       // clk_reset.reset
		.sink_ready         (mux_ddr_0_altera_axi_slave_rd_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (mux_ddr_0_altera_axi_slave_rd_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (mux_ddr_0_altera_axi_slave_rd_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (mux_ddr_0_altera_axi_slave_rd_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (mux_ddr_0_altera_axi_slave_rd_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (mux_ddr_0_altera_axi_slave_rd_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                                          //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                                          //          .valid
		.src0_data          (rsp_demux_001_src0_data),                                           //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                                        //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                                     //          .endofpacket
	);

	som_system_altera_merlin_multiplexer_180_ay6xe7y rsp_mux (
		.clk                 (axi_clk_bridge_out_clk_clk),                              //       clk.clk
		.reset               (arria10_hps_0_h2f_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                       //       src.ready
		.src_valid           (rsp_mux_src_valid),                                       //          .valid
		.src_data            (rsp_mux_src_data),                                        //          .data
		.src_channel         (rsp_mux_src_channel),                                     //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                               //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                 //          .endofpacket
		.sink0_ready         (crosser_002_out_ready),                                   //     sink0.ready
		.sink0_valid         (crosser_002_out_valid),                                   //          .valid
		.sink0_channel       (crosser_002_out_channel),                                 //          .channel
		.sink0_data          (crosser_002_out_data),                                    //          .data
		.sink0_startofpacket (crosser_002_out_startofpacket),                           //          .startofpacket
		.sink0_endofpacket   (crosser_002_out_endofpacket)                              //          .endofpacket
	);

	som_system_altera_merlin_multiplexer_180_ay6xe7y rsp_mux_001 (
		.clk                 (axi_clk_bridge_out_clk_clk),                              //       clk.clk
		.reset               (arria10_hps_0_h2f_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                                   //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                                   //          .valid
		.src_data            (rsp_mux_001_src_data),                                    //          .data
		.src_channel         (rsp_mux_001_src_channel),                                 //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                           //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                             //          .endofpacket
		.sink0_ready         (crosser_003_out_ready),                                   //     sink0.ready
		.sink0_valid         (crosser_003_out_valid),                                   //          .valid
		.sink0_channel       (crosser_003_out_channel),                                 //          .channel
		.sink0_data          (crosser_003_out_data),                                    //          .data
		.sink0_startofpacket (crosser_003_out_startofpacket),                           //          .startofpacket
		.sink0_endofpacket   (crosser_003_out_endofpacket)                              //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (82),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (91),
		.IN_PKT_BURSTWRAP_L            (83),
		.IN_PKT_BURST_SIZE_H           (94),
		.IN_PKT_BURST_SIZE_L           (92),
		.IN_PKT_RESPONSE_STATUS_H      (119),
		.IN_PKT_RESPONSE_STATUS_L      (118),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (96),
		.IN_PKT_BURST_TYPE_L           (95),
		.IN_PKT_ORI_BURST_SIZE_L       (120),
		.IN_PKT_ORI_BURST_SIZE_H       (122),
		.IN_ST_DATA_W                  (123),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (190),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (202),
		.OUT_PKT_BURST_SIZE_L          (200),
		.OUT_PKT_RESPONSE_STATUS_H     (227),
		.OUT_PKT_RESPONSE_STATUS_L     (226),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (204),
		.OUT_PKT_BURST_TYPE_L          (203),
		.OUT_PKT_ORI_BURST_SIZE_L      (228),
		.OUT_PKT_ORI_BURST_SIZE_H      (230),
		.OUT_ST_DATA_W                 (231),
		.ST_CHANNEL_W                  (2),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) mux_ddr_0_altera_axi_slave_wr_rsp_width_adapter (
		.clk                  (clk_1_clk_clk),                                                     //       clk.clk
		.reset                (mux_ddr_0_reset_reset_bridge_in_reset_reset),                       // clk_reset.reset
		.in_valid             (router_002_src_valid),                                              //      sink.valid
		.in_channel           (router_002_src_channel),                                            //          .channel
		.in_startofpacket     (router_002_src_startofpacket),                                      //          .startofpacket
		.in_endofpacket       (router_002_src_endofpacket),                                        //          .endofpacket
		.in_ready             (router_002_src_ready),                                              //          .ready
		.in_data              (router_002_src_data),                                               //          .data
		.out_endofpacket      (mux_ddr_0_altera_axi_slave_wr_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (mux_ddr_0_altera_axi_slave_wr_rsp_width_adapter_src_data),          //          .data
		.out_channel          (mux_ddr_0_altera_axi_slave_wr_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (mux_ddr_0_altera_axi_slave_wr_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (mux_ddr_0_altera_axi_slave_wr_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (mux_ddr_0_altera_axi_slave_wr_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                             // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (82),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (91),
		.IN_PKT_BURSTWRAP_L            (83),
		.IN_PKT_BURST_SIZE_H           (94),
		.IN_PKT_BURST_SIZE_L           (92),
		.IN_PKT_RESPONSE_STATUS_H      (119),
		.IN_PKT_RESPONSE_STATUS_L      (118),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (96),
		.IN_PKT_BURST_TYPE_L           (95),
		.IN_PKT_ORI_BURST_SIZE_L       (120),
		.IN_PKT_ORI_BURST_SIZE_H       (122),
		.IN_ST_DATA_W                  (123),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (190),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (202),
		.OUT_PKT_BURST_SIZE_L          (200),
		.OUT_PKT_RESPONSE_STATUS_H     (227),
		.OUT_PKT_RESPONSE_STATUS_L     (226),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (204),
		.OUT_PKT_BURST_TYPE_L          (203),
		.OUT_PKT_ORI_BURST_SIZE_L      (228),
		.OUT_PKT_ORI_BURST_SIZE_H      (230),
		.OUT_ST_DATA_W                 (231),
		.ST_CHANNEL_W                  (2),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) mux_ddr_0_altera_axi_slave_rd_rsp_width_adapter (
		.clk                  (clk_1_clk_clk),                                                     //       clk.clk
		.reset                (mux_ddr_0_reset_reset_bridge_in_reset_reset),                       // clk_reset.reset
		.in_valid             (router_003_src_valid),                                              //      sink.valid
		.in_channel           (router_003_src_channel),                                            //          .channel
		.in_startofpacket     (router_003_src_startofpacket),                                      //          .startofpacket
		.in_endofpacket       (router_003_src_endofpacket),                                        //          .endofpacket
		.in_ready             (router_003_src_ready),                                              //          .ready
		.in_data              (router_003_src_data),                                               //          .data
		.out_endofpacket      (mux_ddr_0_altera_axi_slave_rd_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (mux_ddr_0_altera_axi_slave_rd_rsp_width_adapter_src_data),          //          .data
		.out_channel          (mux_ddr_0_altera_axi_slave_rd_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (mux_ddr_0_altera_axi_slave_rd_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (mux_ddr_0_altera_axi_slave_rd_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (mux_ddr_0_altera_axi_slave_rd_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                             // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (190),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_TRANS_WRITE            (178),
		.IN_PKT_BURSTWRAP_H            (199),
		.IN_PKT_BURSTWRAP_L            (191),
		.IN_PKT_BURST_SIZE_H           (202),
		.IN_PKT_BURST_SIZE_L           (200),
		.IN_PKT_RESPONSE_STATUS_H      (227),
		.IN_PKT_RESPONSE_STATUS_L      (226),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (204),
		.IN_PKT_BURST_TYPE_L           (203),
		.IN_PKT_ORI_BURST_SIZE_L       (228),
		.IN_PKT_ORI_BURST_SIZE_H       (230),
		.IN_ST_DATA_W                  (231),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (82),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (94),
		.OUT_PKT_BURST_SIZE_L          (92),
		.OUT_PKT_RESPONSE_STATUS_H     (119),
		.OUT_PKT_RESPONSE_STATUS_L     (118),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (96),
		.OUT_PKT_BURST_TYPE_L          (95),
		.OUT_PKT_ORI_BURST_SIZE_L      (120),
		.OUT_PKT_ORI_BURST_SIZE_H      (122),
		.OUT_ST_DATA_W                 (123),
		.ST_CHANNEL_W                  (2),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) mux_ddr_0_altera_axi_slave_wr_cmd_width_adapter (
		.clk                  (clk_1_clk_clk),                                                     //       clk.clk
		.reset                (mux_ddr_0_reset_reset_bridge_in_reset_reset),                       // clk_reset.reset
		.in_valid             (cmd_mux_src_valid),                                                 //      sink.valid
		.in_channel           (cmd_mux_src_channel),                                               //          .channel
		.in_startofpacket     (cmd_mux_src_startofpacket),                                         //          .startofpacket
		.in_endofpacket       (cmd_mux_src_endofpacket),                                           //          .endofpacket
		.in_ready             (cmd_mux_src_ready),                                                 //          .ready
		.in_data              (cmd_mux_src_data),                                                  //          .data
		.out_endofpacket      (mux_ddr_0_altera_axi_slave_wr_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (mux_ddr_0_altera_axi_slave_wr_cmd_width_adapter_src_data),          //          .data
		.out_channel          (mux_ddr_0_altera_axi_slave_wr_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (mux_ddr_0_altera_axi_slave_wr_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (mux_ddr_0_altera_axi_slave_wr_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (mux_ddr_0_altera_axi_slave_wr_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                             // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (190),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_TRANS_WRITE            (178),
		.IN_PKT_BURSTWRAP_H            (199),
		.IN_PKT_BURSTWRAP_L            (191),
		.IN_PKT_BURST_SIZE_H           (202),
		.IN_PKT_BURST_SIZE_L           (200),
		.IN_PKT_RESPONSE_STATUS_H      (227),
		.IN_PKT_RESPONSE_STATUS_L      (226),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (204),
		.IN_PKT_BURST_TYPE_L           (203),
		.IN_PKT_ORI_BURST_SIZE_L       (228),
		.IN_PKT_ORI_BURST_SIZE_H       (230),
		.IN_ST_DATA_W                  (231),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (82),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (94),
		.OUT_PKT_BURST_SIZE_L          (92),
		.OUT_PKT_RESPONSE_STATUS_H     (119),
		.OUT_PKT_RESPONSE_STATUS_L     (118),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (96),
		.OUT_PKT_BURST_TYPE_L          (95),
		.OUT_PKT_ORI_BURST_SIZE_L      (120),
		.OUT_PKT_ORI_BURST_SIZE_H      (122),
		.OUT_ST_DATA_W                 (123),
		.ST_CHANNEL_W                  (2),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) mux_ddr_0_altera_axi_slave_rd_cmd_width_adapter (
		.clk                  (clk_1_clk_clk),                                                     //       clk.clk
		.reset                (mux_ddr_0_reset_reset_bridge_in_reset_reset),                       // clk_reset.reset
		.in_valid             (cmd_mux_001_src_valid),                                             //      sink.valid
		.in_channel           (cmd_mux_001_src_channel),                                           //          .channel
		.in_startofpacket     (cmd_mux_001_src_startofpacket),                                     //          .startofpacket
		.in_endofpacket       (cmd_mux_001_src_endofpacket),                                       //          .endofpacket
		.in_ready             (cmd_mux_001_src_ready),                                             //          .ready
		.in_data              (cmd_mux_001_src_data),                                              //          .data
		.out_endofpacket      (mux_ddr_0_altera_axi_slave_rd_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (mux_ddr_0_altera_axi_slave_rd_cmd_width_adapter_src_data),          //          .data
		.out_channel          (mux_ddr_0_altera_axi_slave_rd_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (mux_ddr_0_altera_axi_slave_rd_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (mux_ddr_0_altera_axi_slave_rd_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (mux_ddr_0_altera_axi_slave_rd_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                             // (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (231),
		.BITS_PER_SYMBOL     (231),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (2),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser (
		.in_clk            (axi_clk_bridge_out_clk_clk),                              //        in_clk.clk
		.in_reset          (arria10_hps_0_h2f_axi_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_1_clk_clk),                                           //       out_clk.clk
		.out_reset         (mux_ddr_0_reset_reset_bridge_in_reset_reset),             // out_clk_reset.reset
		.in_ready          (cmd_demux_src0_ready),                                    //            in.ready
		.in_valid          (cmd_demux_src0_valid),                                    //              .valid
		.in_startofpacket  (cmd_demux_src0_startofpacket),                            //              .startofpacket
		.in_endofpacket    (cmd_demux_src0_endofpacket),                              //              .endofpacket
		.in_channel        (cmd_demux_src0_channel),                                  //              .channel
		.in_data           (cmd_demux_src0_data),                                     //              .data
		.out_ready         (crosser_out_ready),                                       //           out.ready
		.out_valid         (crosser_out_valid),                                       //              .valid
		.out_startofpacket (crosser_out_startofpacket),                               //              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                                 //              .endofpacket
		.out_channel       (crosser_out_channel),                                     //              .channel
		.out_data          (crosser_out_data),                                        //              .data
		.in_empty          (1'b0),                                                    //   (terminated)
		.in_error          (1'b0),                                                    //   (terminated)
		.out_empty         (),                                                        //   (terminated)
		.out_error         ()                                                         //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (231),
		.BITS_PER_SYMBOL     (231),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (2),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_001 (
		.in_clk            (axi_clk_bridge_out_clk_clk),                              //        in_clk.clk
		.in_reset          (arria10_hps_0_h2f_axi_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_1_clk_clk),                                           //       out_clk.clk
		.out_reset         (mux_ddr_0_reset_reset_bridge_in_reset_reset),             // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src0_ready),                                //            in.ready
		.in_valid          (cmd_demux_001_src0_valid),                                //              .valid
		.in_startofpacket  (cmd_demux_001_src0_startofpacket),                        //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src0_endofpacket),                          //              .endofpacket
		.in_channel        (cmd_demux_001_src0_channel),                              //              .channel
		.in_data           (cmd_demux_001_src0_data),                                 //              .data
		.out_ready         (crosser_001_out_ready),                                   //           out.ready
		.out_valid         (crosser_001_out_valid),                                   //              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                           //              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                             //              .endofpacket
		.out_channel       (crosser_001_out_channel),                                 //              .channel
		.out_data          (crosser_001_out_data),                                    //              .data
		.in_empty          (1'b0),                                                    //   (terminated)
		.in_error          (1'b0),                                                    //   (terminated)
		.out_empty         (),                                                        //   (terminated)
		.out_error         ()                                                         //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (231),
		.BITS_PER_SYMBOL     (231),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (2),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_002 (
		.in_clk            (clk_1_clk_clk),                                           //        in_clk.clk
		.in_reset          (mux_ddr_0_reset_reset_bridge_in_reset_reset),             //  in_clk_reset.reset
		.out_clk           (axi_clk_bridge_out_clk_clk),                              //       out_clk.clk
		.out_reset         (arria10_hps_0_h2f_axi_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_src0_ready),                                    //            in.ready
		.in_valid          (rsp_demux_src0_valid),                                    //              .valid
		.in_startofpacket  (rsp_demux_src0_startofpacket),                            //              .startofpacket
		.in_endofpacket    (rsp_demux_src0_endofpacket),                              //              .endofpacket
		.in_channel        (rsp_demux_src0_channel),                                  //              .channel
		.in_data           (rsp_demux_src0_data),                                     //              .data
		.out_ready         (crosser_002_out_ready),                                   //           out.ready
		.out_valid         (crosser_002_out_valid),                                   //              .valid
		.out_startofpacket (crosser_002_out_startofpacket),                           //              .startofpacket
		.out_endofpacket   (crosser_002_out_endofpacket),                             //              .endofpacket
		.out_channel       (crosser_002_out_channel),                                 //              .channel
		.out_data          (crosser_002_out_data),                                    //              .data
		.in_empty          (1'b0),                                                    //   (terminated)
		.in_error          (1'b0),                                                    //   (terminated)
		.out_empty         (),                                                        //   (terminated)
		.out_error         ()                                                         //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (231),
		.BITS_PER_SYMBOL     (231),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (2),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_003 (
		.in_clk            (clk_1_clk_clk),                                           //        in_clk.clk
		.in_reset          (mux_ddr_0_reset_reset_bridge_in_reset_reset),             //  in_clk_reset.reset
		.out_clk           (axi_clk_bridge_out_clk_clk),                              //       out_clk.clk
		.out_reset         (arria10_hps_0_h2f_axi_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_001_src0_ready),                                //            in.ready
		.in_valid          (rsp_demux_001_src0_valid),                                //              .valid
		.in_startofpacket  (rsp_demux_001_src0_startofpacket),                        //              .startofpacket
		.in_endofpacket    (rsp_demux_001_src0_endofpacket),                          //              .endofpacket
		.in_channel        (rsp_demux_001_src0_channel),                              //              .channel
		.in_data           (rsp_demux_001_src0_data),                                 //              .data
		.out_ready         (crosser_003_out_ready),                                   //           out.ready
		.out_valid         (crosser_003_out_valid),                                   //              .valid
		.out_startofpacket (crosser_003_out_startofpacket),                           //              .startofpacket
		.out_endofpacket   (crosser_003_out_endofpacket),                             //              .endofpacket
		.out_channel       (crosser_003_out_channel),                                 //              .channel
		.out_data          (crosser_003_out_data),                                    //              .data
		.in_empty          (1'b0),                                                    //   (terminated)
		.in_error          (1'b0),                                                    //   (terminated)
		.out_empty         (),                                                        //   (terminated)
		.out_error         ()                                                         //   (terminated)
	);

endmodule
